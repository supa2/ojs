<?xml version="1.0" encoding="UTF-8"?>
<issue xmlns="http://pkp.sfu.ca" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" published="1" current="1" access_status="1" xsi:schemaLocation="http://pkp.sfu.ca native.xsd">
  <id type="internal" advice="ignore">1</id>
  <issue_identification>
    <volume>1</volume>
    <number>3</number>
    <year>2014</year>
  </issue_identification>
  <date_published>2016-02-12</date_published>
  <last_modified>2016-02-12</last_modified>
  <sections>
    <section ref="ART" seq="1" editor_restricted="0" meta_indexed="1" meta_reviewed="1" abstracts_not_required="0" hide_title="0" hide_author="0" abstract_word_count="0">
      <id type="internal" advice="ignore">1</id>
      <abbrev locale="en_US">ART</abbrev>
      <title locale="en_US">Articles</title>
    </section>
  </sections>
  <issue_galleys xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://pkp.sfu.ca native.xsd"/>
  <articles xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://pkp.sfu.ca native.xsd">
    <article xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" locale="en_US" date_submitted="2016-02-13" stage="submission" date_published="2016-02-13" section_ref="ART" seq="1" access_status="0">
      <id type="internal" advice="ignore">26</id>
      <title locale="en_US">Direct single molecule measurement of TCR triggering by agonist pMHC in living primary T cells</title>
      <abstract locale="en_US">&lt;p&gt;T cells discriminate between self and foreign antigenic peptides, displayed on antigen presenting cell surfaces, via the TCR. While the molecular interactions between TCR and its ligands are well characterized in vitro, quantitative measurements of these interactions in living cells are required to accurately resolve the physical mechanisms of TCR signaling. We report direct single molecule measurements of TCR triggering by agonist pMHC in hybrid junctions between live primary T cells and supported lipid membranes. Every pMHC:TCR complex over the entire cell is tracked while simultaneously monitoring the local membrane recruitment of ZAP70, as a readout of TCR triggering. Mean dwell times for pMHC:TCR molecular binding of 5 and 54 s were measured for two different pMHC:TCR systems. Single molecule measurements of the pMHC:TCR:ZAP70 complex indicate that TCR triggering is stoichiometric with agonist pMHC in a 1:1 ratio. Thus any signal amplification must occur downstream of TCR triggering.&lt;/p&gt;</abstract>
      <authors xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://pkp.sfu.ca native.xsd">
        <author primary_contact="true" include_in_browse="true" user_group_ref="Author">
          <givenname locale="en_US">Geoff</givenname>
          <familyname locale="en_US">O'Donoghue</familyname>
          <affiliation locale="en_US">University of California, Berkeley</affiliation>
          <country>US</country>
          <email>godoghue@mailinator.com</email>
        </author>
        <author include_in_browse="true" user_group_ref="Author">
          <givenname locale="en_US">Rafal</givenname>
          <familyname locale="en_US">Pielak</familyname>
          <affiliation locale="en_US">University of California, Berkeley</affiliation>
          <country>US</country>
          <email>rpielak@mailinator.com</email>
        </author>
        <author include_in_browse="true" user_group_ref="Author">
          <givenname locale="en_US">Alexander</givenname>
          <familyname locale="en_US">Smoligovets</familyname>
          <affiliation locale="en_US">University of California, Berkeley</affiliation>
          <country>US</country>
          <email>asmoligovets@mailinator.com</email>
        </author>
        <author include_in_browse="true" user_group_ref="Author">
          <givenname locale="en_US">Jenny</givenname>
          <familyname locale="en_US">Lin</familyname>
          <affiliation locale="en_US">University of California, Berkeley</affiliation>
          <country>US</country>
          <email>jlin@mailinator.com</email>
        </author>
      </authors>
      <submission_file xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" stage="submission" id="47" xsi:schemaLocation="http://pkp.sfu.ca native.xsd">
        <revision number="1" genre="Article Text" filename="sample.xml" viewable="true" date_uploaded="2016-02-13" date_modified="2016-02-13" filesize="168891" filetype="application/xml" uploader="dbarnes">
          <name locale="en_US">Direct single molecule measurement of TCR triggering by agonist pMHC in living primary T cells</name>
          <embed encoding="base64"></embed>
        </revision>
      </submission_file>
      <submission_file xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" stage="proof" id="48" xsi:schemaLocation="http://pkp.sfu.ca native.xsd">
        <revision number="1" genre="Article Text" filename="sample.xml" viewable="true" date_uploaded="2016-02-13" date_modified="2016-02-13" filesize="168891" filetype="application/xml" uploader="dbarnes">
          <name locale="en_US">Direct single molecule measurement of TCR triggering by agonist pMHC in living primary T cells</name>
          <embed encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCFET0NUWVBFIGFydGljbGUgUFVCTElDICItLy9OTE0vL0RURCBKQVRTIChaMzkuOTYpIEpvdXJuYWwgQXJjaGl2aW5nIGFuZCBJbnRlcmNoYW5nZSBEVEQgdjEuMWQxIDIwMTMwOTE1Ly9FTiIgIkpBVFMtYXJjaGl2ZWFydGljbGUxLmR0ZCI+CjxhcnRpY2xlIHhtbG5zOm1tbD0iaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIGFydGljbGUtdHlwZT0icmVzZWFyY2gtYXJ0aWNsZSIgZHRkLXZlcnNpb249IjEuMWQxIj4KICA8ZnJvbnQ+CiAgICA8am91cm5hbC1tZXRhPgogICAgICA8am91cm5hbC1pZCBqb3VybmFsLWlkLXR5cGU9Im5sbS10YSI+ZWxpZmU8L2pvdXJuYWwtaWQ+CiAgICAgIDxqb3VybmFsLWlkIGpvdXJuYWwtaWQtdHlwZT0iaHdwIj5lTGlmZTwvam91cm5hbC1pZD4KICAgICAgPGpvdXJuYWwtaWQgam91cm5hbC1pZC10eXBlPSJwdWJsaXNoZXItaWQiPmVMaWZlPC9qb3VybmFsLWlkPgogICAgICA8am91cm5hbC10aXRsZS1ncm91cD4KICAgICAgICA8am91cm5hbC10aXRsZT5lTGlmZTwvam91cm5hbC10aXRsZT4KICAgICAgPC9qb3VybmFsLXRpdGxlLWdyb3VwPgogICAgICA8aXNzbiBwdWJsaWNhdGlvbi1mb3JtYXQ9ImVsZWN0cm9uaWMiPjIwNTAtMDg0WDwvaXNzbj4KICAgICAgPHB1Ymxpc2hlcj4KICAgICAgICA8cHVibGlzaGVyLW5hbWU+ZUxpZmUgU2NpZW5jZXMgUHVibGljYXRpb25zLCBMdGQ8L3B1Ymxpc2hlci1uYW1lPgogICAgICA8L3B1Ymxpc2hlcj4KICAgIDwvam91cm5hbC1tZXRhPgogICAgPGFydGljbGUtbWV0YT4KICAgICAgPGFydGljbGUtaWQgcHViLWlkLXR5cGU9InB1Ymxpc2hlci1pZCI+MDA3Nzg8L2FydGljbGUtaWQ+CiAgICAgIDxhcnRpY2xlLWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjc1NTQvZUxpZmUuMDA3Nzg8L2FydGljbGUtaWQ+CiAgICAgIDxhcnRpY2xlLWNhdGVnb3JpZXM+CiAgICAgICAgPHN1YmotZ3JvdXAgc3Viai1ncm91cC10eXBlPSJkaXNwbGF5LWNoYW5uZWwiPgogICAgICAgICAgPHN1YmplY3Q+UmVzZWFyY2ggYXJ0aWNsZTwvc3ViamVjdD4KICAgICAgICA8L3N1YmotZ3JvdXA+CiAgICAgICAgPHN1YmotZ3JvdXAgc3Viai1ncm91cC10eXBlPSJoZWFkaW5nIj4KICAgICAgICAgIDxzdWJqZWN0PkJpb3BoeXNpY3MgYW5kIHN0cnVjdHVyYWwgYmlvbG9neTwvc3ViamVjdD4KICAgICAgICA8L3N1YmotZ3JvdXA+CiAgICAgIDwvYXJ0aWNsZS1jYXRlZ29yaWVzPgogICAgICA8dGl0bGUtZ3JvdXA+CiAgICAgICAgPGFydGljbGUtdGl0bGU+RGlyZWN0IHNpbmdsZSBtb2xlY3VsZSBtZWFzdXJlbWVudCBvZiBUQ1IgdHJpZ2dlcmluZyBieSBhZ29uaXN0IHBNSEMgaW4gbGl2aW5nIHByaW1hcnkgVCBjZWxsczwvYXJ0aWNsZS10aXRsZT4KICAgICAgPC90aXRsZS1ncm91cD4KICAgICAgPGNvbnRyaWItZ3JvdXA+CiAgICAgICAgPGNvbnRyaWIgY29udHJpYi10eXBlPSJhdXRob3IiIGVxdWFsLWNvbnRyaWI9InllcyIgaWQ9ImF1dGhvci00ODEzIj4KICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICA8c3VybmFtZT5PJ0Rvbm9naHVlPC9zdXJuYW1lPgogICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+R2VvZmYgUDwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICA8L25hbWU+CiAgICAgICAgICA8eHJlZiByZWYtdHlwZT0iYWZmIiByaWQ9ImFmZjEiLz4KICAgICAgICAgIDx4cmVmIHJlZi10eXBlPSJhZmYiIHJpZD0iYWZmMiIvPgogICAgICAgICAgPHhyZWYgcmVmLXR5cGU9ImZuIiByaWQ9ImVxdWFsLWNvbnRyaWIiPuKAoDwveHJlZj4KICAgICAgICAgIDx4cmVmIHJlZi10eXBlPSJvdGhlciIgcmlkPSJwYXItMSIvPgogICAgICAgICAgPHhyZWYgcmVmLXR5cGU9ImZuIiByaWQ9ImNvbjEiLz4KICAgICAgICAgIDx4cmVmIHJlZi10eXBlPSJmbiIgcmlkPSJjb25mMSIvPgogICAgICAgIDwvY29udHJpYj4KICAgICAgICA8Y29udHJpYiBjb250cmliLXR5cGU9ImF1dGhvciIgZXF1YWwtY29udHJpYj0ieWVzIiBpZD0iYXV0aG9yLTQ4MTQiPgogICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgIDxzdXJuYW1lPlBpZWxhazwvc3VybmFtZT4KICAgICAgICAgICAgPGdpdmVuLW5hbWVzPlJhZmFsIE08L2dpdmVuLW5hbWVzPgogICAgICAgICAgPC9uYW1lPgogICAgICAgICAgPHhyZWYgcmVmLXR5cGU9ImFmZiIgcmlkPSJhZmYxIi8+CiAgICAgICAgICA8eHJlZiByZWYtdHlwZT0iYWZmIiByaWQ9ImFmZjIiLz4KICAgICAgICAgIDx4cmVmIHJlZi10eXBlPSJmbiIgcmlkPSJlcXVhbC1jb250cmliIj7igKA8L3hyZWY+CiAgICAgICAgICA8eHJlZiByZWYtdHlwZT0ib3RoZXIiIHJpZD0icGFyLTEiLz4KICAgICAgICAgIDx4cmVmIHJlZi10eXBlPSJmbiIgcmlkPSJjb24yIi8+CiAgICAgICAgICA8eHJlZiByZWYtdHlwZT0iZm4iIHJpZD0iY29uZjEiLz4KICAgICAgICA8L2NvbnRyaWI+CiAgICAgICAgPGNvbnRyaWIgY29udHJpYi10eXBlPSJhdXRob3IiIGlkPSJhdXRob3ItNDgxNSI+CiAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgPHN1cm5hbWU+U21vbGlnb3ZldHM8L3N1cm5hbWU+CiAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5BbGV4YW5kZXIgQTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICA8L25hbWU+CiAgICAgICAgICA8eHJlZiByZWYtdHlwZT0iYWZmIiByaWQ9ImFmZjEiLz4KICAgICAgICAgIDx4cmVmIHJlZi10eXBlPSJhZmYiIHJpZD0iYWZmMiIvPgogICAgICAgICAgPHhyZWYgcmVmLXR5cGU9ImFmZiIgcmlkPSJhZmYzIi8+CiAgICAgICAgICA8eHJlZiByZWYtdHlwZT0ib3RoZXIiIHJpZD0icGFyLTEiLz4KICAgICAgICAgIDx4cmVmIHJlZi10eXBlPSJmbiIgcmlkPSJjb24zIi8+CiAgICAgICAgICA8eHJlZiByZWYtdHlwZT0iZm4iIHJpZD0iY29uZjEiLz4KICAgICAgICA8L2NvbnRyaWI+CiAgICAgICAgPGNvbnRyaWIgY29udHJpYi10eXBlPSJhdXRob3IiIGlkPSJhdXRob3ItNDgxNiI+CiAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgPHN1cm5hbWU+TGluPC9zdXJuYW1lPgogICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+SmVubnkgSjwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICA8L25hbWU+CiAgICAgICAgICA8eHJlZiByZWYtdHlwZT0iYWZmIiByaWQ9ImFmZjEiLz4KICAgICAgICAgIDx4cmVmIHJlZi10eXBlPSJhZmYiIHJpZD0iYWZmMiIvPgogICAgICAgICAgPHhyZWYgcmVmLXR5cGU9Im90aGVyIiByaWQ9InBhci0xIi8+CiAgICAgICAgICA8eHJlZiByZWYtdHlwZT0iZm4iIHJpZD0iY29uNCIvPgogICAgICAgICAgPHhyZWYgcmVmLXR5cGU9ImZuIiByaWQ9ImNvbmYxIi8+CiAgICAgICAgPC9jb250cmliPgogICAgICAgIDxjb250cmliIGNvbnRyaWItdHlwZT0iYXV0aG9yIiBjb3JyZXNwPSJ5ZXMiIGlkPSJhdXRob3ItNDcxMyI+CiAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgPHN1cm5hbWU+R3JvdmVzPC9zdXJuYW1lPgogICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+SmF5IFQ8L2dpdmVuLW5hbWVzPgogICAgICAgICAgPC9uYW1lPgogICAgICAgICAgPHhyZWYgcmVmLXR5cGU9ImFmZiIgcmlkPSJhZmYxIi8+CiAgICAgICAgICA8eHJlZiByZWYtdHlwZT0iYWZmIiByaWQ9ImFmZjIiLz4KICAgICAgICAgIDx4cmVmIHJlZi10eXBlPSJjb3JyZXNwIiByaWQ9ImNvcjEiPio8L3hyZWY+CiAgICAgICAgICA8eHJlZiByZWYtdHlwZT0ib3RoZXIiIHJpZD0icGFyLTEiLz4KICAgICAgICAgIDx4cmVmIHJlZi10eXBlPSJmbiIgcmlkPSJjb241Ii8+CiAgICAgICAgICA8eHJlZiByZWYtdHlwZT0iZm4iIHJpZD0iY29uZjEiLz4KICAgICAgICA8L2NvbnRyaWI+CiAgICAgICAgPGFmZiBpZD0iYWZmMSI+PGluc3RpdHV0aW9uIGNvbnRlbnQtdHlwZT0iZGVwdCI+RGVwYXJ0bWVudCBvZiBDaGVtaXN0cnk8L2luc3RpdHV0aW9uPiwgPGluc3RpdHV0aW9uPkhvd2FyZCBIdWdoZXMgTWVkaWNhbCBJbnN0aXR1dGUsIFVuaXZlcnNpdHkgb2YgQ2FsaWZvcm5pYSwgQmVya2VsZXk8L2luc3RpdHV0aW9uPiwgPGFkZHItbGluZT48bmFtZWQtY29udGVudCBjb250ZW50LXR5cGU9ImNpdHkiPkJlcmtlbGV5PC9uYW1lZC1jb250ZW50PjwvYWRkci1saW5lPiwgPGNvdW50cnk+VW5pdGVkIFN0YXRlczwvY291bnRyeT48L2FmZj4KICAgICAgICA8YWZmIGlkPSJhZmYyIj48aW5zdGl0dXRpb24gY29udGVudC10eXBlPSJkZXB0Ij5QaHlzaWNhbCBCaW9zY2llbmNlcyBEaXZpc2lvbjwvaW5zdGl0dXRpb24+LCA8aW5zdGl0dXRpb24+TGF3cmVuY2UgQmVya2VsZXkgTmF0aW9uYWwgTGFib3JhdG9yeSwgVW5pdmVyc2l0eSBvZiBDYWxpZm9ybmlhLCBCZXJrZWxleTwvaW5zdGl0dXRpb24+LCA8YWRkci1saW5lPjxuYW1lZC1jb250ZW50IGNvbnRlbnQtdHlwZT0iY2l0eSI+QmVya2VsZXk8L25hbWVkLWNvbnRlbnQ+PC9hZGRyLWxpbmU+LCA8Y291bnRyeT5Vbml0ZWQgU3RhdGVzPC9jb3VudHJ5PjwvYWZmPgogICAgICAgIDxhZmYgaWQ9ImFmZjMiPjxpbnN0aXR1dGlvbiBjb250ZW50LXR5cGU9ImRlcHQiPkRlcGFydG1lbnQgb2YgTW9sZWN1bGFyIGFuZCBDZWxsIEJpb2xvZ3k8L2luc3RpdHV0aW9uPiwgPGluc3RpdHV0aW9uPlVuaXZlcnNpdHkgb2YgQ2FsaWZvcm5pYSwgQmVya2VsZXk8L2luc3RpdHV0aW9uPiwgPGFkZHItbGluZT48bmFtZWQtY29udGVudCBjb250ZW50LXR5cGU9ImNpdHkiPkJlcmtlbGV5PC9uYW1lZC1jb250ZW50PjwvYWRkci1saW5lPiwgPGNvdW50cnk+VW5pdGVkIFN0YXRlczwvY291bnRyeT48L2FmZj4KICAgICAgPC9jb250cmliLWdyb3VwPgogICAgICA8Y29udHJpYi1ncm91cCBjb250ZW50LXR5cGU9InNlY3Rpb24iPgogICAgICAgIDxjb250cmliIGNvbnRyaWItdHlwZT0iZWRpdG9yIj4KICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICA8c3VybmFtZT5CcnVuZ2VyPC9zdXJuYW1lPgogICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+QXhlbCBUPC9naXZlbi1uYW1lcz4KICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgIDxyb2xlPlJldmlld2luZyBlZGl0b3I8L3JvbGU+CiAgICAgICAgICA8YWZmPjxpbnN0aXR1dGlvbj5Ib3dhcmQgSHVnaGVzIE1lZGljYWwgSW5zdGl0dXRlLCBTdGFuZm9yZCBVbml2ZXJzaXR5PC9pbnN0aXR1dGlvbj4sIDxjb3VudHJ5PlVuaXRlZCBTdGF0ZXM8L2NvdW50cnk+PC9hZmY+CiAgICAgICAgPC9jb250cmliPgogICAgICA8L2NvbnRyaWItZ3JvdXA+CiAgICAgIDxhdXRob3Itbm90ZXM+CiAgICAgICAgPGNvcnJlc3AgaWQ9ImNvcjEiPjxsYWJlbD4qPC9sYWJlbD5Gb3IgY29ycmVzcG9uZGVuY2U6IDxlbWFpbD5KVEdyb3Zlc0BsYmwuZ292PC9lbWFpbD48L2NvcnJlc3A+CiAgICAgICAgPGZuIGZuLXR5cGU9ImNvbiIgaWQ9ImVxdWFsLWNvbnRyaWIiPgogICAgICAgICAgPGxhYmVsPuKAoDwvbGFiZWw+CiAgICAgICAgICA8cD5UaGVzZSBhdXRob3JzIGNvbnRyaWJ1dGVkIGVxdWFsbHkgdG8gdGhpcyB3b3JrPC9wPgogICAgICAgIDwvZm4+CiAgICAgIDwvYXV0aG9yLW5vdGVzPgogICAgICA8cHViLWRhdGUgZGF0ZS10eXBlPSJwdWIiIHB1YmxpY2F0aW9uLWZvcm1hdD0iZWxlY3Ryb25pYyI+CiAgICAgICAgPGRheT4wMzwvZGF5PgogICAgICAgIDxtb250aD4wNzwvbW9udGg+CiAgICAgICAgPHllYXI+MjAxMzwveWVhcj4KICAgICAgPC9wdWItZGF0ZT4KICAgICAgPHB1Yi1kYXRlIHB1Yi10eXBlPSJjb2xsZWN0aW9uIj4KICAgICAgICA8eWVhcj4yMDEzPC95ZWFyPgogICAgICA8L3B1Yi1kYXRlPgogICAgICA8dm9sdW1lPjI8L3ZvbHVtZT4KICAgICAgPGVsb2NhdGlvbi1pZD5lMDA3Nzg8L2Vsb2NhdGlvbi1pZD4KICAgICAgPGhpc3Rvcnk+CiAgICAgICAgPGRhdGUgZGF0ZS10eXBlPSJyZWNlaXZlZCI+CiAgICAgICAgICA8ZGF5PjI2PC9kYXk+CiAgICAgICAgICA8bW9udGg+MDM8L21vbnRoPgogICAgICAgICAgPHllYXI+MjAxMzwveWVhcj4KICAgICAgICA8L2RhdGU+CiAgICAgICAgPGRhdGUgZGF0ZS10eXBlPSJhY2NlcHRlZCI+CiAgICAgICAgICA8ZGF5PjE3PC9kYXk+CiAgICAgICAgICA8bW9udGg+MDU8L21vbnRoPgogICAgICAgICAgPHllYXI+MjAxMzwveWVhcj4KICAgICAgICA8L2RhdGU+CiAgICAgIDwvaGlzdG9yeT4KICAgICAgPHBlcm1pc3Npb25zPgogICAgICAgIDxjb3B5cmlnaHQtc3RhdGVtZW50PsKpIDIwMTMsIE8nRG9ub2dodWUgZXQgYWw8L2NvcHlyaWdodC1zdGF0ZW1lbnQ+CiAgICAgICAgPGNvcHlyaWdodC15ZWFyPjIwMTM8L2NvcHlyaWdodC15ZWFyPgogICAgICAgIDxjb3B5cmlnaHQtaG9sZGVyPk8nRG9ub2dodWUgZXQgYWw8L2NvcHlyaWdodC1ob2xkZXI+CiAgICAgICAgPGxpY2Vuc2UgeGxpbms6aHJlZj0iaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnkvMy4wLyI+CiAgICAgICAgICA8bGljZW5zZS1wPlRoaXMgYXJ0aWNsZSBpcyBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIDxleHQtbGluayBleHQtbGluay10eXBlPSJ1cmkiIHhsaW5rOmhyZWY9Imh0dHA6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LzMuMC8iPkNyZWF0aXZlIENvbW1vbnMgQXR0cmlidXRpb24gTGljZW5zZTwvZXh0LWxpbms+LCB3aGljaCBwZXJtaXRzIHVucmVzdHJpY3RlZCB1c2UgYW5kIHJlZGlzdHJpYnV0aW9uIHByb3ZpZGVkIHRoYXQgdGhlIG9yaWdpbmFsIGF1dGhvciBhbmQgc291cmNlIGFyZSBjcmVkaXRlZC48L2xpY2Vuc2UtcD4KICAgICAgICA8L2xpY2Vuc2U+CiAgICAgIDwvcGVybWlzc2lvbnM+CiAgICAgIDxzZWxmLXVyaSBjb250ZW50LXR5cGU9InBkZiIgeGxpbms6aHJlZj0iZWxpZmUwMDc3OC5wZGYiLz4KICAgICAgPGFic3RyYWN0PgogICAgICAgIDxvYmplY3QtaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuNzU1NC9lTGlmZS4wMDc3OC4wMDE8L29iamVjdC1pZD4KICAgICAgICA8cD5UIGNlbGxzIGRpc2NyaW1pbmF0ZSBiZXR3ZWVuIHNlbGYgYW5kIGZvcmVpZ24gYW50aWdlbmljIHBlcHRpZGVzLCBkaXNwbGF5ZWQgb24gYW50aWdlbiBwcmVzZW50aW5nIGNlbGwgc3VyZmFjZXMsIHZpYSB0aGUgVENSLiBXaGlsZSB0aGUgbW9sZWN1bGFyIGludGVyYWN0aW9ucyBiZXR3ZWVuIFRDUiBhbmQgaXRzIGxpZ2FuZHMgYXJlIHdlbGwgY2hhcmFjdGVyaXplZCBpbiB2aXRybywgcXVhbnRpdGF0aXZlIG1lYXN1cmVtZW50cyBvZiB0aGVzZSBpbnRlcmFjdGlvbnMgaW4gbGl2aW5nIGNlbGxzIGFyZSByZXF1aXJlZCB0byBhY2N1cmF0ZWx5IHJlc29sdmUgdGhlIHBoeXNpY2FsIG1lY2hhbmlzbXMgb2YgVENSIHNpZ25hbGluZy4gV2UgcmVwb3J0IGRpcmVjdCBzaW5nbGUgbW9sZWN1bGUgbWVhc3VyZW1lbnRzIG9mIFRDUiB0cmlnZ2VyaW5nIGJ5IGFnb25pc3QgcE1IQyBpbiBoeWJyaWQganVuY3Rpb25zIGJldHdlZW4gbGl2ZSBwcmltYXJ5IFQgY2VsbHMgYW5kIHN1cHBvcnRlZCBsaXBpZCBtZW1icmFuZXMuIEV2ZXJ5IHBNSEM6VENSIGNvbXBsZXggb3ZlciB0aGUgZW50aXJlIGNlbGwgaXMgdHJhY2tlZCB3aGlsZSBzaW11bHRhbmVvdXNseSBtb25pdG9yaW5nIHRoZSBsb2NhbCBtZW1icmFuZSByZWNydWl0bWVudCBvZiBaQVA3MCwgYXMgYSByZWFkb3V0IG9mIFRDUiB0cmlnZ2VyaW5nLiBNZWFuIGR3ZWxsIHRpbWVzIGZvciBwTUhDOlRDUiBtb2xlY3VsYXIgYmluZGluZyBvZiA1IGFuZCA1NCBzIHdlcmUgbWVhc3VyZWQgZm9yIHR3byBkaWZmZXJlbnQgcE1IQzpUQ1Igc3lzdGVtcy4gU2luZ2xlIG1vbGVjdWxlIG1lYXN1cmVtZW50cyBvZiB0aGUgcE1IQzpUQ1I6WkFQNzAgY29tcGxleCBpbmRpY2F0ZSB0aGF0IFRDUiB0cmlnZ2VyaW5nIGlzIHN0b2ljaGlvbWV0cmljIHdpdGggYWdvbmlzdCBwTUhDIGluIGEgMToxIHJhdGlvLiBUaHVzIGFueSBzaWduYWwgYW1wbGlmaWNhdGlvbiBtdXN0IG9jY3VyIGRvd25zdHJlYW0gb2YgVENSIHRyaWdnZXJpbmcuPC9wPgogICAgICAgIDxwPgogICAgICAgICAgPGJvbGQ+RE9JOjwvYm9sZD4KICAgICAgICAgIDxleHQtbGluayBleHQtbGluay10eXBlPSJkb2kiIHhsaW5rOmhyZWY9IjEwLjc1NTQvZUxpZmUuMDA3NzguMDAxIj5odHRwOi8vZHguZG9pLm9yZy8xMC43NTU0L2VMaWZlLjAwNzc4LjAwMTwvZXh0LWxpbms+CiAgICAgICAgPC9wPgogICAgICA8L2Fic3RyYWN0PgogICAgICA8YWJzdHJhY3QgYWJzdHJhY3QtdHlwZT0iZXhlY3V0aXZlLXN1bW1hcnkiPgogICAgICAgIDxvYmplY3QtaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuNzU1NC9lTGlmZS4wMDc3OC4wMDI8L29iamVjdC1pZD4KICAgICAgICA8dGl0bGU+ZUxpZmUgZGlnZXN0PC90aXRsZT4KICAgICAgICA8cD5UaGUgaW1tdW5lIHN5c3RlbSBpZGVudGlmaWVzIGFuZCBjb21iYXRzIGZvcmVpZ24gb2JqZWN0cywgaW5jbHVkaW5nIHBhdGhvZ2VucywgaW4gdGhlIGJvZHkuIFQgY2VsbHMgYXJlIGtleSBjb21wb25lbnRzIG9mIHRoZSBpbW11bmUgc3lzdGVtLCBhbmQgZWFjaCBoYXMgYSB1bmlxdWUgdmFyaWFudCBvZiBhIHNpZ25hbGxpbmcgY29tcGxleCBrbm93biBhcyB0aGUgVCBjZWxsIHJlY2VwdG9yIG9uIGl0cyBzdXJmYWNlLiBUIGNlbGxzIHNjYW4gdGhlIHN1cmZhY2VzIG9mIG90aGVyIGNlbGxzIGluIHNlYXJjaCBvZiBhbnRpZ2Vucywgd2hpY2ggYXJlIHBlcHRpZGVzIChmcmFnbWVudHMgb2YgcHJvdGVpbnMpIHRoYXQgZGVyaXZlIGZyb20gZm9yZWlnbiBwYXRob2dlbnMgc3VjaCBhcyB2aXJ1c2VzLiBTdWNjZXNzZnVsIHJlY29nbml0aW9uIG9mIGEgZm9yZWlnbiBwZXB0aWRlIGxlYWRzIHRvIGFuIGltbXVuZSByZXNwb25zZSB0aGF0LCBpbiBtb3N0IGNhc2VzLCB1bHRpbWF0ZWx5IHJpZHMgdGhlIGJvZHkgb2YgdGhlIHBhdGhvZ2VuLiBNb3N0IGltcG9ydGFudGx5LCBob3dldmVyLCB0aGUgaW1tdW5lIHN5c3RlbSBtdXN0IGJlIGFibGUgdG8gZGlzY3JpbWluYXRlIGJldHdlZW4gcGVwdGlkZXMgdGhhdCBhcmUgcHJvZHVjZWQgbmF0dXJhbGx5IGluIHRoZSBib2R5ICjigJhzZWxm4oCZIHBlcHRpZGVzKSBhbmQgZm9yZWlnbiBvciDigJhub24tc2VsZuKAmSBwZXB0aWRlcy4gVGhpcyBpcyBjaGFsbGVuZ2luZyBiZWNhdXNlIHNlbGYgcGVwdGlkZXMgbWF5IGhhdmUgc2ltaWxhciBzdHJ1Y3R1cmVzIHRvIG5vbi1zZWxmIHBlcHRpZGVzIGFuZCBhcmUgb2Z0ZW4gbXVjaCBtb3JlIGFidW5kYW50LjwvcD4KICAgICAgICA8cD5NYW55IG1vZGVscyBoYXZlIGJlZW4gcHJvcG9zZWQgdG8gZXhwbGFpbiBob3cgVCBjZWxscyBhcmUgYWJsZSB0byBkZXRlY3QganVzdCBhIGZldyBtb2xlY3VsZXMgb2YgZm9yZWlnbiBwZXB0aWRlLiBBY2NvcmRpbmcgdG8gc29tZSBoeXBvdGhlc2VzIHRoZSBUIGNlbGwgcmVjZXB0b3JzIGdldCB0b2dldGhlciBpbiBjbHVzdGVycyB0byBmdW5jdGlvbiBjb29wZXJhdGl2ZWx5OyBhbHRlcm5hdGl2ZWx5LCBpdCBoYXMgYmVlbiBzdWdnZXN0ZWQgdGhhdCByYXBpZCBiaW5kaW5nIG9mIGEgZm9yZWlnbiBwZXB0aWRlIHRvIG11bHRpcGxlIFQgY2VsbCByZWNlcHRvcnMgc2VxdWVudGlhbGx5IGNhbiBidWlsZCB1cCBhIHN0cm9uZyBzaWduYWwuIEhvd2V2ZXIsIG5vbmUgb2YgdGhlc2UgcGhlbm9tZW5hIGhhdmUgYmVlbiBkaXJlY3RseSBvYnNlcnZlZC48L3A+CiAgICAgICAgPHA+TydEb25vZ2h1ZSBldCBhbC4gbm93IGltYWdlIHRoZSBpbnRlcmFjdGlvbnMgYmV0d2VlbiBUIGNlbGwgcmVjZXB0b3JzIGFuZCBwZXB0aWRlcyBib3VuZCB0byBtb2xlY3VsZXMgY2FsbGVkIG1ham9yIGhpc3RvY29tcGF0aWJpbGl0eSBjb21wbGV4ZXMgKE1IQ3MpLCBhbmQgc2hvdyB0aGF0IFQgY2VsbCBhY3RpdmF0aW9uIGNhbiBvY2N1ciB3aGVuIGEgc2luZ2xlIGZvcmVpZ24gcGVwdGlkZSBiaW5kcyB0byBhIHNpbmdsZSByZWNlcHRvci4gVGhlc2UgaW50ZXJhY3Rpb25zIGFyZSBsb25nLWxpdmVkIGFuZCB1bHRpbWF0ZWx5IHJlc3VsdCBpbiB0aGUgcmVjcnVpdG1lbnQgb2YgWkFQNzAsIHdoaWNoIGhhcyBhbiBpbXBvcnRhbnQgcm9sZSBpbiB0aGUgYWN0aXZhdGlvbiBvZiBUIGNlbGxzLCB0byB0aGUgY29tcGxleCBmb3JtZWQgYnkgdGhlIFQgY2VsbCwgdGhlIHBlcHRpZGUgYW5kIHRoZSBNSEMgbW9sZWN1bGUuIFRoZXJlZm9yZSwgYW55IGFtcGxpZmljYXRpb24gb2YgdGhlIGFjdGl2YXRpbmcgc2lnbmFsIHRyYW5zbWl0dGVkIGJ5IG5vbi1zZWxmIHBlcHRpZGVzIG9jY3VycyBmb2xsb3dpbmcgcmVjZXB0b3IgYmluZGluZywgaW4gY29udHJhc3QgdG8gcHJldmlvdXMgbW9kZWxzLjwvcD4KICAgICAgICA8cD4KICAgICAgICAgIDxib2xkPkRPSTo8L2JvbGQ+CiAgICAgICAgICA8ZXh0LWxpbmsgZXh0LWxpbmstdHlwZT0iZG9pIiB4bGluazpocmVmPSIxMC43NTU0L2VMaWZlLjAwNzc4LjAwMiI+aHR0cDovL2R4LmRvaS5vcmcvMTAuNzU1NC9lTGlmZS4wMDc3OC4wMDI8L2V4dC1saW5rPgogICAgICAgIDwvcD4KICAgICAgPC9hYnN0cmFjdD4KICAgICAgPGt3ZC1ncm91cCBrd2QtZ3JvdXAtdHlwZT0iYXV0aG9yLWtleXdvcmRzIj4KICAgICAgICA8dGl0bGU+QXV0aG9yIGtleXdvcmRzPC90aXRsZT4KICAgICAgICA8a3dkPlRDUiB0cmlnZ2VyaW5nPC9rd2Q+CiAgICAgICAgPGt3ZD5zaW5nbGUgbW9sZWN1bGUga2luZXRpY3M8L2t3ZD4KICAgICAgICA8a3dkPlQgY2VsbHM8L2t3ZD4KICAgICAgPC9rd2QtZ3JvdXA+CiAgICAgIDxrd2QtZ3JvdXAga3dkLWdyb3VwLXR5cGU9InJlc2VhcmNoLW9yZ2FuaXNtIj4KICAgICAgICA8dGl0bGU+UmVzZWFyY2ggb3JnYW5pc208L3RpdGxlPgogICAgICAgIDxrd2Q+TW91c2U8L2t3ZD4KICAgICAgPC9rd2QtZ3JvdXA+CiAgICAgIDxmdW5kaW5nLWdyb3VwPgogICAgICAgIDxhd2FyZC1ncm91cCBpZD0icGFyLTEiPgogICAgICAgICAgPGZ1bmRpbmctc291cmNlPgogICAgICAgICAgICA8aW5zdGl0dXRpb24td3JhcD4KICAgICAgICAgICAgICA8aW5zdGl0dXRpb24+TmF0aW9uYWwgSW5zdGl0dXRlIG9mIEFsbGVyZ3kgYW5kIEluZmVjdGlvdXMgRGlzZWFzZXM8L2luc3RpdHV0aW9uPgogICAgICAgICAgICA8L2luc3RpdHV0aW9uLXdyYXA+CiAgICAgICAgICA8L2Z1bmRpbmctc291cmNlPgogICAgICAgICAgPGF3YXJkLWlkPlBPMSBBSTA5MTU4MDwvYXdhcmQtaWQ+CiAgICAgICAgICA8cHJpbmNpcGFsLWF3YXJkLXJlY2lwaWVudD4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+TydEb25vZ2h1ZTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+R2VvZmYgUDwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+UGllbGFrPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5SYWZhbCBNPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5TbW9saWdvdmV0czwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+QWxleGFuZGVyIEE8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkxpbjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+SmVubnkgSjwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+R3JvdmVzPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5KYXkgVDwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgIDwvcHJpbmNpcGFsLWF3YXJkLXJlY2lwaWVudD4KICAgICAgICA8L2F3YXJkLWdyb3VwPgogICAgICAgIDxmdW5kaW5nLXN0YXRlbWVudD5UaGUgZnVuZGVycyBoYWQgbm8gcm9sZSBpbiBzdHVkeSBkZXNpZ24sIGRhdGEgY29sbGVjdGlvbiBhbmQgaW50ZXJwcmV0YXRpb24sIG9yIHRoZSBkZWNpc2lvbiB0byBzdWJtaXQgdGhlIHdvcmsgZm9yIHB1YmxpY2F0aW9uLjwvZnVuZGluZy1zdGF0ZW1lbnQ+CiAgICAgIDwvZnVuZGluZy1ncm91cD4KICAgICAgPGN1c3RvbS1tZXRhLWdyb3VwPgogICAgICAgIDxjdXN0b20tbWV0YT4KICAgICAgICAgIDxtZXRhLW5hbWU+ZWxpZmUteG1sLXZlcnNpb248L21ldGEtbmFtZT4KICAgICAgICAgIDxtZXRhLXZhbHVlPjI8L21ldGEtdmFsdWU+CiAgICAgICAgPC9jdXN0b20tbWV0YT4KICAgICAgICA8Y3VzdG9tLW1ldGEgc3BlY2lmaWMtdXNlPSJtZXRhLW9ubHkiPgogICAgICAgICAgPG1ldGEtbmFtZT5BdXRob3IgaW1wYWN0IHN0YXRlbWVudDwvbWV0YS1uYW1lPgogICAgICAgICAgPG1ldGEtdmFsdWU+UXVhbnRpdGF0aXZlIG9ic2VydmF0aW9ucyBvZiBzaW5nbGUtbW9sZWN1bGUgYmluZGluZyBiZXR3ZWVuIGFudGlnZW4gYW5kIFQgY2VsbCByZWNlcHRvciAoVENSKSBpbiBsaXZpbmcgcHJpbWFyeSBUIGNlbGxzIHJldmVhbHMgdW5iaW5kaW5nIGtpbmV0aWNzLCBzdG9pY2hpb21ldHJ5IGFuZCBzaWduYWxpbmcgbW9sZWN1bGUgcmVjcnVpdG1lbnQsIHByb3ZpZGluZyBpbnNpZ2h0cyBpbnRvIHRoZSBtZWNoYW5pc21zIG9mIGFudGlnZW4gcmVjb2duaXRpb24gYnkgdGhlIGltbXVuZSBzeXN0ZW0uPC9tZXRhLXZhbHVlPgogICAgICAgIDwvY3VzdG9tLW1ldGE+CiAgICAgIDwvY3VzdG9tLW1ldGEtZ3JvdXA+CiAgICA8L2FydGljbGUtbWV0YT4KICA8L2Zyb250PgogIDxib2R5PgogICAgPHNlYyBpZD0iczEiIHNlYy10eXBlPSJpbnRybyI+CiAgICAgIDx0aXRsZT5JbnRyb2R1Y3Rpb248L3RpdGxlPgogICAgICA8cD5BbiBlc3NlbnRpYWwgYXNwZWN0IG9mIGFkYXB0aXZlIGltbXVuaXR5IGlzIHRoZSBhYmlsaXR5IG9mIFQgY2VsbHMgdG8gZGlzY3JpbWluYXRlIGJldHdlZW4gc3RydWN0dXJhbGx5IHNpbWlsYXIgYWdvbmlzdCBhbmQgbm9uLXN0aW11bGF0b3J5IHNlbGYgcGVwdGlkZXMgYm91bmQgdG8gbWFqb3IgaGlzdG9jb21wYXRpYmlsaXR5IGNvbXBsZXggKHBNSEMpIG1vbGVjdWxlcyBwcmVzZW50ZWQgb24gdGhlIHN1cmZhY2Ugb2YgYW50aWdlbi1wcmVzZW50aW5nIGNlbGxzIChBUENzKSAoPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliNDMiPldlaXNzIGFuZCBMaXR0bWFuLCAxOTk0PC94cmVmPikuIEZld2VyIHRoYW4gMTAgYWdvbmlzdCBwTUhDIG1vbGVjdWxlcyBjYW4gdHJpZ2dlciBUIGNlbGxzICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIxOSI+SXJ2aW5lIGV0IGFsLiwgMjAwMjwveHJlZj47IDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjI2Ij5NYW56IGV0IGFsLiwgMjAxMTwveHJlZj4pLCBhbmQgdGhlIHNpZ25hbGluZyByZXNwb25zZSBvY2N1cnMgb24gYSB0aW1lc2NhbGUgb2Ygc2Vjb25kcyAoPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMThhIj5IdXNlIGV0IGFsLiwgMjAwNzwveHJlZj4pLiBJdCBoYXMgYmVlbiByZWNvZ25pemVkIGZvciBkZWNhZGVzIHRoYXQgc3VidGxlLCBwZXB0aWRlLXNwZWNpZmljIGRpZmZlcmVuY2VzIGluIGJpbmRpbmcgcGFyYW1ldGVycywgZXNwZWNpYWxseSBraW5ldGljIHJhdGVzIGZvciB0aGUgcE1IQyBhbmQgVCBjZWxsIHJlY2VwdG9yIChUQ1IpIHJlYWN0aW9uLCBzZWVtIHRvIGJlIHRoZSBiYXNpcyBvZiBhbnRpZ2VuIHJlY29nbml0aW9uICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIyNyI+TWF0c3VpIGV0IGFsLiwgMTk5NDwveHJlZj47IDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjM5Ij5UaWFuIGV0IGFsLiwgMjAwNzwveHJlZj4pLiBFeHBlcmltZW50YWwgY29ycmVsYXRpb25zIGJldHdlZW4gbW9sZWN1bGFyIHBNSEM6VENSIGJpbmRpbmcga2luZXRpY3MsIHR5cGljYWxseSBkZXRlcm1pbmVkIGZyb20gc29sdXRpb24gYXNzYXlzIG9mIHNvbHVibGUgZXh0cmFjZWxsdWxhciBkb21haW5zIGFuZCBidWxrIG1lYXN1cmVtZW50cyBvZiBUIGNlbGwgYWN0aXZpdHksIGhhdmUgcHJvdmlkZWQgdGhlIGZvdW5kYXRpb24gZm9yIG11Y2ggb2YgdGhpcyB1bmRlcnN0YW5kaW5nLjwvcD4KICAgICAgPHA+RnJvbSBhIHBoeXNpY2FsIHBvaW50IG9mIHZpZXcsIHRoZSBleHRyZW1lIHNlbnNpdGl2aXR5LCBzZWxlY3Rpdml0eSwgYW5kIGFwcGFyZW50IGltbXVuaXR5IHRvIHN0b2NoYXN0aWMgbm9pc2UgZXhoaWJpdGVkIGJ5IFRDUiBhbnRpZ2VuIHJlY29nbml0aW9uIHBvc2UgY2hhbGxlbmdlcyB0byBjbGFzc2ljYWwgbm90aW9ucyBvZiBsaWdhbmQtcmVjZXB0b3Igc2lnbmFsaW5nICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWI0MSI+dmFuIGRlciBNZXJ3ZSBhbmQgRHVzaGVrLCAyMDExPC94cmVmPjsgPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMTEiPkR1c3RpbiBhbmQgR3JvdmVzLCAyMDEyPC94cmVmPikuIEZvciBleGFtcGxlLCB0aGUgbWF4aW11bSBhZmZpbml0eSBhIFRDUiBjYW4gaGF2ZSBmb3Igc2VsZiBwTUhDIGxpZ2FuZHMgKG5vbi10cmlnZ2VyaW5nKSBpcyBzaGFycGx5IGRlZmluZWQgYW5kIGNsb3NlIHRvIHRoZSBhZmZpbml0eSB0aHJlc2hvbGQgZm9yIGZvcmVpZ24gcE1IQyAodHJpZ2dlcmluZykuIENvbnNlcXVlbnRseSwgZXZlcnkgVENSIGlzIGxpa2VseSB0byBiaW5kIGEgc3Vic2V0IG9mIHRoZSBldmVyLXByZXNlbnQgc2VsZiBwTUhDIG1vbGVjdWxlcyB3aXRoIGFmZmluaXRpZXMgZGlmZmVyaW5nIG9ubHkgc2xpZ2h0bHkgZnJvbSBnZW51aW5lIGZvcmVpZ24gYWdvbmlzdCBwTUhDLiBJZiBUQ1IgdHJpZ2dlcmluZyBhbmQgc2lnbmFsaW5nIHdlcmUgc2ltcGx5IHByb3BvcnRpb25hbCB0byBUQ1Igb2NjdXBhbmN5IGJ5IGxpZ2FuZCwgdGhlbiB0aGUgYWJ1bmRhbmNlIG9mIHNlbGYgcE1IQyBjb3VsZCBlYXNpbHkgb3ZlcndoZWxtIGdlbnVpbmUgYWdvbmlzdCBzaWduYWxzLCByZW5kZXJpbmcgdGhpcyBhcyBhbiBpbmVmZmVjdGl2ZSBkaXNjcmltaW5hdG9yeSBtZWNoYW5pc20uIEFsdGVybmF0aXZlbHksIGVhY2ggZW5nYWdlbWVudCBvZiBwTUhDIHdpdGggVENSIChzZXJpYWwgdHJpZ2dlcmluZzsgPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliNDAiPlZhbGl0dXR0aSBldCBhbC4sIDE5OTU8L3hyZWY+KSwgcGVyaGFwcyB3aXRoIHNvbWUgbWluaW11bSBlbmdhZ2VtZW50IHRpbWUgKGtpbmV0aWMgcHJvb2YgcmVhZGluZzsgPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMjgiPk1jS2VpdGhhbiwgMTk5NTwveHJlZj47IDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjMzIj5SYWJpbm93aXR6IGV0IGFsLiwgMTk5NjwveHJlZj4pLCBtaWdodCBkZWZpbmUgdGhlIHRocmVzaG9sZCBmb3IgVENSIHRyaWdnZXJpbmcuIE90aGVyIHByb3Bvc2VkIG1lY2hhbmlzbXMgZWxhYm9yYXRlIGZ1cnRoZXIsIHN1Z2dlc3RpbmcgKHBzZXVkbykgaGV0ZXJvZGltZXJzICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIxOSI+SXJ2aW5lIGV0IGFsLiwgMjAwMjwveHJlZj47IDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjIzIj5Lcm9nc2dhYXJkIGV0IGFsLiwgMjAwNTwveHJlZj4pIG9mIHNlbGYgYW5kIGFnb25pc3QgcE1IQyBtb2xlY3VsZXMgb3IgcE1IQy1pbmRlcGVuZGVudCBmb3JtcyBvZiB0cmFucyBhY3RpdmF0aW9uICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWI2Ij5Db29wZXIgYW5kIFFpYW4sIDIwMDg8L3hyZWY+KSBvZiBtdWx0aXBsZSBUQ1IgYnkgYSBzaW5nbGUgYWdvbmlzdCBwTUhDIG1heSBiZSBhdCB3b3JrLiBQcm92aW5nIG9yIGRpc3Byb3ZpbmcgYW55IG9mIHRoZXNlIHZhcmlvdXMgcG9zc2liaWxpdGllcyBiYXNlZCBvbiBjdXJyZW50IGRhdGEgaXMgY29uZm91bmRlZCBieSB0aGUgdmFzdCBkaWZmZXJlbmNlIGJldHdlZW4gZW5zZW1ibGUgYmlvY2hlbWljYWwgbWVhc3VyZW1lbnRzIGFuZCBjZWxsIHBvcHVsYXRpb24gYmVoYXZpb3IuIFN1YnN0YW50aWFsIGFtYmlndWl0eSB3aXRoIHJlc3BlY3QgdG8gdGhlIGFjdHVhbCBtb2xlY3VsYXIgbWVjaGFuaXNtcyByZXNwb25zaWJsZSBmb3IgYW50aWdlbiB0cmlnZ2VyaW5nIG9mIFQgY2VsbHMgcmVtYWlucy4gQSBwaHlzaWNhbGx5IGFjY3VyYXRlIHVuZGVyc3RhbmRpbmcgb2YgdGhpcyByZW1hcmthYmxlIHByb2Nlc3Mgd2lsbCByZXF1aXJlIHNpbXVsdGFuZW91cyBvYnNlcnZhdGlvbnMgb2YgdGhlIG1vbGVjdWxhciBiaW5kaW5nIGtpbmV0aWNzLCBzdG9pY2hpb21ldHJ5LCBhbmQgbW92ZW1lbnQgb2YgaW5kaXZpZHVhbCBzaWduYWxpbmcgY29tcGxleGVzIGluIGxpdmluZyBUIGNlbGxzLjwvcD4KICAgICAgPHA+SGVyZSwgd2UgY2hhcmFjdGVyaXplIHRoZSBtb2xlY3VsYXIgaW50ZXJhY3Rpb25zIGJldHdlZW4gcE1IQyBhbmQgVENSLCBhdCB0aGUgc2luZ2xlIG1vbGVjdWxlIGxldmVsLCB3aGlsZSBzaW11bHRhbmVvdXNseSBtb25pdG9yaW5nIHRoZSBsb2NhbCBtZW1icmFuZSByZWNydWl0bWVudCBvZiBjeXRvc29saWMgWmV0YS1jaGFpbi1hc3NvY2lhdGVkIHByb3RlaW4ga2luYXNlIDcwIChaQVA3MCkgaW4gbGl2ZSBwcmltYXJ5IFQgY2VsbHMuIEV2ZXJ5IHBNSEMgY2FuIGJlIGluZGl2aWR1YWxseSByZXNvbHZlZCBhbmQgdHJhY2tlZCBmb3IgdXAgdG8gbWludXRlcyBiZWZvcmUgcGhvdG9ibGVhY2hpbmcgYnkgdXNpbmcgYSBtdWx0aS10aW1lc2NhbGUgc2luZ2xlIG1vbGVjdWxlIGZsdW9yZXNjZW5jZSBpbWFnaW5nIGFwcHJvYWNoLiBLZXkgdG8gdGhpcyBzdHJhdGVneSBpcyB0aGUgdmFyaWFibGUgY29udHJvbCBvZiBleGNpdGF0aW9uIGxpZ2h0IGRvc2UgYW5kIGV4cG9zdXJlIHRpbWUgdG8gYWNoaWV2ZSBoYXJkd2FyZSBkaXNjcmltaW5hdGlvbiBvZiBtb2xlY3VsYXIgc3BlY2llcyB3aXRoIGRpZmZlcmVudCBtb2JpbGl0aWVzLiBUaGUgcE1IQyBtb2xlY3VsZXMgZmFsbCBpbnRvIHR3byB1bmFtYmlndW91c2x5IGRpc3Rpbmd1aXNoZWQgY2xhc3Nlczogb25lIHVuZGVyZ29pbmcgZmFzdCByYW5kb20gbW90aW9uIGFuZCB0aGUgc2Vjb25kIG1vdmluZyBzbG93bHkgYWxvbmcgbGluZWFyIHRyYWplY3Rvcmllcy4gVGhlc2Ugc2xvdyBtb3ZpbmcgcE1IQyBhcmUgdGhlIGJvdW5kIHBNSEM6VENSIGNvbXBsZXhlczsgdGhleSBhcmUgb25seSBvYnNlcnZlZCB3aXRoIGFnb25pc3QgcGVwdGlkZSBhbmQgdGhleSBzcGF0aWFsbHkgY29ycmVsYXRlIHdpdGggYm90aCBUQ1IgYW5kIHJlY3J1aXRtZW50IG9mIFpBUDcwLiBUaGUgbGluZWFyIHRyYWplY3RvcmllcyBvZiB0aGUgcE1IQzpUQ1IgY29tcGxleGVzIG1hdGNoIHRoZSB3ZWxsLWNoYXJhY3Rlcml6ZWQgY3l0b3NrZWxldG9uLWRyaXZlbiBtb3ZlbWVudCBvZiBUQ1IgZHVyaW5nIHRoZSBmb3JtYXRpb24gb2YgdGhlIGltbXVub2xvZ2ljYWwgc3luYXBzZSAoPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliNSI+Q2FtcGkgZXQgYWwuLCAyMDA1PC94cmVmPjsgPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliNDciPllva29zdWthIGV0IGFsLiwgMjAwNTwveHJlZj47IDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjkiPkRlTW9uZCBldCBhbC4sIDIwMDg8L3hyZWY+OyA8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWI0OCI+WXUgZXQgYWwuLCAyMDEyPC94cmVmPikuIFRodXMgYSBsb25lIGFnb25pc3QgcE1IQyBib3VuZCB0byBUQ1IgbGVhZHMgdG8gc3RhYmxlIGVuZ2FnZW1lbnQgb2YgdGhlIHJlc3VsdGluZyBjb21wbGV4IHdpdGggdGhlIGN5dG9za2VsZXRvbi4gU2luZ2xlIG1vbGVjdWxlIGludGVuc2l0eSBjYWxpYnJhdGlvbiBvZiB0aGUgbnVtYmVyIG9mIFpBUDcwIHJlY3J1aXRlZCB0byB0aGUgdmljaW5pdHkgb2YgZWFjaCBhZ29uaXN0IHBNSEMgaW5kaWNhdGVzIHRoYXQgVENSIGFyZSB0cmlnZ2VyZWQgaW4gYSAxOjEgc3RvaWNoaW9tZXRyeSB3aXRoIHBNSEMuPC9wPgogICAgICA8cD5Bc3NvY2lhdGlvbnMgb2YgcE1IQyB3aXRoIFRDUiBleGhpYml0ZWQgbW9sZWN1bGFyIGJpbmRpbmcgZHdlbGwgdGltZXMgd2l0aCBtZWFuIGR1cmF0aW9ucyBvZiA1My44IMKxIDEyLjIgcyBhbmQgNS4yIMKxIDAuMiBzIGZvciBBTkQgYW5kIDVjLmM3IFRDUnMsIHJlc3BlY3RpdmVseS4gSW5kaXZpZHVhbCBkd2VsbCB0aW1lcyBhcmUgcm91Z2hseSBleHBvbmVudGlhbGx5IGRpc3RyaWJ1dGVkIGFuZCBhcmUgaW4gZ2VuZXJhbCBhZ3JlZW1lbnQgd2l0aCBidWxrIHNvbHV0aW9uIG1lYXN1cmVtZW50cyBvZiBwTUhDOlRDUiBraW5ldGljIG9mZi1yYXRlcyBmb3IgYm90aCBUQ1JzICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWI3Ij5Db3JzZSBldCBhbC4sIDIwMTA8L3hyZWY+OyA8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIxOCI+SHVwcGEgZXQgYWwuLCAyMDEwPC94cmVmPjsgPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMjkiPk5ld2VsbCBldCBhbC4sIDIwMTE8L3hyZWY+KS4gSG93ZXZlciwgZHdlbGwgdGltZXMgbWVhc3VyZWQgZnJvbSB0cmFja2luZyBleHBlcmltZW50cyBzcGVjaWZpY2FsbHkgY29ycmVzcG9uZCB0byBzcGF0aWFsIGVudHJhcG1lbnQgb2YgcE1IQyB3aXRoIGEgVENSLCBvciBjbHVzdGVyIG9mIFRDUnMgKDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjM1Ij5TY2hhbWVsIGFuZCBBbGFyY29uLCAyMDEzPC94cmVmPiksIG9uIHRoZSBUIGNlbGwgc3VyZmFjZS4gVGhleSBkbyBub3QgbmVjZXNzYXJpbHkgY29ycmVzcG9uZCB0byBpbmRpdmlkdWFsIG1vbGVjdWxhciBiaW5kaW5nIGV2ZW50cyB3aXRoIGEgc2luZ2xlIFRDUi4gSW5kZWVkLCByZWNlbnQgc3R1ZGllcyAoZS5nLiwgYnkgRlJFVCkgaGF2ZSBzdWdnZXN0ZWQgdGhhdCBwTUhDOlRDUiBraW5ldGljIG9mZi1yYXRlcyBtYXkgYmUgYWNjZWxlcmF0ZWQgaW4gbGl2aW5nIGNlbGxzIHJlbGF0aXZlIHRvIGluIHZpdHJvIG1lYXN1cmVtZW50cywgcG9zc2libHkgYXMgYSByZXN1bHQgb2YgYWN0aXZlbHkgYXBwbGllZCBmb3JjZXMgZnJvbSB0aGUgY3l0b3NrZWxldG9uICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIxNyI+SHVhbmcgZXQgYWwuLCAyMDEwPC94cmVmPjsgPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMTgiPkh1cHBhIGV0IGFsLiwgMjAxMDwveHJlZj47IDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjQ5Ij5aaHUgZXQgYWwuLCAyMDEzPC94cmVmPikuIFdlIGV4cGxvcmUgdGhlIHBvc3NpYmlsaXR5IHRoYXQgaW5kaXZpZHVhbCBkd2VsbCB0aW1lcyBvYnNlcnZlZCBieSB0cmFja2luZyBleHBlcmltZW50cyBjb3VsZCBiZSBjb21wb3NlZCBvZiByYXBpZCB1bmJpbmRpbmcgYW5kIHNlcmlhbCByZWJpbmRpbmcgb2YgcE1IQyB0byBtdWx0aXBsZSBUQ1Igd2l0aGluIGEgY2x1c3Rlci4gUmVzdWx0cyBmcm9tIGEgc3RvY2hhc3RpYyByZWFjdGlvbi1kaWZmdXNpb24gYW5hbHlzaXMsIGNvdmVyaW5nIGEgd2lkZSByYW5nZSBvZiBwYXJhbWV0ZXIgc3BhY2UsIGluZGljYXRlIHRoYXQgc2VyaWFsIHJlYmluZGluZyBhbG9uZSBpcyB1bmxpa2VseSB0byBzdXN0YWluIGVudHJhcG1lbnQuIElmIHBNSEMgdGhvcm91Z2hseSBkaXNlbmdhZ2VzIGZyb20gVENSLCBpdCB3aWxsIG1vc3QgbGlrZWx5IGVzY2FwZS4gU3RydWN0dXJhbCBmbGV4aWJpbGl0eSB3aXRoaW4gdGhlIHBNSEM6VENSIGNvbXBsZXggKDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjEiPkFkYW1zIGV0IGFsLiwgMjAxMTwveHJlZj47IDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjE2Ij5IYXdzZSBldCBhbC4sIDIwMTI8L3hyZWY+OyA8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIzNCI+UmVib3VsIGV0IGFsLiwgMjAxMjwveHJlZj4pIGNvdWxkIGdpdmUgcmlzZSB0byBhcHBhcmVudGx5IGZhc3Qga2luZXRpY3MgKGUuZy4sIGluIEZSRVQgbWVhc3VyZW1lbnRzKSB3aXRob3V0IGFjdHVhbCB1bmJpbmRpbmcgb2YgcE1IQyBmcm9tIFRDUi4gVGhlIHRyYWNraW5nIG9ic2VydmF0aW9ucyByZXBvcnRlZCBoZXJlIGRpcmVjdGx5IHJldmVhbCB0aGF0IHRoZSBmdW5jdGlvbmFsIGludGVyYWN0aW9uIGJldHdlZW4gYWdvbmlzdCBwTUhDIGFuZCBUQ1IgaXMgbG9uZy1saXZlZCBpbiBsaXZpbmcgY2VsbHMgYW5kIHRoYXQgdHJpZ2dlcmVkIFRDUiByZW1haW4gbG9jYWxpemVkIHdpdGggdGhlIHNhbWUgcE1IQy48L3A+CiAgICA8L3NlYz4KICAgIDxzZWMgaWQ9InMyIiBzZWMtdHlwZT0icmVzdWx0cyI+CiAgICAgIDx0aXRsZT5SZXN1bHRzPC90aXRsZT4KICAgICAgPHNlYyBpZD0iczItMSI+CiAgICAgICAgPHRpdGxlPkNoYXJhY3Rlcml6YXRpb24gb2YgYWdvbmlzdCBwTUhDOlRDUiBjb21wbGV4ZXM8L3RpdGxlPgogICAgICAgIDxwPldlIHByb2JlIGFnb25pc3QgcE1IQzpUQ1IgY29tcGxleCBkeW5hbWljcyBpbiBoeWJyaWQgbGl2ZSBjZWxs4oCUc3VwcG9ydGVkIG1lbWJyYW5lIGp1bmN0aW9ucyg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIxNCI+R3Jha291aSBldCBhbC4sIDE5OTk8L3hyZWY+KSAoPHhyZWYgcmVmLXR5cGU9ImZpZyIgcmlkPSJmaWcxIj5GaWd1cmUgMUE8L3hyZWY+KS4gVGhlIHN1cHBvcnRlZCBtZW1icmFuZSBpcyBmdW5jdGlvbmFsaXplZCB3aXRoIE1IQyAoSUU8c3VwPms8L3N1cD4pIGFuZCBpbnRlcmNlbGx1bGFyIGFkaGVzaW9uIG1vbGVjdWxlLTEgZnVzaW9uIHdpdGggYSBibHVlIGZsdW9yZXNjZW50IHByb3RlaW4gKElDQU0xLVRhZ0JGUCksIGJvdGggbGlua2VkIHRvIHRoZSBtZW1icmFuZSB2aWEgQy10ZXJtaW5hbCBwb2x5LUhpcyB0YWcgYmluZGluZyB0byBOaS1jaGVsYXRpbmcgbGlwaWRzICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIzMCI+TnllIGFuZCBHcm92ZXMsIDIwMDg8L3hyZWY+KS4gVGhlIE1IQyBpcyBsb2FkZWQgd2l0aCBwZXB0aWRlIChtb3RoIGN5dG9jaHJvbWUgYyBbTUNDXSBhZ29uaXN0IG9yIG51bGwpLCB3aGljaCBpcyBjb3ZhbGVudGx5IGNvdXBsZWQgaW4gYSAxOjEgc3RvaWNoaW9tZXRyeSAodmVyaWZpZWQgYnkgSFBMQykgdG8gdGhlIHBob3Rvc3RhYmxlIGZsdW9yb3Bob3JlcyBBdHRvNjQ3TiBvciBBdHRvNDg4IHVzaW5nIG1hbGVpbWlkZS10aGlvbCBjaGVtaXN0cnkuIFVwb24gY29udGFjdCBiZXR3ZWVuIHRoZSBUIGNlbGwgYW5kIHRoZSBzdXBwb3J0ZWQgbWVtYnJhbmUsIExldWtvY3l0ZSBmdW5jdGlvbi1hc3NvY2lhdGVkIGFudGlnZW4gMSAoTEZBMSktSUNBTTEgYmluZGluZyBsZWFkcyB0byByYXBpZCBjZWxsIHNwcmVhZGluZyBhbmQgZm9ybWF0aW9uIG9mIGFuIGVzc2VudGlhbGx5IHBsYW5hciBpbnRlcmZhY2UgYmV0d2VlbiB0aGUgVCBjZWxsIGFuZCBzdXBwb3J0ZWQgbWVtYnJhbmUsIHdpdGhpbiB3aGljaCBwTUhDOlRDUiBpbnRlcmFjdGlvbnMgb2NjdXIuPGZpZyBpZD0iZmlnMSIgcG9zaXRpb249ImZsb2F0Ij48b2JqZWN0LWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjc1NTQvZUxpZmUuMDA3NzguMDAzPC9vYmplY3QtaWQ+PGxhYmVsPkZpZ3VyZSAxLjwvbGFiZWw+PGNhcHRpb24+PHRpdGxlPkFnb25pc3QgcE1IQyBiaW5kaW5nIHRvIFRDUiBpbiBUIGNlbGxzIGlzIHJldmVhbGVkIGJ5IGNoYW5nZXMgaW4gbW9iaWxpdHkuPC90aXRsZT48cD4oPGJvbGQ+QTwvYm9sZD4pIFNjaGVtYXRpYyBvZiB0aGUgaHlicmlkIGxpdmUgY2VsbOKAk1NMQiBzeXN0ZW0uIEJpbmRpbmcgb2YgYWdvbmlzdCBwTUhDIHRvIFRDUiAoUERCLCAzUUlVKSBsZWFkcyB0byBwaG9zcGhvcnlsYXRpb24gb2YgSVRBTXMsIG9uIHRoZSBpbnRyYWNlbGx1bGFyIGRvbWFpbiBvZiB0aGUgVENSLCB3aGljaCBpcyBmb2xsb3dlZCBieSByZWNydWl0bWVudCBvZiB0aGUga2luYXNlIFpBUDcwIChQREIsIDJPUUksIDJPWk8pLiBXZSBkaXJlY3RseSBvYnNlcnZlIGJvdGggcE1IQzpUQ1IgYmluZGluZyBhbmQgWkFQNzA6SVRBTSByZWNydWl0bWVudCB1c2luZyBzaW5nbGUgbW9sZWN1bGUgZmx1b3Jlc2NlbmNlIG1pY3Jvc2NvcHkgKGJpbGF5ZXIgYWRhcHRlZCBmcm9tIDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjEwIj5Eb21hbnNraSBldCBhbC4sIDIwMTA8L3hyZWY+KS4gKDxib2xkPkI8L2JvbGQ+KSBBdCBzaG9ydCBleHBvc3VyZSB0aW1lcyAoMTcuNSBtcywgbGVmdCkgYWxsIGFnb25pc3QgcE1IQyBtb2xlY3VsZXMgYXJlIHJlYWRpbHkgcmVzb2x2ZWQuIEltYWdpbmcgd2l0aCBhIGxvbmcgZXhwb3N1cmUgdGltZSAoNTAwIG1zLCByaWdodCkgYWxsb3dzIGZvciB1bmFtYmlndW91cyBkaXNjcmltaW5hdGlvbiBiZXR3ZWVuIHRoZSBzbG93LCBUQ1ItYm91bmQgZnJhY3Rpb24gb2YgYWdvbmlzdCBwTUhDIGFuZCB0aGUgZmFzdCBkaWZmdXNpbmcgZnJhY3Rpb24uIFRoaXMgYWxzbyBhbGxvd3MgZm9yIGxvbmcgKDHigJMxMCBzIGludGVydmFsKSB0aW1lLWxhcHNlIHNlcXVlbmNlcyAoPHhyZWYgcmVmLXR5cGU9Im90aGVyIiByaWQ9InZpZGVvMSI+VmlkZW8gMTwveHJlZj4pLiBBdXRvbWF0ZWQgZGV0ZWN0aW9uIG9mIHNpbmdsZSBtb2xlY3VsZSBmZWF0dXJlcyAocmVkIGNpcmNsZXMpIGlzIGRpc2N1c3NlZCBpbiBtZXRob2RzLiAoPGJvbGQ+QzwvYm9sZD4pIFJlcHJlc2VudGF0aXZlIGludGVuc2l0eSB0cmFjZSBzaG93aW5nIGEgc2luZ2xlIGFnb25pc3QgcE1IQyBtb2xlY3VsZSwgaWRlbnRpZmllZCBieSBzdGVwIHBob3RvYmxlYWNoaW5nLCBib3VuZCBjb250aW51b3VzbHkgZm9yIOKIvDYwIHMuICg8Ym9sZD5EPC9ib2xkPikgU3RlcCBzaXplIGhpc3RvZ3JhbSBvZiBzaW5nbGUgYWdvbmlzdCBwTUhDIG1vbGVjdWxlcyBpbiBhIFNMQiBpcyBiaW1vZGFsIHVuZGVyIFQgY2VsbHMgKHJlZCkgYW5kIHVuaW1vZGFsIGJlZm9yZSBhZGRpdGlvbiBvZiBUIGNlbGxzIChibHVlKS4gcE1IQyBtb2xlY3VsZXMgaW4gKDxib2xkPkI8L2JvbGQ+KeKAkyg8Ym9sZD5EPC9ib2xkPikgd2VyZSBsYWJlbGVkIHdpdGggQXR0bzY0N04gb24gdGhlIE1DQyBwZXB0aWRlLjwvcD48cD48Ym9sZD5ET0k6PC9ib2xkPjxleHQtbGluayBleHQtbGluay10eXBlPSJkb2kiIHhsaW5rOmhyZWY9IjEwLjc1NTQvZUxpZmUuMDA3NzguMDAzIj5odHRwOi8vZHguZG9pLm9yZy8xMC43NTU0L2VMaWZlLjAwNzc4LjAwMzwvZXh0LWxpbms+PC9wPjwvY2FwdGlvbj48Z3JhcGhpYyB4bGluazpocmVmPSJlbGlmZTAwNzc4ZjAwMSIvPjwvZmlnPjwvcD4KICAgICAgICA8cD5BdCBmYXN0IGV4cG9zdXJlIHRpbWVzICgxNy41IG1zKSBhbmQgaGlnaCBleGNpdGF0aW9uIHBvd2VycyAoMC4yIFcvY208c3VwPjI8L3N1cD4pLCBhbGwgcE1IQyBtb2xlY3VsZXMgYXJlIHJlYWRpbHkgcmVzb2x2ZWQgKDx4cmVmIHJlZi10eXBlPSJmaWciIHJpZD0iZmlnMSI+RmlndXJlIDFCPC94cmVmPiwgbGVmdCBwYW5lbCkuIFRoZSBwTUhDIG1vdmUgYXMgaW5kaXZpZHVhbCBtb2xlY3VsZXMsIGFzIGlkZW50aWZpZWQgYnkgc2luZ2xlLXN0ZXAgcGhvdG9ibGVhY2hpbmcsIGFuZCBjYW4gYmUgY29udGludW91c2x5IHRyYWNrZWQgZm9yIHVwIHRvIGh1bmRyZWRzIG9mIGZyYW1lcyAoPHhyZWYgcmVmLXR5cGU9ImZpZyIgcmlkPSJmaWcxIj5GaWd1cmUgMUM8L3hyZWY+KS4gSW4gcmVnaW9ucyB3aXRob3V0IGEgY2VsbCwgcE1IQyBleGNsdXNpdmVseSBleGhpYml0IHJhbmRvbSBkaWZmdXNpdmUgbW90aW9uLiBUaGUgc3RlcC1zaXplIGRpc3RyaWJ1dGlvbiBmcm9tIHRoZXNlIHRyYWplY3RvcmllcyBjb3JyZXNwb25kcyB0byBhIHNpbmdsZSBsYXRlcmFsIGRpZmZ1c2lvbiBjb2VmZmljaWVudCBvZiAwLjQ0IChTRU0gPSAwLjAwMikgwrVtPHN1cD4yPC9zdXA+L3MsIHdoaWNoIGlzIHR5cGljYWwgZm9yIHN1cHBvcnRlZCBtZW1icmFuZXMgKDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjI0Ij5MaW4gZXQgYWwuLCAyMDEwPC94cmVmPikuIFdpdGhpbiB0aGUgVCBjZWxsIGp1bmN0aW9uLCB0aGUgc3RlcC1zaXplIGRpc3RyaWJ1dGlvbiBiZWNvbWVzIGJpbW9kYWwgKDx4cmVmIHJlZi10eXBlPSJmaWciIHJpZD0iZmlnMSI+RmlndXJlIDFEPC94cmVmPikuIEluIGFkZGl0aW9uIHRvIGEgZmFzdCBjb21wb25lbnQgZnJvbSBmcmVlbHkgZGlmZnVzaW5nIHBNSEMsIGEgZGlzdGluY3Qgc2xvdy1tb3ZpbmcgY29tcG9uZW50IGFsc28gYXBwZWFycy48L3A+CiAgICAgICAgPHA+QXQgbG9uZyBleHBvc3VyZSB0aW1lcyAoNTAwIG1zKSBhbmQgbG93IGV4Y2l0YXRpb24gcG93ZXJzICgwLjAyIFcvY208c3VwPjI8L3N1cD4pLCB0aGUgZmFzdCBtb3ZpbmcgcE1IQyBmcmFjdGlvbiBpbiA8eHJlZiByZWYtdHlwZT0iZmlnIiByaWQ9ImZpZzEiPkZpZ3VyZSAxRDwveHJlZj4gaXMgYXZlcmFnZWQgb3ZlciBzZXZlcmFsIHBpeGVscyB0byBmb3JtIGEgcmVsYXRpdmVseSBob21vZ2Vub3VzIGJhY2tncm91bmQuIFRoZSBzbG93IG1vdmluZyBtb2xlY3VsZXMgcmVtYWluIGhpZ2hseSBsb2NhbGl6ZWQgYW5kIGNhbiBiZSB1bmFtYmlndW91c2x5IHRyYWNrZWQgZm9yIGxvbmdlciB0aGFuIGEgbWludXRlLCB1c2luZyAx4oCTMTAgcyB0aW1lLWxhcHNlcyAoPHhyZWYgcmVmLXR5cGU9ImZpZyIgcmlkPSJmaWcxIj5GaWd1cmUgMUI8L3hyZWY+LCByaWdodCBwYW5lbDsgPHhyZWYgcmVmLXR5cGU9Im90aGVyIiByaWQ9InZpZGVvMSI+VmlkZW8gMTwveHJlZj4pLiBUaGUgc2xvdyBtb3ZpbmcgcE1IQyBtb2xlY3VsZXMgY29sb2NhbGl6ZSB3aXRoIFRDUiAoPHhyZWYgcmVmLXR5cGU9ImZpZyIgcmlkPSJmaWcyIj5GaWd1cmUgMjwveHJlZj4pIGFuZCBtb3ZlIGluIGxpbmVhciB0cmFqZWN0b3JpZXMgdG93YXJkIHRoZSBnZW9tZXRyaWMgY2VudGVyIG9mIHRoZSBsaXZlIGNlbGwtc3VwcG9ydGVkIG1lbWJyYW5lIGp1bmN0aW9uOyB0aGVzZSBhcmUgdGhlIHBNSEM6VENSIGNvbXBsZXhlcy4gV2hlbiBNSEMgaXMgbG9hZGVkIHdpdGggYSBtaXh0dXJlIG9mIGFnb25pc3QgYW5kIG51bGwgcGVwdGlkZXMsIHdpdGggZGlmZmVyZW50IGZsdW9yZXNjZW50IGxhYmVscywgb25seSB0aGUgYWdvbmlzdCBwZXB0aWRlcyBhcmUgb2JzZXJ2ZWQgaW4gdGhlIHNsb3ctbW92aW5nIGNvbXBsZXhlcyAoPHhyZWYgcmVmLXR5cGU9ImZpZyIgcmlkPSJmaWczIj5GaWd1cmUgMzwveHJlZj4pLiBUaGUgcmVzdWx0IGlzIGlkZW50aWNhbCB3aGVuIHRoZSBmbHVvcm9waG9yZXMgYXJlIHJldmVyc2VkLCBleGNsdWRpbmcgdGhlIHBvc3NpYmlsaXR5IHRoYXQgZmx1b3JvcGhvcmUgZWZmZWN0cyBjb3VsZCBiZSByZXNwb25zaWJsZSBmb3IgYmluZGluZy48bWVkaWEgY29udGVudC10eXBlPSJnbGVuY29lIHBsYXktaW4tcGxhY2UgaGVpZ2h0LTI1MCB3aWR0aC0zMTAiIGlkPSJ2aWRlbzEiIG1pbWUtc3VidHlwZT0ibW92IiBtaW1ldHlwZT0idmlkZW8iIHhsaW5rOmhyZWY9ImVsaWZlMDA3Nzh2MDAxLm1vdiI+PG9iamVjdC1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC43NTU0L2VMaWZlLjAwNzc4LjAwNDwvb2JqZWN0LWlkPjxsYWJlbD5WaWRlbyAxLjwvbGFiZWw+PGNhcHRpb24+PHRpdGxlPkEgMyBzIHRpbWUtbGFwc2UgdmlkZW8gKDE4OSBmcmFtZXMpIG9mIGFnb25pc3QgcE1IQyBpbnRlcmFjdGluZyB3aXRoIGxpdmUgNWMuYzcgVCBjZWxscyAobGFiZWxlZCB3aXRoIE1DQy1BdHRvNDg4KS48L3RpdGxlPjxwPkEgbG9uZyAoNTAwIG1zKSBleHBvc3VyZSB0aW1lIGFsbG93cyBmb3IgdW5hbWJpZ3VvdXMgZGlzY3JpbWluYXRpb24gYmV0d2VlbiBUQ1ItYm91bmQgYW5kIHVuYm91bmQgYWdvbmlzdCBwTUhDIGluIHRoZSBiaWxheWVyLiBUaGUgaGFyZHdhcmUgZmlsdGVyaW5nIGFwcHJvYWNoIHV0aWxpemVkIGhlcmUgZmFjaWxpdGF0ZXMgcGFydGljbGUgZGV0ZWN0aW9uIGluIGEgcmVsYXRpdmVseSBkZW5zZSBmaWVsZCBvZiBmbHVvcm9waG9yZXMsIGFsbG93aW5nIGZvciBsaW5raW5nIHBhcnRpY2xlcyBiZXR3ZWVuIGZyYW1lcyBldmVuIHdoZW4gbG9uZyAoMeKAkzEwcykgdGltZSBsYXBzZXMgYXJlIGludHJvZHVjZWQuIFRoaXMgdGVjaG5pcXVlIGFsc28gaGFzIHRoZSBhZHZhbnRhZ2Ugb2YgdXNpbmcgb25seSBvbmUgcHJvYmUsIGNvbXBhcmVkIHRvIG90aGVyIHRlY2huaXF1ZXMgZm9yIGRldGVjdGluZyBsaWdhbmQgYmluZGluZywgc3VjaCBhcyBzbUZSRVQsIHdoaWNoIHJlcXVpcmUgdHdvIGRpZmZlcmVudCBjb2xvciBwcm9iZXMgdG8gZGV0ZWN0IG9uZSBtb2xlY3VsYXIgYmluZGluZyBldmVudC4gVGhlc2UgYWR2YW50YWdlcyBhbGxvdyBmb3Igc2ltdWx0YW5lb3VzIHR3byBjb2xvciBzaW5nbGUgbW9sZWN1bGUgdHJhY2tpbmcgYW5kIGtpbmV0aWNzIG1lYXN1cmVtZW50cy48L3A+PHA+PGJvbGQ+RE9JOjwvYm9sZD48ZXh0LWxpbmsgZXh0LWxpbmstdHlwZT0iZG9pIiB4bGluazpocmVmPSIxMC43NTU0L2VMaWZlLjAwNzc4LjAwNCI+aHR0cDovL2R4LmRvaS5vcmcvMTAuNzU1NC9lTGlmZS4wMDc3OC4wMDQ8L2V4dC1saW5rPjwvcD48L2NhcHRpb24+PC9tZWRpYT48ZmlnIGlkPSJmaWcyIiBwb3NpdGlvbj0iZmxvYXQiPjxvYmplY3QtaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuNzU1NC9lTGlmZS4wMDc3OC4wMDU8L29iamVjdC1pZD48bGFiZWw+RmlndXJlIDIuPC9sYWJlbD48Y2FwdGlvbj48dGl0bGU+VENSIGFuZCBNQ0MgYWdvbmlzdCBwTUhDIGNvbG9jYWxpemF0aW9uLjwvdGl0bGU+PHA+KDxib2xkPkE8L2JvbGQ+KSBhbmQgKDxib2xkPkI8L2JvbGQ+KSBUQ1IgYW5kIGFnb25pc3QgcE1IQyBjb2xvY2FsaXplIGluIGJ1bGsgaW4gdGhlIGNlbnRyYWwgc3VwcmFtb2xlY3VsYXIgYXNzZW1ibHkgY2x1c3RlciAoY1NNQUMpIGFuZCAoPGJvbGQ+QzwvYm9sZD4pIGF0IHRoZSBzaW5nbGUgbW9sZWN1bGUgbGV2ZWwuIEFsdGhvdWdoIFRDUiBjbHVzdGVycyB3ZXJlIG5vdCByZWFkaWx5IG9ic2VydmVkIGluIHRoZXNlIGV4cGVyaW1lbnRzIChldmVuIHVzaW5nIGEgNCBzIGNhbWVyYSBpbnRlZ3JhdGlvbiB0aW1lKSwgcHJldmlvdXMgcmVwb3J0cyBpbmRpY2F0ZSB0aGF0IFRDUiBkb2VzIGNsdXN0ZXIgYXQgdGhlIGFnb25pc3QgZGVuc2l0eSAo4oi8MC4yIG1vbGVjdWxlcy/CtW08c3VwPjI8L3N1cD4pIHVzZWQgaGVyZSAoPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliNDIiPlZhcm1hIGV0IGFsLiwgMjAwNjwveHJlZj4pLiBIb3dldmVyLCB0aGVzZSByZXBvcnRzIHVzZWQgR1BJLU1IQywgd2hpY2ggaXMgcHJvYmxlbWF0aWMgYmVjYXVzZSB0aGlzIEdQSS1saW5rZWQgcHJvdGVpbiBpcyBhc3NvY2lhdGVkIHdpdGggY2x1c3RlcmluZyBpbiBzdXBwb3J0ZWQgbWVtYnJhbmVzICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIyNiI+TWFueiBldCBhbC4sIDIwMTE8L3hyZWY+OyA8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIxMSI+RHVzdGluIGFuZCBHcm92ZXMsIDIwMTI8L3hyZWY+KS4gVGhlIE5pPHN1cD4yKzwvc3VwPi1jaGVsYXRpbmcgbGlwaWRzIHVzZWQgaW4gc3VwcG9ydGVkIG1lbWJyYW5lcyBmb3IgdGhlIGV4cGVyaW1lbnRzIHJlcG9ydGVkIGhlcmUgaGF2ZSBiZWVuIHNob3duIHRvIGluY3JlYXNlIHRoZSBsaWtlbGlob29kIHRoYXQgYXR0YWNoZWQgcHJvdGVpbnMgYXJlIG1vbm9kaXNwZXJzZWQgKDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjI2Ij5NYW56IGV0IGFsLiwgMjAxMTwveHJlZj47IDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjQ1Ij5YdSBldCBhbC4sIDIwMTE8L3hyZWY+KSwgYW5kIHRoaXMgaXMgY29uZmlybWVkIGJ5IGRpcmVjdCBzaW5nbGUgbW9sZWN1bGUgb2JzZXJ2YXRpb24gaW4gb3VyIGV4cGVyaW1lbnRzLjwvcD48cD48Ym9sZD5ET0k6PC9ib2xkPjxleHQtbGluayBleHQtbGluay10eXBlPSJkb2kiIHhsaW5rOmhyZWY9IjEwLjc1NTQvZUxpZmUuMDA3NzguMDA1Ij5odHRwOi8vZHguZG9pLm9yZy8xMC43NTU0L2VMaWZlLjAwNzc4LjAwNTwvZXh0LWxpbms+PC9wPjwvY2FwdGlvbj48Z3JhcGhpYyB4bGluazpocmVmPSJlbGlmZTAwNzc4ZjAwMiIvPjwvZmlnPjxmaWcgaWQ9ImZpZzMiIHBvc2l0aW9uPSJmbG9hdCI+PG9iamVjdC1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC43NTU0L2VMaWZlLjAwNzc4LjAwNjwvb2JqZWN0LWlkPjxsYWJlbD5GaWd1cmUgMy48L2xhYmVsPjxjYXB0aW9uPjx0aXRsZT5BZ29uaXN0IGJpbmRpbmcgaXMgc3BlY2lmaWMgYW5kIGluZGVwZW5kZW50IG9mIGZsdW9yb3Bob3JlLjwvdGl0bGU+PHA+UklDTSBpbWFnZXMgbWFwIHRoZSBmb290cHJpbnQgb2YgVCBjZWxsIGFkaGVzaW9uIHRvIHRoZSBTTEIgKG1lZGlhdGVkIHRocm91Z2ggTEZBMTpJQ0FNMSBiaW5kaW5nKS4gVCBjZWxscyBlbmdhZ2UgU0xCcyBjb25qdWdhdGVkIHdpdGggbWl4dHVyZXMgb2YgaW5kZXBlbmRlbnRseSBsYWJlbGVkIE1DQyBhZ29uaXN0IGFuZCBudWxsIHBlcHRpZGUgTUhDLiBPbmx5IHRoZSBNQ0MgYWdvbmlzdCBwTUhDIGlzIG9ic2VydmVkIGluIHRoZSBzbG93IG1vdmluZyBmcmFjdGlvbiwgaXJyZXNwZWN0aXZlIG9mIHdoaWNoIGZsdW9yZXNjZW50IGxhYmVsIChBdHRvNDg4IG9yIEF0dG82NDdOKSBpdCBjYXJyaWVzLjwvcD48cD48Ym9sZD5ET0k6PC9ib2xkPjxleHQtbGluayBleHQtbGluay10eXBlPSJkb2kiIHhsaW5rOmhyZWY9IjEwLjc1NTQvZUxpZmUuMDA3NzguMDA2Ij5odHRwOi8vZHguZG9pLm9yZy8xMC43NTU0L2VMaWZlLjAwNzc4LjAwNjwvZXh0LWxpbms+PC9wPjwvY2FwdGlvbj48Z3JhcGhpYyB4bGluazpocmVmPSJlbGlmZTAwNzc4ZjAwMyIvPjwvZmlnPjwvcD4KICAgICAgICA8cD5UaGUgYWdvbmlzdCBwTUhDIGRlbnNpdGllcyB1c2VkIGluIHRoZXNlIGV4cGVyaW1lbnRzIHJhbmdlIGZyb20gMC4yIHRvIDEwMCBtb2xlY3VsZXMvwrVtPHN1cD4yPC9zdXA+LiBUaGUgbG93ZXN0IGRlbnNpdGllcyBhcmUgbmVhciB0aHJlc2hvbGRzIGZvciB0cmlnZ2VyaW5nIENhPHN1cD4yKzwvc3VwPiBmbHV4ICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIyNiI+TWFueiBldCBhbC4sIDIwMTE8L3hyZWY+KSBhbmQgYmVsb3cgbGV2ZWxzIHdoZXJlIHN0YWJsZSBUQ1IgbWljcm9jbHVzdGVycyBhcmUgcmVhZGlseSB2aXNpYmxlICg8eHJlZiByZWYtdHlwZT0iZmlnIiByaWQ9ImZpZzIiPkZpZ3VyZSAyPC94cmVmPiksIHdoZXJlYXMgdGhlIGhpZ2hlciBkZW5zaXRpZXMgYXJlIHdlbGwgYWJvdmUgdGhlIGRlbnNpdGllcyBhdCB3aGljaCBtaWNyb2NsdXN0ZXJzIGFyZSBvYnNlcnZlZCAoPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliNSI+Q2FtcGkgZXQgYWwuLCAyMDA1PC94cmVmPjsgPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliNDciPllva29zdWthIGV0IGFsLiwgMjAwNTwveHJlZj47IDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjkiPkRlTW9uZCBldCBhbC4sIDIwMDg8L3hyZWY+OyA8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWI0OCI+WXUgZXQgYWwuLCAyMDEyPC94cmVmPikuIE5vbmV0aGVsZXNzLCB0aGUgb2JzZXJ2ZWQgc2luZ2xlIG1vbGVjdWxlIHBNSEMgbW90aW9uIGF0IGFsbCBkZW5zaXRpZXMgaXMgcmVtaW5pc2NlbnQgb2YgdGhlIHdlbGwtY2hhcmFjdGVyaXplZCBhY3RvbXlvc2luLWRyaXZlbiBUQ1IgbWljcm9jbHVzdGVyIHJhZGlhbCB0cmFuc3BvcnQgaW4gY2VsbHMgdGhhdCBhcmUgYWN0aXZhdGVkICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWI1Ij5DYW1waSBldCBhbC4sIDIwMDU8L3hyZWY+OyA8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWI0NyI+WW9rb3N1a2EgZXQgYWwuLCAyMDA1PC94cmVmPjsgPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMjEiPkthaXp1a2EgZXQgYWwuLCAyMDA3PC94cmVmPjsgPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliOSI+RGVNb25kIGV0IGFsLiwgMjAwODwveHJlZj47IDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjQ4Ij5ZdSBldCBhbC4sIDIwMTI8L3hyZWY+KS48L3A+CiAgICAgIDwvc2VjPgogICAgICA8c2VjIGlkPSJzMi0yIj4KICAgICAgICA8dGl0bGU+VENSIHRyaWdnZXJpbmcgbW9uaXRvcmVkIGJ5IFpBUDcwIHJlY3J1aXRtZW50PC90aXRsZT4KICAgICAgICA8cD5Ud28tY29sb3Igc2luZ2xlIG1vbGVjdWxlIHRyYWNraW5nIGlzIHVzZWQgdG8gcXVhbnRpdGF0aXZlbHkgbW9uaXRvciBtZW1icmFuZSByZWNydWl0bWVudCBvZiBjeXRvc29saWMgWkFQNzAtRUdGUCAoaW5jb3Jwb3JhdGVkIGJ5IHJldHJvdmlyYWwgdHJhbnNmZWN0aW9uKSB0byB0aGUgbG9jYXRpb25zIG9mIHRoZSBwTUhDOlRDUiBjb21wbGV4ZXMuIFVzaW5nIGEgZHVhbC12aWV3IHN5c3RlbSBpbiB3aGljaCBjaHJvbWF0aWMgYWJlcnJhdGlvbnMgaGF2ZSBiZWVuIG1hcHBlZCAoPHhyZWYgcmVmLXR5cGU9ImZpZyIgcmlkPSJmaWc0czEiPkZpZ3VyZSA04oCUZmlndXJlIHN1cHBsZW1lbnQgMTwveHJlZj4pLCBzcGF0aWFsIGNvbG9jYWxpemF0aW9uIGJldHdlZW4gdGhlIHR3byBjaGFubmVscyB0byBsZXNzIHRoYW4gMTA1IG5tIGlzIGFjaGlldmVkLiBJbW1lZGlhdGVseSBhZnRlciBjZWxsIGxhbmRpbmcsIFpBUDcwIGxvY2FsaXplcyB0byBhbmQgbW92ZXMgdG9nZXRoZXIgd2l0aCB0aGUgcE1IQzpUQ1IgY29tcGxleGVzICg8eHJlZiByZWYtdHlwZT0iZmlnIiByaWQ9ImZpZzQiPkZpZ3VyZSA0QTwveHJlZj47IDx4cmVmIHJlZi10eXBlPSJvdGhlciIgcmlkPSJ2aWRlbzIgdmlkZW8zIj5WaWRlb3MgMiBhbmQgMzwveHJlZj4pLiBGb3IgZWFjaCBmcmFtZSBpbiBhIHRyYWNraW5nIHNlcXVlbmNlLCBmbHVvcmVzY2VuY2UgaW50ZW5zaXR5IGluIHRoZSBaQVA3MC1FR0ZQIGNoYW5uZWwgaXMgaW50ZWdyYXRlZCBvdmVyIGEgMzE1IG5tIHNxdWFyZSByZWdpb24gY2VudGVyZWQgb24gZWFjaCBwTUhDOlRDUiBjb21wbGV4ICg8eHJlZiByZWYtdHlwZT0iZmlnIiByaWQ9ImZpZzQiPkZpZ3VyZSA0QjwveHJlZj4pLiBUaGUgcmVzdWx0aW5nIGludGVuc2l0eSB0cmFjZXMgcmV2ZWFsIGRpc2NyZXRlIGNoYW5nZXMgaW4gYXZlcmFnZSBpbnRlbnNpdHksIHdoaWNoIHdlIGF0dHJpYnV0ZSB0byB0aGUgYmluZGluZyBvZiBvbmUgWkFQNzAtRUdGUCB0byB0aGUgcGhvc3Bob3J5bGF0ZWQgSVRBTSBkb21haW5zIG9uIHRoZSBjeXRvcGxhc21pYyBzaWRlIG9mIFRDUiBlbmdhZ2VkIHdpdGggcE1IQyAoPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMjAiPkl3YXNoaW1hIGV0IGFsLiwgMTk5NDwveHJlZj4pLiBSZXByZXNlbnRhdGl2ZSB0cmFjZXMgb2YgY29sb2NhbGl6ZWQgWkFQNzAtRUdGUCBpbnRlbnNpdHkgYWxvbmcgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBpbnRlbnNpdHkgdHJhY2UgZnJvbSB0aGUgcE1IQyBhcmUgaWxsdXN0cmF0ZWQgaW4gPHhyZWYgcmVmLXR5cGU9ImZpZyIgcmlkPSJmaWc0Ij5GaWd1cmUgNEM8L3hyZWY+LiBTdG9jaGFzdGljIHRyYW5zaXRpb25zIGFyZSBpZGVudGlmaWVkIHVzaW5nIGEgY2hhbmdlLXBvaW50IGFsZ29yaXRobSAoPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMTIiPkVuc2lnbiBhbmQgUGFuZGUsIDIwMDk8L3hyZWY+KSBhbmQgcmVzdWx0cyBmcm9tIHRoaXMgYW5hbHlzaXMgYXJlIHN1cGVyaW1wb3NlZCBvbiB0aGUgcmF3IGludGVuc2l0eSB0cmFjZXMuIE9ic2VydmVkIG1vbGVjdWxhciBiaW5kaW5nIGR3ZWxsIHRpbWVzIG9mIGluZGl2aWR1YWwgWkFQNzAtRUdGUCwgYXMgcmVzb2x2ZWQgYnkgdGhlIHN0b2NoYXN0aWMgdHJhbnNpdGlvbnMsIHJhbmdlIGZyb20gMTIgdG8gMTA3IHMuIFRoZSBtYWpvcml0eSBvZiBzaW5nbGUgbW9sZWN1bGUgWkFQNzAtRUdGUCB0cmFjZXMgZXhoaWJpdCBpbnRlbnNpdHkgZmx1Y3R1YXRpb25zIGNvbnNpc3RlbnQgd2l0aCBiYWNrZ3JvdW5kICg8eHJlZiByZWYtdHlwZT0iZmlnIiByaWQ9ImZpZzRzMiI+RmlndXJlIDTigJRmaWd1cmUgc3VwcGxlbWVudCAyQTwveHJlZj4pLCB3aGljaCB3b3VsZCBub3QgYmUgZXhwZWN0ZWQgaWYgY3l0b3NvbGljIFpBUDcwLUVHRlAgZXhjaGFuZ2VkIGR1cmluZyBleHBvc3VyZSB0aW1lLiBUaGVzZSBkd2VsbCB0aW1lcyBhcmUgc2xpZ2h0bHkgbG9uZ2VyIHRoYW4gZXN0aW1hdGVzIG9mIOKIvDEwIHMgb2J0YWluZWQgZnJvbSBidWxrIGZsdW9yZXNjZW5jZSByZWNvdmVyeSBhZnRlciBwaG90b2JsZWFjaGluZyAoRlJBUCkgZXhwZXJpbWVudHMgKDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjMiPkJ1bm5lbGwgZXQgYWwuLCAyMDAyPC94cmVmPikuIEhvd2V2ZXIsIHRob3NlIGV4cGVyaW1lbnRzIGFsc28gaWRlbnRpZmllZCBhIHNsb3dlci1leGNoYW5naW5nIGZyYWN0aW9uIG9mIFpBUDcwIHRoYXQgd2FzIG5vdCBpbmNsdWRlZCBpbiB0aGUgYXZlcmFnZS48ZmlnLWdyb3VwPjxmaWcgaWQ9ImZpZzQiIHBvc2l0aW9uPSJmbG9hdCI+PG9iamVjdC1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC43NTU0L2VMaWZlLjAwNzc4LjAwNzwvb2JqZWN0LWlkPjxsYWJlbD5GaWd1cmUgNC48L2xhYmVsPjxjYXB0aW9uPjx0aXRsZT5aQVA3MCByZWNydWl0bWVudCwgc3RvaWNoaW9tZXRyeSwgYW5kIG1vdmVtZW50IGFyZSBjb25zaXN0ZW50IHdpdGggMToxIGFnb25pc3QgcE1IQzpUQ1Igc3RvaWNoaW9tZXRyeS48L3RpdGxlPjxwPig8Ym9sZD5BPC9ib2xkPikgQSBzcGF0aWFsIG1hcCBvZiBNQ0MtQXR0bzY0N04gc2luZ2xlIG1vbGVjdWxlIChyZWQpIGFuZCBaQVA3MC1FR0ZQIChibHVlKSBwdW5jdGEuIFJhdyBkYXRhIGFyZSBpbmNsdWRlZCBhcyA8eHJlZiByZWYtdHlwZT0ib3RoZXIiIHJpZD0idmlkZW8yIHZpZGVvMyI+VmlkZW9zIDIgYW5kIDM8L3hyZWY+LiBEYXRhIHdlcmUgcmVjb3JkZWQgYXQgMSBmcmFtZS9zLCBzdWNoIHRoYXQgZWFjaCBhZGphY2VudCBibHVlIG9yIHJlZCBkb3Qgd2FzIHJlY29yZGVkIDEgcyBhcGFydC4gQm90aCBzaW5nbGUgTUNDIGFnb25pc3QgcE1IQyBtb2xlY3VsZXMgYW5kIFpBUDcwLUVHRlAgcHVuY3RhIGZvbGxvdyBsaW5lYXIgdHJhamVjdG9yaWVzIHRvd2FyZHMgdGhlIGdlb21ldHJpYyBjZW50ZXIgb2YgdGhlIDJEIGNlbGzigJNzdXBwb3J0ZWQgYmlsYXllciBpbnRlcmZhY2UuICg8Ym9sZD5CPC9ib2xkPikgU2luZ2xlIFpBUDcwLUVHRlAgbW9sZWN1bGVzIHJlY3J1aXRlZCB0byBzaW5nbGUgYWdvbmlzdCBwTUhDIG1vbGVjdWxlcyAobGFiZWxlZCB3aXRoIE1DQy1BdHRvNjQ3TikgYXJlIHJlY29yZGVkIHVzaW5nIHN1Yi1waXhlbCBjb2xvciByZWdpc3RyYXRpb24gKDx4cmVmIHJlZi10eXBlPSJmaWciIHJpZD0iZmlnNHMxIj5GaWd1cmUgNOKAlGZpZ3VyZSBzdXBwbGVtZW50IDE8L3hyZWY+KS4gKDxib2xkPkM8L2JvbGQ+KSBSZXByZXNlbnRhdGl2ZSBzaW5nbGUgbW9sZWN1bGUgWkFQNzAtRUdGUCAoYmx1ZSkgYW5kIE1DQy1BdHRvNjQ3TiBhZ29uaXN0IHBNSEMgKHJlZCkgbG9jYWxpemVkIGZsdW9yZXNjZW5jZSBpbnRlbnNpdHkgdHJhY2VzLiBDaGFuZ2UtcG9pbnRzIGFyZSBkZXRlY3RlZCB1c2luZyBhIEJheWVzaWFuIGNoYW5nZSBwb2ludCBhbGdvcml0aG0gKGluIGJsYWNrOyBzZWUgbWV0aG9kcykuIFN0ZXAgZGVjcmVhc2VzIGluIE1DQyBpbnRlbnNpdHkgKHJlZCkgYXJlIG1vc3QgbGlrZWx5IGFnb25pc3QgcE1IQzpUQ1IgdW5iaW5kaW5nIGV2ZW50cywgc2luY2UgPGlubGluZS1mb3JtdWxhPjxtbWw6bWF0aCBpZD0iaW5mMSI+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5vZmY8L21tbDptaT48L21tbDptc3ViPjxtbWw6bW8+4omqPC9tbWw6bW8+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPmJsPC9tbWw6bWk+PC9tbWw6bXN1Yj48L21tbDptcm93PjwvbW1sOm1hdGg+PC9pbmxpbmUtZm9ybXVsYT4uIFN0ZXAgaW5jcmVhc2VzIGluIFpBUDcwIGludGVuc2l0eSAoYmx1ZSkgYXJlIGF0dHJpYnV0ZWQgdG8gWkFQNzA6SVRBTSBiaW5kaW5nLiAoPGJvbGQ+RDwvYm9sZD4pIFpBUDcwLUVHRlAgcHVuY3RhIGJyaWdodG5lc3MgaGlzdG9ncmFtIGlzIHN5bW1ldHJpYyBhbmQgY2VudGVyZWQgYXQgMTM2LjAgY291bnRzIMKxIDAuMDQgU0VNIGFuZCBjb3JyZXNwb25kcyB0byBhbiBhdmVyYWdlIG9mIDIuOSDCsSAwLjA0IFNFTSBFR0ZQIG1vbGVjdWxlcyAodXNpbmcgc2l4IHNpbmdsZSBtb2xlY3VsZSBaQVA3MC1FR0ZQIHRyYWNlcyBmcm9tIHRoZSBzYW1lIGNlbGwgZm9yIGludGVuc2l0eSBjYWxpYnJhdGlvbikuIEJyaWdodCBaQVA3MC1FR0ZQIHNwZWNrbGVzIGFyZSBkZXRlY3RlZCBmcm9tIHRoZSByYXcgZGF0YSB1c2luZyBhbiBhdXRvbWF0ZWQgYWxnb3JpdGhtIChibHVlIGNpcmNsZXM7IHNlZSBtZXRob2RzKS4gU2NhbGUgYmFyIDUgwrVtLjwvcD48cD48Ym9sZD5ET0k6PC9ib2xkPjxleHQtbGluayBleHQtbGluay10eXBlPSJkb2kiIHhsaW5rOmhyZWY9IjEwLjc1NTQvZUxpZmUuMDA3NzguMDA3Ij5odHRwOi8vZHguZG9pLm9yZy8xMC43NTU0L2VMaWZlLjAwNzc4LjAwNzwvZXh0LWxpbms+PC9wPjwvY2FwdGlvbj48Z3JhcGhpYyB4bGluazpocmVmPSJlbGlmZTAwNzc4ZjAwNCIvPjwvZmlnPjxmaWcgaWQ9ImZpZzRzMSIgcG9zaXRpb249ImZsb2F0IiBzcGVjaWZpYy11c2U9ImNoaWxkLWZpZyI+PG9iamVjdC1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC43NTU0L2VMaWZlLjAwNzc4LjAwODwvb2JqZWN0LWlkPjxsYWJlbD5GaWd1cmUgNOKAlGZpZ3VyZSBzdXBwbGVtZW50IDEuPC9sYWJlbD48Y2FwdGlvbj48dGl0bGU+RHVhbCBWaWV3IGNvbG9yIHJlZ2lzdHJhdGlvbi48L3RpdGxlPjxwPig8Ym9sZD5BPC9ib2xkPikgVGV0cmFzcGVjIGJlYWRzIGFkaGVyZWQgdG8gcGlyYW5oYS1ldGNoZWQgY292ZXJnbGFzcyBhcmUgdXNlZCB0byBzcGF0aWFsbHkgcmVnaXN0ZXIgdGhlIEVHRlAgYW5kIEF0dG82NDdOIGNoYW5uZWxzIGluIG91ciBzcGxpdCBjYW1lcmEgYXBwYXJhdHVzLiBUZW4gY29uc2VjdXRpdmUgaW1hZ2VzIGFyZSByZWNvcmRlZCBhbmQgdGhlIGNvb3JkaW5hdGUgbWFwIGlzIGdlbmVyYXRlZCBpbiBwb3N0IHByb2Nlc3NpbmcgKHNlZSDigJhNYXRlcmlhbHMgYW5kIG1ldGhvZHPigJkpLiAoPGJvbGQ+QjwvYm9sZD4pIGFuZCAoPGJvbGQ+QzwvYm9sZD4pIFJlZ2lzdHJhdGlvbiB0byBsZXNzIHRoYW4gb25lIHBpeGVsICgxMDUgbm0pIGlzIGFjaGlldmVkIGFjcm9zcyB0aGUgbWFqb3JpdHkgb2YgdGhlIDI2IMOXIDUyIMK1bSBpbWFnaW5nIGFyZWEuIFQgY2VsbHMgYXJlIHR5cGljYWxseSAxMCDCtW0gaW4gZGlhbWV0ZXIsIGFuZCBhcmUgaW1hZ2VkIGF0IHRoZSBjZW50ZXIgb2YgdGhlIGZpZWxkIG9mIHZpZXcuPC9wPjxwPjxib2xkPkRPSTo8L2JvbGQ+PGV4dC1saW5rIGV4dC1saW5rLXR5cGU9ImRvaSIgeGxpbms6aHJlZj0iMTAuNzU1NC9lTGlmZS4wMDc3OC4wMDgiPmh0dHA6Ly9keC5kb2kub3JnLzEwLjc1NTQvZUxpZmUuMDA3NzguMDA4PC9leHQtbGluaz48L3A+PC9jYXB0aW9uPjxncmFwaGljIHhsaW5rOmhyZWY9ImVsaWZlMDA3NzhmczAwMSIvPjwvZmlnPjxmaWcgaWQ9ImZpZzRzMiIgcG9zaXRpb249ImZsb2F0IiBzcGVjaWZpYy11c2U9ImNoaWxkLWZpZyI+PG9iamVjdC1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC43NTU0L2VMaWZlLjAwNzc4LjAwOTwvb2JqZWN0LWlkPjxsYWJlbD5GaWd1cmUgNOKAlGZpZ3VyZSBzdXBwbGVtZW50IDIuPC9sYWJlbD48Y2FwdGlvbj48dGl0bGU+U2luZ2xlIG1vbGVjdWxlIFpBUDcwLUVHRlAuPC90aXRsZT48cD4oPGJvbGQ+QTwvYm9sZD4pIFRoZSBtYWpvcml0eSBvZiBzaW5nbGUgbW9sZWN1bGUgYWdvbmlzdCBwTUhDIHRyYWNlcyByZXN1bHQgaW4gWkFQNzAtRUdGUCB0cmFjZXMgd2l0aCBpbnRlbnNpdHkgZmx1Y3R1YXRpb25zIGNvbnNpc3RlbnQgd2l0aCB0aGUgYmFja2dyb3VuZC4gU3RlcCBpbmNyZWFzZXMgYW5kIGRlY3JlYXNlcyBpbiBaQVA3MC1FR0ZQIGludGVuc2l0eSBhcmUgcmFyZSwgYnV0IHNpbmdsZSBaQVA3MC1FR0ZQIGV2ZW50cyBhcmUgbG9uZy1saXZlZCAoMTLigJMxMDcgcykuIFRha2VuIHRvZ2V0aGVyLCB0aGVzZSBvYnNlcnZhdGlvbnMgaW5kaWNhdGUgdGhhdCByYXBpZCBaQVA3MC1FR0ZQIHVuYmluZGluZyBhbmQgcmViaW5kaW5nIGluIGJldHdlZW4gb2JzZXJ2YXRpb25zIGlzIHVubGlrZWx5LiBJZiByYXBpZCB1bmJpbmRpbmcvcmViaW5kaW5nIHdlcmUgdG8gb2NjdXIsIHRoZW4gZWl0aGVyIHNpbmdsZSBtb2xlY3VsZSBaQVA3MC1FR0ZQIHRyYWNlcyB3b3VsZCBtb3JlIGZyZXF1ZW50IGFuZCBzaG9ydGVyLCBvciBaQVA3MC1FR0ZQIHRyYWNlcyB3aXRob3V0IHNpbmdsZSBzdGVwIGludGVuc2l0eSBpbmNyZWFzZXMgb3IgZGVjcmVhc2VzIHdvdWxkIGJlIG5vaXNpZXIuICg8Ym9sZD5CPC9ib2xkPikgQSBzbWFsbCBtaW5vcml0eSBvZiBhZ29uaXN0IHBNSEMgdHJhY2VzIGV4aGliaXQgdHdvLXN0ZXAgcGhvdG9ibGVhY2hpbmcsIGluZGljYXRpbmcgcE1IQyBkaW1lcml6YXRpb24uIEhvd2V2ZXIsIHRoZSBaQVA3MC1FR0ZQIG91dHB1dCBmb3IgdGhlc2UgdHJhY2VzIGlzIGVxdWl2YWxlbnQgdG8gdGhlIFpBUDcwLUVHRlAgb3V0cHV0IGZvciBzaW5nbGUgYWdvbmlzdCBwTUhDIHNpbmdsZSBtb2xlY3VsZSB0cmFjZXMuPC9wPjxwPjxib2xkPkRPSTo8L2JvbGQ+PGV4dC1saW5rIGV4dC1saW5rLXR5cGU9ImRvaSIgeGxpbms6aHJlZj0iMTAuNzU1NC9lTGlmZS4wMDc3OC4wMDkiPmh0dHA6Ly9keC5kb2kub3JnLzEwLjc1NTQvZUxpZmUuMDA3NzguMDA5PC9leHQtbGluaz48L3A+PC9jYXB0aW9uPjxncmFwaGljIHhsaW5rOmhyZWY9ImVsaWZlMDA3NzhmczAwMiIvPjwvZmlnPjwvZmlnLWdyb3VwPjwvcD4KICAgICAgICA8cD5aQVA3MC1FR0ZQIGZlYXR1cmVzIGJyaWdodGVyIHRoYW4gc2luZ2xlIG1vbGVjdWxlcyBhcmUgYWxzbyBvYnNlcnZlZCBhbmQgd2UgY2FsaWJyYXRlIHRoZWlyIHN0b2ljaGlvbWV0cmllcyB1c2luZyBzaW5nbGUgbW9sZWN1bGUgWkFQNzAtRUdGUCBpbnRlbnNpdGllcyBmcm9tIHRoZSBzYW1lIGNlbGwuIEZvciBleGFtcGxlLCB0aGUgYXZlcmFnZSBaQVA3MC1FR0ZQIGZlYXR1cmUgaW50ZW5zaXR5IHBlciBmcmFtZSAoMTM2LjAgY291bnRzIMKxIDAuMDQgU0VNLCBpbnRlZ3JhdGVkIG92ZXIgYSAzMTUgbm0gc3F1YXJlIGFyZWEgZm9yIGVhY2ggZmVhdHVyZSkgZm9yIHRoZSBjZWxsIHNob3duIGluIDx4cmVmIHJlZi10eXBlPSJmaWciIHJpZD0iZmlnNCI+RmlndXJlIDREPC94cmVmPiBjb3JyZXNwb25kcyB0byAyLjkgwrEgMC4wNCBTRU0gWkFQNzAtRUdGUCBwZXIgZmVhdHVyZSwgZ2l2ZW4gdGhhdCB0aGUgc2luZ2xlIG1vbGVjdWxlIGludGVuc2l0eSBpcyA0NyDCsSAyIGNvdW50cyAoU0VNOyBuID0gNikgaW4gdGhhdCBjZWxsLiBFYWNoIGZlYXR1cmUgdGhlcmVmb3JlIGNvbnRhaW5zIG9uIGF2ZXJhZ2Ug4oi8NiBaQVA3MCBtb2xlY3VsZXMsIHNpbmNlIFpBUDcwLUVHRlAgd2FzIGV4cHJlc3NlZCBpbiBhIHJvdWdobHkgMToxIHJhdGlvIHdpdGggZW5kb2dlbm91cyBaQVA3MCAoc2VsZWN0ZWQgYnkgRkFDUyBhbmQgY29uZmlybWVkIGJ5IHdlc3Rlcm4gYmxvdHRpbmcpIGluIHRoZXNlIGV4cGVyaW1lbnRzLiBFYWNoIFRDUiBjb21wbGV4IGhhcyAxMCBJVEFNIGRvbWFpbnMgdGhhdCwgd2hlbiBwaG9zcGhvcnlsYXRlZCwgY2FuIGJpbmQgb25lIFpBUDcwIGVhY2ggKDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjQzIj5XZWlzcyBhbmQgTGl0dG1hbiwgMTk5NDwveHJlZj4pLiBUaHVzIG9ic2VydmF0aW9uIG9mIOKIvDYgWkFQNzAgcGVyIGFnb25pc3QgcE1IQyBzdWdnZXN0cyBvbmx5IGEgc2luZ2xlIFRDUiBpcyB0cmlnZ2VyZWQuPC9wPgogICAgICAgIDxwPkJyaWdodGVyIFpBUDcwLUVHRlAgZmVhdHVyZXMgdGVuZCB0byBiZSBsb2NhdGVkIHRvd2FyZHMgdGhlIGdlb21ldHJpYyBjZW50ZXIgb2YgdGhlIGNlbGwgYXQgbGF0ZXIgdGltZSBwb2ludHMgKCZndDs14oCTMTAgbWluIGFmdGVyIFQgY2VsbCBsYW5kaW5nKS4gVGhlc2UgY2FuIGJlIHRyYWNrZWQgZm9yIHRlbnMgdG8gaHVuZHJlZHMgb2Ygc2Vjb25kcywgaW5kaWNhdGluZyB0aGF0IHJlY3J1aXRlZCBaQVA3MC1FR0ZQIHJlbWFpbiBzdGFibHkgYXNzb2NpYXRlZCB3aXRoIHRoZSBwTUhDOlRDUiBjb21wbGV4IHdoaWxlIHRyYXZlbGluZyBhbG9uZyB0aGUgc2FtZSBsaW5lYXIgdHJhamVjdG9yaWVzICg8eHJlZiByZWYtdHlwZT0iZmlnIiByaWQ9ImZpZzQiPkZpZ3VyZSA0QTwveHJlZj47IDx4cmVmIHJlZi10eXBlPSJvdGhlciIgcmlkPSJ2aWRlbzIgdmlkZW8zIj5WaWRlb3MgMiBhbmQgMzwveHJlZj4pLiBUaGUgb2JzZXJ2YXRpb24gb2YgYSByYW5nZSBvZiBaQVA3MC1FR0ZQIHN0b2ljaGlvbWV0cmllcyAoZnJvbSAxIHRvIOKIvDEwIFpBUDcwLUVHRlAgcGVyIHBNSEM6VENSIGNvbXBsZXgpIGltcGxpZXMgdGhhdCBzb21lIHRpbWUtZGVwZW5kZW50IGFjY3VtdWxhdGlvbiBvZiBaQVA3MCBpcyBsaWtlbHkgdG8gb2NjdXIsIGFsdGhvdWdoIHdlIGhhdmUgbm90IGRlZmluaXRpdmVseSBvYnNlcnZlZCBaQVA3MC1FR0ZQIGFjY3VtdWxhdGlvbiBvdmVyIHRpbWUgd2l0aGluIGluZGl2aWR1YWwgaW50ZW5zaXR5IHRyYWNlcy4gVGFrZW4gdG9nZXRoZXIsIHRoZXNlIG9ic2VydmF0aW9ucyBkZW1vbnN0cmF0ZSB0aGF0IGVuZ2FnZW1lbnQgb2YgVENSIHdpdGggYW4gaW5kaXZpZHVhbCBhZ29uaXN0IHBNSEMgbW9sZWN1bGUgbGVhZHMgdG8gc3RhYmxlIGFzc29jaWF0aW9uIHdpdGggdGhlIGFjdGluIGN5dG9za2VsZXRvbiwgb25lLXRvLW9uZSBUQ1IgdHJpZ2dlcmluZyAoSVRBTSBwaG9zcGhvcnlsYXRpb24pLCBhbmQgc3Vic2VxdWVudCBaQVA3MCByZWNydWl0bWVudC4gTW9yZW92ZXIsIHNpbmNlIGV2ZXJ5IHBNSEM6VENSOlpBUDcwIGNvbXBsZXggaXMgaW5kaXZpZHVhbGx5IHJlc29sdmVkIGluIHRoZXNlIGV4cGVyaW1lbnRzLCB3ZSBkZW1vbnN0cmF0ZSB0aGF0IGEgc2luZ2xlIHBNSEM6VENSIGNvbXBsZXggY2FuIGxlYWQgdG8gVENSIHRyaWdnZXJpbmcgd2l0aG91dCBtb2xlY3VsYXItc2NhbGUgYXNzb2NpYXRpb24gd2l0aCBvdGhlciBNSEMgbW9sZWN1bGVzLjxtZWRpYSBjb250ZW50LXR5cGU9ImdsZW5jb2UgcGxheS1pbi1wbGFjZSBoZWlnaHQtMjUwIHdpZHRoLTMxMCIgaWQ9InZpZGVvMiIgbWltZS1zdWJ0eXBlPSJtb3YiIG1pbWV0eXBlPSJ2aWRlbyIgeGxpbms6aHJlZj0iZWxpZmUwMDc3OHYwMDIubW92Ij48b2JqZWN0LWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjc1NTQvZUxpZmUuMDA3NzguMDEwPC9vYmplY3QtaWQ+PGxhYmVsPlZpZGVvIDIuPC9sYWJlbD48Y2FwdGlvbj48dGl0bGU+U2ltdWx0YW5lb3VzIG9ic2VydmF0aW9uIG9mIFpBUDcwLUVHRlAgcmVjcnVpdG1lbnQgYW5kIHBNSEM6VENSIGJpbmRpbmcgaW1tZWRpYXRlbHkgYWZ0ZXIgYSBsaXZpbmcgQU5EIFQgY2VsbCBsYW5kcyBvbiB0aGUgU0xCLjwvdGl0bGU+PHA+WkFQNzAtRUdGUCBtZW1icmFuZSByZWNydWl0bWVudCAoPHhyZWYgcmVmLXR5cGU9Im90aGVyIiByaWQ9InZpZGVvMiI+VmlkZW8gMjwveHJlZj4pIGFuZCBwTUhDOlRDUiBiaW5kaW5nICg8eHJlZiByZWYtdHlwZT0ib3RoZXIiIHJpZD0idmlkZW8zIj5WaWRlbyAzPC94cmVmPikgb2NjdXIgYWxtb3N0IGltbWVkaWF0ZWx5IGFmdGVyIGxhbmRpbmcuIFJhZGlhbCB0cmFuc3BvcnQgb2YgcE1IQzpUQ1I6WkFQNzAgY29tcGxleGVzIGNvbW1lbmNlcyBpbW1lZGlhdGVseSBhZnRlciBsYW5kaW5nLiBEYXRhIHdlcmUgcmVjb3JkZWQgYXQgMSBmcmFtZSBwZXIgc2Vjb25kIHdpdGggYSA1MDAgbXMgaW50ZWdyYXRpb24gdGltZS4gVGhlc2UgZGF0YSB3ZXJlIGFuYWx5emVkIHRvIGNyZWF0ZSB0aGUgc3BhdGlhbCBtYXAgb2YgcE1IQyBhbmQgWkFQNzAgcG9zaXRpb25zIGRpc3BsYXllZCBpbiA8eHJlZiByZWYtdHlwZT0iZmlnIiByaWQ9ImZpZzQiPkZpZ3VyZSA0QTwveHJlZj4uPC9wPjxwPjxib2xkPkRPSTo8L2JvbGQ+PGV4dC1saW5rIGV4dC1saW5rLXR5cGU9ImRvaSIgeGxpbms6aHJlZj0iMTAuNzU1NC9lTGlmZS4wMDc3OC4wMTAiPmh0dHA6Ly9keC5kb2kub3JnLzEwLjc1NTQvZUxpZmUuMDA3NzguMDEwPC9leHQtbGluaz48L3A+PC9jYXB0aW9uPjwvbWVkaWE+PG1lZGlhIGNvbnRlbnQtdHlwZT0iZ2xlbmNvZSBwbGF5LWluLXBsYWNlIGhlaWdodC0yNTAgd2lkdGgtMzEwIiBpZD0idmlkZW8zIiBtaW1lLXN1YnR5cGU9Im1vdiIgbWltZXR5cGU9InZpZGVvIiB4bGluazpocmVmPSJlbGlmZTAwNzc4djAwMy5tb3YiPjxvYmplY3QtaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuNzU1NC9lTGlmZS4wMDc3OC4wMTE8L29iamVjdC1pZD48bGFiZWw+VmlkZW8gMy48L2xhYmVsPjxjYXB0aW9uPjx0aXRsZT5TaW11bHRhbmVvdXMgb2JzZXJ2YXRpb24gb2YgWkFQNzAtRUdGUCByZWNydWl0bWVudCBhbmQgcE1IQzpUQ1IgYmluZGluZyBpbW1lZGlhdGVseSBhZnRlciBhIGxpdmluZyBBTkQgVCBjZWxsIGxhbmRzIG9uIHRoZSBTTEIuPC90aXRsZT48cD5UaGlzIHZpZGVvIHNob3dzIGJpbmRpbmcgb2YgcE1IQzpUQ1IsIGFuZCBpcyBmcm9tIHRoZSBzYW1lIGNlbGwgYXMgdGhlIFpBUDcwLUVHRlAgZGF0YSBpbiA8eHJlZiByZWYtdHlwZT0ib3RoZXIiIHJpZD0idmlkZW8yIj5WaWRlbyAyPC94cmVmPi4gQWdvbmlzdCBwTUhDIGlzIGxhYmVsZWQgYXMgTUNDLUF0dG82NDdOLiBUaGVzZSBkYXRhIHdlcmUgYW5hbHl6ZWQgdG8gY3JlYXRlIHRoZSBzcGF0aWFsIG1hcCBvZiBwTUhDIGFuZCBaQVA3MCBwb3NpdGlvbnMgZGlzcGxheWVkIGluIDx4cmVmIHJlZi10eXBlPSJmaWciIHJpZD0iZmlnNCI+RmlndXJlIDRBPC94cmVmPi48L3A+PHA+PGJvbGQ+RE9JOjwvYm9sZD48ZXh0LWxpbmsgZXh0LWxpbmstdHlwZT0iZG9pIiB4bGluazpocmVmPSIxMC43NTU0L2VMaWZlLjAwNzc4LjAxMSI+aHR0cDovL2R4LmRvaS5vcmcvMTAuNzU1NC9lTGlmZS4wMDc3OC4wMTE8L2V4dC1saW5rPjwvcD48L2NhcHRpb24+PC9tZWRpYT48L3A+CiAgICAgIDwvc2VjPgogICAgICA8c2VjIGlkPSJzMi0zIj4KICAgICAgICA8dGl0bGU+U2luZ2xlIG1vbGVjdWxlIGFnb25pc3QgcE1IQzpUQ1IgYmluZGluZyBraW5ldGljczwvdGl0bGU+CiAgICAgICAgPHA+U2luY2UgdGhlIHNsb3ctbW92aW5nIHBNSEMgY2FuIGJlIGNsZWFybHkgcmVzb2x2ZWQgZnJvbSB0aGUgZmFzdCBtb3ZpbmcgY29tcG9uZW50LCB0aGUgbGlmZXRpbWUgb2YgbW9sZWN1bGVzIGluIHRoaXMgYm91bmQgc3RhdGUgaXMgZGlyZWN0bHkgb2JzZXJ2YWJsZS4gVGhlIG1pbmltdW0gZGV0ZWN0YWJsZSBsaWZldGltZSBpcyBsaW1pdGVkIGJ5IHRoZSBmYXN0ZXN0IGZyYW1lIHJhdGUgKDE3LjUgbXMgcGVyIGZyYW1lKSBhbmQgdGhlIG1heGltdW0gbWVhc3VyZWFibGUgbGlmZXRpbWUgaXMgbGltaXRlZCBieSBwaG90b2JsZWFjaGluZy4gRm9yIHRoZXNlIHNpbmdsZSBtb2xlY3VsZSB0cmFja2luZyBleHBlcmltZW50cywgdGhlIHRlbXBvcmFsIGR5bmFtaWMgcmFuZ2Ugc3BhbnMgZnJvbSDiiLw1MCBtcyB0byDiiLw1IG1pbi4gVW5iaW5kaW5nIGFuZCBwaG90b2JsZWFjaGluZyBhcmUgaW5kaXN0aW5ndWlzaGFibGUgaW4gZmx1b3Jlc2NlbmNlIG1ldGhvZHMgc3VjaCBhcyB0aGlzLiBGb3IgbW9sZWN1bGFyIGJpbmRpbmcsIGNoYXJhY3Rlcml6ZWQgYnkgYSBjb25zdGFudCBraW5ldGljIG9mZi1yYXRlLCB0aGUgZGlzdHJpYnV0aW9uIG9mIG9ic2VydmVkIGR3ZWxsIHRpbWVzLCA8aW5saW5lLWZvcm11bGE+PG1tbDptYXRoIGlkPSJpbmYyIj48bW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9iczwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+LCBpcyBkZXNjcmliZWQgYnk8ZGlzcC1mb3JtdWxhIGlkPSJlcXUxIj48bW1sOm1hdGggaWQ9Im0xIj48bW1sOm1yb3c+PG1tbDptaT5mPC9tbWw6bWk+PG1tbDptcm93PjxtbWw6bW8+KDwvbW1sOm1vPjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+b2JzPC9tbWw6bWk+PC9tbWw6bXN1Yj48L21tbDptcm93PjxtbWw6bW8+KTwvbW1sOm1vPjwvbW1sOm1yb3c+PG1tbDptbz49PC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bW8+KDwvbW1sOm1vPjxtbWw6bXJvdz48bW1sOm1zdXA+PG1tbDptcm93PjxtbWw6bXJvdz48bW1sOm1vPuKMqTwvbW1sOm1vPjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+Ymw8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PG1tbDptbz7ijKo8L21tbDptbz48L21tbDptcm93PjwvbW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bW8+4oiSPC9tbWw6bW8+PG1tbDptbj4xPC9tbWw6bW4+PC9tbWw6bXJvdz48L21tbDptc3VwPjxtbWw6bW8+KzwvbW1sOm1vPjxtbWw6bXN1cD48bW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bW8+4oypPC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5vZmY8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PG1tbDptbz7ijKo8L21tbDptbz48L21tbDptcm93PjwvbW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bW8+4oiSPC9tbWw6bW8+PG1tbDptbj4xPC9tbWw6bW4+PC9tbWw6bXJvdz48L21tbDptc3VwPjwvbW1sOm1yb3c+PG1tbDptbz4pPC9tbWw6bW8+PC9tbWw6bXJvdz48bW1sOm1zdXA+PG1tbDptaT5lPC9tbWw6bWk+PG1tbDptcm93PjxtbWw6bW8+4oiSPC9tbWw6bW8+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9iczwvbW1sOm1pPjwvbW1sOm1zdWI+PG1tbDptcm93PjxtbWw6bW8+KDwvbW1sOm1vPjxtbWw6bXJvdz48bW1sOm1zdXA+PG1tbDptcm93PjxtbWw6bXJvdz48bW1sOm1vPuKMqTwvbW1sOm1vPjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+Ymw8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PG1tbDptbz7ijKo8L21tbDptbz48L21tbDptcm93PjwvbW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bW8+4oiSPC9tbWw6bW8+PG1tbDptbj4xPC9tbWw6bW4+PC9tbWw6bXJvdz48L21tbDptc3VwPjxtbWw6bW8+KzwvbW1sOm1vPjxtbWw6bXN1cD48bW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bW8+4oypPC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5vZmY8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PG1tbDptbz7ijKo8L21tbDptbz48L21tbDptcm93PjwvbW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bW8+4oiSPC9tbWw6bW8+PG1tbDptbj4xPC9tbWw6bW4+PC9tbWw6bXJvdz48L21tbDptc3VwPjwvbW1sOm1yb3c+PG1tbDptbz4pPC9tbWw6bW8+PC9tbWw6bXJvdz48L21tbDptcm93PjwvbW1sOm1zdXA+PG1tbDptbz4sPC9tbWw6bW8+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvZGlzcC1mb3JtdWxhPndoZXJlIDxpbmxpbmUtZm9ybXVsYT48bW1sOm1hdGggaWQ9ImluZjMiPjxtbWw6bXJvdz48bW1sOm1zdXA+PG1tbDptcm93PjxtbWw6bXJvdz48bW1sOm1vPuKMqTwvbW1sOm1vPjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+Ymw8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PG1tbDptbz7ijKo8L21tbDptbz48L21tbDptcm93PjwvbW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bW8+4oiSPC9tbWw6bW8+PG1tbDptbj4xPC9tbWw6bW4+PC9tbWw6bXJvdz48L21tbDptc3VwPjwvbW1sOm1yb3c+PC9tbWw6bWF0aD48L2lubGluZS1mb3JtdWxhPiBpcyB0aGUgcGhvdG9ibGVhY2hpbmcgcmF0ZSAoPGl0YWxpYz5rPC9pdGFsaWM+PHN1Yj48aXRhbGljPmI8L2l0YWxpYz48L3N1Yj4pLCA8aW5saW5lLWZvcm11bGE+PG1tbDptYXRoIGlkPSJpbmY0Ij48bW1sOm1yb3c+PG1tbDptc3VwPjxtbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7ijKk8L21tbDptbz48bW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9mZjwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48bW1sOm1vPuKMqjwvbW1sOm1vPjwvbW1sOm1yb3c+PC9tbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7iiJI8L21tbDptbz48bW1sOm1uPjE8L21tbDptbj48L21tbDptcm93PjwvbW1sOm1zdXA+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+IGlzIHRoZSB1bmJpbmRpbmcgcmF0ZSAoPGl0YWxpYz5rPC9pdGFsaWM+PHN1Yj48aXRhbGljPm9mZjwvaXRhbGljPjwvc3ViPiksIGFuZCA8aW5saW5lLWZvcm11bGE+PG1tbDptYXRoIGlkPSJpbmY1Ij48bW1sOm1yb3c+PG1tbDptc3VwPjxtbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz4oPC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bXN1cD48bW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bW8+4oypPC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5ibDwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48bW1sOm1vPuKMqjwvbW1sOm1vPjwvbW1sOm1yb3c+PC9tbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7iiJI8L21tbDptbz48bW1sOm1uPjE8L21tbDptbj48L21tbDptcm93PjwvbW1sOm1zdXA+PG1tbDptbz4rPC9tbWw6bW8+PG1tbDptc3VwPjxtbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7ijKk8L21tbDptbz48bW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9mZjwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48bW1sOm1vPuKMqjwvbW1sOm1vPjwvbW1sOm1yb3c+PC9tbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7iiJI8L21tbDptbz48bW1sOm1uPjE8L21tbDptbj48L21tbDptcm93PjwvbW1sOm1zdXA+PC9tbWw6bXJvdz48bW1sOm1vPik8L21tbDptbz48L21tbDptcm93PjwvbW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bW8+4oiSPC9tbWw6bW8+PG1tbDptbj4xPC9tbWw6bW4+PC9tbWw6bXJvdz48L21tbDptc3VwPjxtbWw6bW8+PTwvbW1sOm1vPjxtbWw6bXJvdz48bW1sOm1vPuKMqTwvbW1sOm1vPjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+b2JzPC9tbWw6bWk+PC9tbWw6bXN1Yj48L21tbDptcm93PjxtbWw6bW8+4oyqPC9tbWw6bW8+PC9tbWw6bXJvdz48L21tbDptcm93PjwvbW1sOm1hdGg+PC9pbmxpbmUtZm9ybXVsYT4gaXMgdGhlIG9ic2VydmVkIG1lYW4gZHdlbGwgdGltZSBpbiB0aGlzIGV4cGVyaW1lbnQuIFRoZSBvYnNlcnZlZCBkd2VsbCB0aW1lIGRpc3RyaWJ1dGlvbnMgYXJlIHJvdWdobHkgZXhwb25lbnRpYWwsIGFzIGlzIGV4cGVjdGVkIGZvciBtb2xlY3VsYXIgYmluZGluZy4gVGh1cyBieSBtZWFzdXJpbmcgYm90aCA8aXRhbGljPms8L2l0YWxpYz48c3ViPjxpdGFsaWM+Ymw8L2l0YWxpYz48L3N1Yj4gYW5kIDxpbmxpbmUtZm9ybXVsYT48bW1sOm1hdGggaWQ9ImluZjYiPjxtbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7ijKk8L21tbDptbz48bW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9iczwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48bW1sOm1vPuKMqjwvbW1sOm1vPjwvbW1sOm1yb3c+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+IGl0IGlzIHBvc3NpYmxlIHRvIGRldGVybWluZSA8aW5saW5lLWZvcm11bGE+PG1tbDptYXRoIGlkPSJpbmY3Ij48bW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bW8+4oypPC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5vZmY8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PG1tbDptbz7ijKo8L21tbDptbz48L21tbDptcm93PjwvbW1sOm1yb3c+PC9tbWw6bWF0aD48L2lubGluZS1mb3JtdWxhPiBhcyBsb25nIGFzIDxpbmxpbmUtZm9ybXVsYT48bW1sOm1hdGggaWQ9ImluZjgiPjxtbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7ijKk8L21tbDptbz48bW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9iczwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48bW1sOm1vPuKMqjwvbW1sOm1vPjwvbW1sOm1yb3c+PG1tbDptbz7iiaQ8L21tbDptbz48bW1sOm1yb3c+PG1tbDptbz7ijKk8L21tbDptbz48bW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPmJsPC9tbWw6bWk+PC9tbWw6bXN1Yj48L21tbDptcm93PjxtbWw6bW8+4oyqPC9tbWw6bW8+PC9tbWw6bXJvdz48L21tbDptcm93PjwvbW1sOm1hdGg+PC9pbmxpbmUtZm9ybXVsYT4uIFdlIGRldGVybWluZSA8aW5saW5lLWZvcm11bGE+PG1tbDptYXRoIGlkPSJpbmY5Ij48bW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bW8+4oypPC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5vZmY8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PG1tbDptbz7ijKo8L21tbDptbz48L21tbDptcm93PjwvbW1sOm1yb3c+PC9tbWw6bWF0aD48L2lubGluZS1mb3JtdWxhPiB0byBiZSA1My44IMKxIDEyLjIgcyBmb3IgQU5EIGFuZCA1LjIgwrEgMC4yIHMgZm9yIDVjLmM3IFRDUnMgZm9yIEF0dG80ODgtbGFiZWxlZCBwZXB0aWRlIGFnb25pc3Qgd2l0aCA8aW5saW5lLWZvcm11bGE+PG1tbDptYXRoIGlkPSJpbmYxMCI+PG1tbDptcm93PjxtbWw6bXJvdz48bW1sOm1vPuKMqTwvbW1sOm1vPjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+Ymw8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PG1tbDptbz7ijKo8L21tbDptbz48L21tbDptcm93PjwvbW1sOm1yb3c+PC9tbWw6bWF0aD48L2lubGluZS1mb3JtdWxhPiBvZiAzMDAgYW5kIDMwIHMgcmVzcGVjdGl2ZWx5ICg8eHJlZiByZWYtdHlwZT0iZmlnIiByaWQ9ImZpZzUiPkZpZ3VyZSA1QSxCPC94cmVmPikuIFdoaWxlIGZsdW9yZXNjZW50IGxhYmVscyBjYW4gYWZmZWN0IGJpbmRpbmcga2luZXRpY3MsIHdlIG1lYXN1cmUgc2ltaWxhciB2YWx1ZXMgb2YgPGlubGluZS1mb3JtdWxhPjxtbWw6bWF0aCBpZD0iaW5mMTEiPjxtbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7ijKk8L21tbDptbz48bW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9mZjwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48bW1sOm1vPuKMqjwvbW1sOm1vPjwvbW1sOm1yb3c+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+IHdpdGggYm90aCBBdHRvNjQ3TiBhbmQgQXR0bzQ4OCBsYWJlbGVkIHBlcHRpZGVzIChzZWUsIGUuZy4sIDx4cmVmIHJlZi10eXBlPSJmaWciIHJpZD0iZmlnMSBmaWczIGZpZzQiPkZpZ3VyZXMgMUMsIDMsIGFuZCA0QSxDPC94cmVmPikuIDxpbmxpbmUtZm9ybXVsYT48bW1sOm1hdGggaWQ9ImluZjEyIj48bW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bW8+4oypPC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5vZmY8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PG1tbDptbz7ijKo8L21tbDptbz48L21tbDptcm93PjwvbW1sOm1yb3c+PC9tbWw6bWF0aD48L2lubGluZS1mb3JtdWxhPiBpcyBhbHNvIHJlbGF0aXZlbHkgdW5jaGFuZ2VkIGF0IGhpZ2ggYWdvbmlzdCBwTUhDIGRlbnNpdHkgKDEwMCBtb2xlY3VsZXMvwrVtPHN1cD4yPC9zdXA+KSwgd2hpY2ggaXMgZmFyIGFib3ZlIG1pbmltYWwgbGV2ZWxzIHJlcXVpcmVkIGZvciBUIGNlbGwgYWN0aXZhdGlvbiBhbmQgb2JzZXJ2YXRpb24gb2Ygc3RhYmxlIFRDUiBtaWNyb2NsdXN0ZXJzICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIyNiI+TWFueiBldCBhbC4sIDIwMTE8L3hyZWY+KSAoPHhyZWYgcmVmLXR5cGU9ImZpZyIgcmlkPSJmaWc1Ij5GaWd1cmUgNUM8L3hyZWY+KS4gV2Ugb2JzZXJ2ZSB0aGF0IGN5dG9za2VsZXRvbiBkaXNydXB0aW9uIGJ5IHRoZSBhY3Rpbi1iaW5kaW5nIG1vbGVjdWxlLCBMYXRydW5jdWxpbiBBLCBtb2RlcmF0ZWx5IGluY3JlYXNlcyA8aW5saW5lLWZvcm11bGE+PG1tbDptYXRoIGlkPSJpbmYxMyI+PG1tbDptcm93PjxtbWw6bXJvdz48bW1sOm1vPuKMqTwvbW1sOm1vPjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+b2ZmPC9tbWw6bWk+PC9tbWw6bXN1Yj48L21tbDptcm93PjxtbWw6bW8+4oyqPC9tbWw6bW8+PC9tbWw6bXJvdz48L21tbDptcm93PjwvbW1sOm1hdGg+PC9pbmxpbmUtZm9ybXVsYT4gd2l0aCB0aGUgQU5EIFRDUiBhbmQgaGFkIG5vIHNpZ25pZmljYW50IGVmZmVjdCBvbiA1Yy5jNyBraW5ldGljcyAoPHhyZWYgcmVmLXR5cGU9ImZpZyIgcmlkPSJmaWc1Ij5GaWd1cmUgNUM8L3hyZWY+KS4gU2ltaWxhcmx5LCB0aGUgZHdlbGwgdGltZSBkaXN0cmlidXRpb24gd2FzIG9ubHkgbW9kZXN0bHkgYWZmZWN0ZWQgYnkgYW50aS1DRDQgKGRhdGEgbm90IHNob3duKTsgaG93ZXZlciwgdGhlIHRvdGFsIG51bWJlciBvZiBUQ1I6cE1IQyBjb21wbGV4ZXMgcGVyIGNlbGwgd2FzIHNtYWxsZXIgaW4gdGhlIGFudGktQ0Q0IGV4cGVyaW1lbnRzLCBzdWdnZXN0aW5nIHRoYXQgdGhlIGFudGlib2R5IGludGVyZmVyZWQgd2l0aCBwTUhDOlRDUiBiaW5kaW5nLjxmaWcgaWQ9ImZpZzUiIHBvc2l0aW9uPSJmbG9hdCI+PG9iamVjdC1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC43NTU0L2VMaWZlLjAwNzc4LjAxMjwvb2JqZWN0LWlkPjxsYWJlbD5GaWd1cmUgNS48L2xhYmVsPjxjYXB0aW9uPjx0aXRsZT5UaGUgZGlzdHJpYnV0aW9uIG9mIGxpdmUgY2VsbCBzaW5nbGUgbW9sZWN1bGUgYWdvbmlzdCBwTUhDOlRDUiBtb2xlY3VsYXIgYmluZGluZyBkd2VsbCB0aW1lcyBpcyBvYnNlcnZlZCBkaXJlY3RseS48L3RpdGxlPjxwPk1lYXN1cmVkIGR3ZWxsIHRpbWUgZGlzdHJpYnV0aW9ucyBmb3IgYm90aCB0aGUgNWMuYzcgKDxib2xkPkE8L2JvbGQ+KSBhbmQgQU5EICg8Ym9sZD5CPC9ib2xkPikgVENScyBhcmUgcm91Z2hseSBleHBvbmVudGlhbCBhbmQgbWF0Y2ggcmVwb3J0ZWQgc29sdXRpb24gbWVhc3VyZW1lbnRzLiBCbGVhY2hpbmcgdGltZXMsIDxpbmxpbmUtZm9ybXVsYT48bW1sOm1hdGggaWQ9ImluZjE0Ij48bW1sOm1yb3c+PG1tbDptc3Vic3VwPjxtbWw6bWk+azwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+Ymw8L21tbDptaT48bW1sOm1yb3c+PG1tbDptbz7iiJI8L21tbDptbz48bW1sOm1uPjE8L21tbDptbj48L21tbDptcm93PjwvbW1sOm1zdWJzdXA+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+LCAoZ3JleSBjaXJjbGVzKSBhcmUgbWVhc3VyZWQgdXNpbmcgYWdvbmlzdCBwTUhDIFNMQiBzdGFuZGFyZHMgd2l0aG91dCBjZWxscyBhbmQgd2l0aCB0aGUgc2FtZSBmbHVvcmVzY2VudCBsYWJlbCAoQXR0bzQ4OCkgYW5kIGFyZSBzaWduaWZpY2FudGx5IGxvbmdlciB0aGFuIG9ic2VydmVkIGR3ZWxsIHRpbWVzLCA8aXRhbGljPs+EPC9pdGFsaWM+PHN1Yj48aXRhbGljPm9iczwvaXRhbGljPjwvc3ViPiwgZm9yIGJvdGggVENScy4gKDxib2xkPkM8L2JvbGQ+KSBNZWFzdXJlZCB2YWx1ZXMgZm9yIDVjLmM3IGFuZCBBTkQgQ0Q0KyBUIGNlbGxzIHVuZGVyIHZhcnlpbmcgY29uZGl0aW9ucy4gVmFsdWVzIGluIGNvbHVtbnMgZml2ZSBhbmQgc2l4IHJlcHJlc2VudCDiiLwzMDDigJM2MDAgTUNDIGFnb25pc3QgcE1IQyBtb2xlY3VsZXMgcGVyIGV4cGVyaW1lbnRhbCBjb25kaXRpb24gZnJvbSBhIHBvcHVsYXRpb24gb2YgN+KAkzIwIGNlbGxzLiBEYXRhIGFyZSByZXByZXNlbnRhdGl2ZSBvZiBhdCBsZWFzdCA1IGluZGVwZW5kZW50IGV4cGVyaW1lbnRzIHBlcmZvcm1lZCBvbiBUIGNlbGwgYmxhc3RzIGlzb2xhdGVkIGZyb20gZGlmZmVyZW50IG1pY2UgZm9yIGJvdGggdGhlIDVjLmM3IGFuZCBBTkQgVENScy4gVW5jZXJ0YWludHkgaW4gdGhlIGF2ZXJhZ2UgYWNyb3NzIGRpZmZlcmVudCBtaWNlLCBzaG93biBpbiBjb2x1bW5zIGZpdmUgYW5kIHNpeCwgaXMgY2FsY3VsYXRlZCBhcyB0aGUgc3RhbmRhcmQgZXJyb3Igb2YgdGhlIG1lYW4gb2YgdGhlIG1vbGVjdWxhciBhdmVyYWdlcyBmcm9tIGRpZmZlcmVudCBtaWNlLiBJbiBzb21lIGNhc2VzIChlLmcuIGZvciBjeXRvc2tlbGV0b24gZGlzcnVwdGlvbiBleHBlcmltZW50cyB3aXRoIExhdHJ1bmN1bGluIEEpIG9uZSBleHBlcmltZW50IChyZXByZXNlbnRhdGl2ZSBvZiA34oCTMTAgY2VsbHMgYW5kIDEwMCBzIG9mIHNpbmdsZSBtb2xlY3VsZSBtZWFzdXJlbWVudHMpIG1heSBiZSBwZXJmb3JtZWQsIGJ1dCB0aGVzZSBkYXRhIGFyZSBhbHdheXMgY29tcGFyZWQgdG8gYSBjb250cm9sIHNhbXBsZSByZWNvcmRlZCBvbiB0aGUgc2FtZSBkYXkgd2l0aCBUIGNlbGwgYmxhc3RzIGZyb20gdGhlIHNhbWUgbW91c2UuIEluIHRoZXNlIGNhc2VzIHVuY2VydGFpbnR5IGlzIHJlcG9ydGVkIGFzIHRoZSBzdGFuZGFyZCBlcnJvciBvZiB0aGUgbWVhbiBvZiB0aGUgbW9sZWN1bGFyIGR3ZWxsIHRpbWUgZGlzdHJpYnV0aW9uLiBTUFIgbWVhc3VyZW1lbnRzIGZvciA1Yy5jNyA8c3VwPjE8L3N1cD4oPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMTgiPkh1cHBhIGV0IGFsLiwgMjAxMDwveHJlZj4pIGFuZCBBTkQtcmVsYXRlZCAyMjYgVENScyA8c3VwPjI8L3N1cD4oPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMjkiPk5ld2VsbCBldCBhbC4sIDIwMTE8L3hyZWY+KSwgYWxvbmcgd2l0aCBzaW5nbGUgbW9sZWN1bGUgRlJFVCBtZWFzdXJlbWVudHMgZm9yIDVjLmM3IDxzdXA+MTwvc3VwPig8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIxOCI+SHVwcGEgZXQgYWwuLCAyMDEwPC94cmVmPiksIGFyZSBzaG93biBmb3IgY29tcGFyaXNvbi48L3A+PHA+PGJvbGQ+RE9JOjwvYm9sZD48ZXh0LWxpbmsgZXh0LWxpbmstdHlwZT0iZG9pIiB4bGluazpocmVmPSIxMC43NTU0L2VMaWZlLjAwNzc4LjAxMiI+aHR0cDovL2R4LmRvaS5vcmcvMTAuNzU1NC9lTGlmZS4wMDc3OC4wMTI8L2V4dC1saW5rPjwvcD48L2NhcHRpb24+PGdyYXBoaWMgeGxpbms6aHJlZj0iZWxpZmUwMDc3OGYwMDUiLz48L2ZpZz48L3A+CiAgICAgICAgPHA+VHJhY2tpbmcgb2JzZXJ2YXRpb25zIHJldmVhbCB0aGUgdGltZSBpbnRlcnZhbHMgb3ZlciB3aGljaCBpbmRpdmlkdWFsIGFnb25pc3QgcE1IQyBtb2xlY3VsZXMgcmVtYWluIHBoeXNpY2FsbHkgdHJhcHBlZCB3aXRoaW4gdGhlIGltbWVkaWF0ZSB2aWNpbml0eSBvZiB0aGUgc2FtZSBUQ1IuIFRodXMsIGFsdGhvdWdoIG91ciBtZWFzdXJlZCBkd2VsbCB0aW1lcyBpbiBsaXZlIGNlbGxzIGFyZSBpbiBnZW5lcmFsIGFncmVlbWVudCB3aXRoIGJ1bGsgc29sdXRpb24gbWVhc3VyZW1lbnRzIG9mIHBNSEM6VENSIGtpbmV0aWMgb2ZmLXJhdGVzIGZvciBib3RoIFRDUnMgKDx4cmVmIHJlZi10eXBlPSJmaWciIHJpZD0iZmlnNSI+RmlndXJlIDVDPC94cmVmPikgKDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjciPkNvcnNlIGV0IGFsLiwgMjAxMDwveHJlZj47IDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjI5Ij5OZXdlbGwgZXQgYWwuLCAyMDExPC94cmVmPiksIHRoaXMgbWF5IG5vdCByZXN1bHQgZnJvbSB0aGUgc2FtZSByZWFzb25zIGluIGVhY2ggY2FzZS4gVW5iaW5kaW5nIG9mIHBNSEMgZnJvbSBUQ1IgZm9sbG93ZWQgYnkgcmFwaWQgcmViaW5kaW5nIHRvIHRoZSBzYW1lIFRDUiBvciBhbm90aGVyIFRDUiB3aXRoaW4gdGhlIHNhbWUgc2lnbmFsaW5nIGNsdXN0ZXIgY291bGQgY29uY2VpdmFibHkgbGVhZCB0byBlbnRyYXBtZW50IG9mIHBNSEMgZm9yIHRpbWVzY2FsZXMgbG9uZ2VyIHRoYW4gdGhlIGxpZmV0aW1lIG9mIHRoZSBtb2xlY3VsYXIgaW50ZXJhY3Rpb24uIFRoaXMgaGFzIGJlZW4gaHlwb3RoZXNpemVkIGFzIGEgcG90ZW50aWFsIG1vZGUgYnkgd2hpY2ggYSBzbWFsbCBudW1iZXIgb2YgYWdvbmlzdCBwTUhDIGNvdWxkIHRyaWdnZXIgYSBsYXJnZXIgbnVtYmVyIG9mIFRDUiAoPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMTMiPkdvdmVybiBldCBhbC4sIDIwMTA8L3hyZWY+OyA8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIxOCI+SHVwcGEgZXQgYWwuLCAyMDEwPC94cmVmPikuIEZ1cnRoZXJtb3JlLCByZWNlbnRseSByZXBvcnRlZCBzaW5nbGUgbW9sZWN1bGUgbWVhc3VyZW1lbnRzIG9mIHBNSEM6VENSIGJpbmRpbmcga2luZXRpY3MgaW4gbGl2ZSBjZWxscywgYnkgZm9yY2UgcHJvYmUgYW5kIGJ5IEZSRVQsIGhhdmUgc3VnZ2VzdGVkIGFjY2VsZXJhdGVkIGtpbmV0aWMtb2ZmIHJhdGVzICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIxNyI+SHVhbmcgZXQgYWwuLCAyMDEwPC94cmVmPjsgPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMTgiPkh1cHBhIGV0IGFsLiwgMjAxMDwveHJlZj4pLiBXZSBpbnZlc3RpZ2F0ZSB0aGlzIGZ1cnRoZXIgYmVsb3cuPC9wPgogICAgICA8L3NlYz4KICAgICAgPHNlYyBpZD0iczItNCI+CiAgICAgICAgPHRpdGxlPlN0b2NoYXN0aWMgcmVhY3Rpb24tZGlmZnVzaW9uIHNpbXVsYXRpb25zPC90aXRsZT4KICAgICAgICA8cD5XZSBxdWFudGl0YXRpdmVseSBhc3Nlc3MgdGhlIHBvc3NpYmlsaXR5IG9mIHNlcmlhbCByZWJpbmRpbmcgb2YgYWdvbmlzdCBwTUhDIHRvIG11bHRpcGxlIFRDUiB3aXRoaW4gYSBUQ1IgY2x1c3RlciB1c2luZyBhIHN0b2NoYXN0aWMgcmVhY3Rpb24tZGlmZnVzaW9uIHNpbXVsYXRpb24gb3ZlciBhIGxhcmdlIHJhbmdlIG9mIDxpbmxpbmUtZm9ybXVsYT48bW1sOm1hdGggaWQ9ImluZjE1Ij48bW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bW8+4oypPC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5vZmY8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PG1tbDptbz7ijKo8L21tbDptbz48L21tbDptcm93PjwvbW1sOm1yb3c+PC9tbWw6bWF0aD48L2lubGluZS1mb3JtdWxhPiBhbmQgVENSIGNsdXN0ZXIgc2l6ZS4gVGhlIHRvdGFsIHRpbWUgdG8gZXNjYXBlIGZvciBhbiBpbmRpdmlkdWFsIG1vbGVjdWxlLCB3aGljaCBpcyB0aGUgcGFyYW1ldGVyIGRpcmVjdGx5IG1lYXN1cmVkIGluIHBNSEMgdHJhY2tpbmcgZXhwZXJpbWVudHMsIGlzIGdpdmVuIGJ5OjxkaXNwLWZvcm11bGEgaWQ9ImVxdTIiPjxtbWw6bWF0aCBpZD0ibTIiPjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+ZXNjPC9tbWw6bWk+PC9tbWw6bXN1Yj48bW1sOm1vPj08L21tbDptbz48bW1sOm1zdHlsZSBkaXNwbGF5c3R5bGU9InRydWUiPjxtbWw6bXVuZGVyb3Zlcj48bW1sOm1vPuKIkTwvbW1sOm1vPjxtbWw6bXJvdz48bW1sOm1pPmk8L21tbDptaT48bW1sOm1vPj08L21tbDptbz48bW1sOm1uPjA8L21tbDptbj48L21tbDptcm93PjxtbWw6bWk+bjwvbW1sOm1pPjwvbW1sOm11bmRlcm92ZXI+PG1tbDptcm93PjxtbWw6bXN1YnN1cD48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5vZmY8L21tbDptaT48bW1sOm1pPmk8L21tbDptaT48L21tbDptc3Vic3VwPjwvbW1sOm1yb3c+PC9tbWw6bXN0eWxlPjxtbWw6bW8+KzwvbW1sOm1vPjxtbWw6bXN0eWxlIGRpc3BsYXlzdHlsZT0idHJ1ZSI+PG1tbDptdW5kZXJvdmVyPjxtbWw6bW8+4oiRPC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bWk+aTwvbW1sOm1pPjxtbWw6bW8+PTwvbW1sOm1vPjxtbWw6bW4+MTwvbW1sOm1uPjwvbW1sOm1yb3c+PG1tbDptaT5uPC9tbWw6bWk+PC9tbWw6bXVuZGVyb3Zlcj48bW1sOm1yb3c+PG1tbDptc3Vic3VwPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9uPC9tbWw6bWk+PG1tbDptaT5pPC9tbWw6bWk+PC9tbWw6bXN1YnN1cD48L21tbDptcm93PjwvbW1sOm1zdHlsZT48bW1sOm1vPis8L21tbDptbz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+ZXhpdDwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvZGlzcC1mb3JtdWxhPjwvcD4KICAgICAgICA8cD5JbiB0aGlzIHJlcHJlc2VudGF0aW9uLCA8aW5saW5lLWZvcm11bGE+PG1tbDptYXRoIGlkPSJpbmYxNiI+PG1tbDptcm93PjxtbWw6bXN1YnN1cD48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5vZmY8L21tbDptaT48bW1sOm1pPmk8L21tbDptaT48L21tbDptc3Vic3VwPjwvbW1sOm1yb3c+PC9tbWw6bWF0aD48L2lubGluZS1mb3JtdWxhPiBhbmQgPGlubGluZS1mb3JtdWxhPjxtbWw6bWF0aCBpZD0iaW5mMTciPjxtbWw6bXJvdz48bW1sOm1zdWJzdXA+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+b248L21tbDptaT48bW1sOm1pPmk8L21tbDptaT48L21tbDptc3Vic3VwPjwvbW1sOm1yb3c+PC9tbWw6bWF0aD48L2lubGluZS1mb3JtdWxhPiBhcmUgdGhlIGluZGl2aWR1YWwgZHdlbGwgdGltZXMgaW4gdGhlIGJvdW5kIGFuZCB1bmJvdW5kIGNvbmZpZ3VyYXRpb25zLCA8aXRhbGljPm48L2l0YWxpYz4gaXMgdGhlIG51bWJlciBvZiByZWJpbmRpbmcgZXZlbnRzLCBhbmQgPGlubGluZS1mb3JtdWxhPjxtbWw6bWF0aCBpZD0iaW5mMTgiPjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+ZXhpdDwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+IGlzIHRoZSBkdXJhdGlvbiBvZiB0aGUgZmluYWwgdW5ib3VuZCBwZXJpb2QgcHJpb3IgdG8gdWx0aW1hdGUgZXNjYXBlLiBGb3IgdGhlIHN0b2NoYXN0aWMgc2ltdWxhdGlvbiwgPGlubGluZS1mb3JtdWxhPjxtbWw6bWF0aCBpZD0iaW5mMTkiPjxtbWw6bXJvdz48bW1sOm1zdWJzdXA+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+b2ZmPC9tbWw6bWk+PG1tbDptaT5pPC9tbWw6bWk+PC9tbWw6bXN1YnN1cD48L21tbDptcm93PjwvbW1sOm1hdGg+PC9pbmxpbmUtZm9ybXVsYT4gYW5kIDxpbmxpbmUtZm9ybXVsYT48bW1sOm1hdGggaWQ9ImluZjIwIj48bW1sOm1yb3c+PG1tbDptc3Vic3VwPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9uPC9tbWw6bWk+PG1tbDptaT5pPC9tbWw6bWk+PC9tbWw6bXN1YnN1cD48L21tbDptcm93PjwvbW1sOm1hdGg+PC9pbmxpbmUtZm9ybXVsYT4gYXJlIHRyZWF0ZWQgYXMgcmFuZG9tIHZhcmlhYmxlcyB3aXRoIGV4cG9uZW50aWFsIGRpc3RyaWJ1dGlvbnMgZGVmaW5lZCBieSB0aGUgaW4gc2l0dSBtZWFzdXJlZCB2YWx1ZXMgb2YgPGl0YWxpYz5rPC9pdGFsaWM+PHN1Yj48aXRhbGljPm9mZjwvaXRhbGljPjwvc3ViPiBhbmQgPGl0YWxpYz5rPC9pdGFsaWM+PHN1Yj48aXRhbGljPm9uPC9pdGFsaWM+PC9zdWI+IGZvciBwTUhDOlRDUiBiaW5kaW5nLCByZXNwZWN0aXZlbHkuIElmIHRoZSBwTUhDIGRpZmZ1c2VzIG91dCBvZiB0aGUgVENSIGNsdXN0ZXIgcHJpb3IgdG8gcmViaW5kaW5nLCBpdCBoYXMgZXNjYXBlZC4gT3RoZXJ3aXNlLCB0aGUgcE1IQyByZWJpbmRzIGFuZCB0aGUgY3ljbGUgcmVwZWF0cy4gVXNpbmcgdGhlIGZhc3Rlc3QgPGl0YWxpYz5rPC9pdGFsaWM+PHN1Yj48aXRhbGljPm9uPC9pdGFsaWM+PC9zdWI+ICgwLjE3IMK1bTxzdXA+Mjwvc3VwPnM8c3VwPuKIkjE8L3N1cD5tb2xlY3VsZTxzdXA+4oiSMTwvc3VwPikgb2JzZXJ2ZWQgaW4gc2ltaWxhciBoeWJyaWQgbGl2ZSBjZWxsLVNMQiBzeXN0ZW1zICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIxOCI+SHVwcGEgZXQgYWwuLCAyMDEwPC94cmVmPikgYW5kIHRoZSBtZWFzdXJlZCBkaWZmdXNpb24gY29lZmZpY2llbnQgb2YgcE1IQyBpbiBvdXIgc3VwcG9ydGVkIG1lbWJyYW5lcywgd2UgZmluZCB0aGF0IDxpbmxpbmUtZm9ybXVsYT48bW1sOm1hdGggaWQ9ImluZjIxIj48bW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPmVzYzwvbW1sOm1pPjwvbW1sOm1zdWI+PG1tbDptbz7iiYg8L21tbDptbz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+b2ZmPC9tbWw6bWk+PC9tbWw6bXN1Yj48L21tbDptcm93PjwvbW1sOm1hdGg+PC9pbmxpbmUtZm9ybXVsYT4gZm9yIFRDUiBjbHVzdGVycyBvZiB0aGUgc2l6ZXMgb2JzZXJ2ZWQgZXhwZXJpbWVudGFsbHkgKDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjQyIj5WYXJtYSBldCBhbC4sIDIwMDY8L3hyZWY+KSAo4omkMTAwIFRDUiBtb2xlY3VsZXMpICg8eHJlZiByZWYtdHlwZT0iZmlnIiByaWQ9ImZpZzYiPkZpZ3VyZSA2PC94cmVmPikuIE9ubHkgZm9yIHVucmVhbGlzdGljYWxseSBsYXJnZSBUQ1IgY2x1c3RlcnMgKOKIvDEwMDAgVENSIG1vbGVjdWxlcykgY291bGQgcmViaW5kaW5nIHdpdGhpbiB0aGUgc2FtZSBjbHVzdGVyIGxlYWQgdG8gYXBwcmVjaWFibGUgZW50cmFwbWVudCA8aW5saW5lLWZvcm11bGE+PG1tbDptYXRoIGlkPSJpbmYyMiI+PG1tbDptcm93PjxtbWw6bXJvdz48bW1sOm1vPig8L21tbDptbz48bW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPmVzYzwvbW1sOm1pPjwvbW1sOm1zdWI+PG1tbDptbz4mZ3Q7PC9tbWw6bW8+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPmV4aXQ8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PG1tbDptbz4pPC9tbWw6bW8+PC9tbWw6bXJvdz48L21tbDptcm93PjwvbW1sOm1hdGg+PC9pbmxpbmUtZm9ybXVsYT4gKDx4cmVmIHJlZi10eXBlPSJmaWciIHJpZD0iZmlnNnMxIj5GaWd1cmUgNuKAlGZpZ3VyZSBzdXBwbGVtZW50IDE8L3hyZWY+KS48ZmlnLWdyb3VwPjxmaWcgaWQ9ImZpZzYiIHBvc2l0aW9uPSJmbG9hdCI+PG9iamVjdC1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC43NTU0L2VMaWZlLjAwNzc4LjAxMzwvb2JqZWN0LWlkPjxsYWJlbD5GaWd1cmUgNi48L2xhYmVsPjxjYXB0aW9uPjx0aXRsZT5TdG9jaGFzdGljIHJlYWN0aW9uLWRpZmZ1c2lvbiBzaW11bGF0aW9uIG9mIHRpbWUgYmVmb3JlIE1DQyBhZ29uaXN0IHBNSEMgZXNjYXBlIGZyb20gVENSIGNsdXN0ZXJzLCA8aXRhbGljPs+EPC9pdGFsaWM+PHN1Yj48aXRhbGljPmVzYzwvaXRhbGljPjwvc3ViPiAoaW4gY29sb3I7IGxvZyBzY2FsZSksIGFzIGEgZnVuY3Rpb24gb2YgPGl0YWxpYz7PhDwvaXRhbGljPjxzdWI+PGl0YWxpYz5vZmY8L2l0YWxpYz48L3N1Yj4gYW5kIFRDUiBjbHVzdGVyIHNpemUuPC90aXRsZT48cD5Gb3Igc21hbGwgVENSIGNsdXN0ZXJzICgx4oCTMTAwIFRDUiBtb2xlY3VsZXMpIDxpdGFsaWM+z4Q8L2l0YWxpYz48c3ViPjxpdGFsaWM+b2ZmPC9pdGFsaWM+PC9zdWI+IOKJiCA8aXRhbGljPs+EPC9pdGFsaWM+PHN1Yj48aXRhbGljPmVzYzwvaXRhbGljPjwvc3ViPiwgaW5kaWNhdGluZyBubyBzZXJpYWwgcmViaW5kaW5nLiBPbmx5IGZvciB1bnJlYWxpc3RpY2FsbHkgbGFyZ2UgVENSIGNsdXN0ZXJzICgxMDAw4oCTMTAsMDAwIG1vbGVjdWxlcykgZG9lcyA8aW5saW5lLWZvcm11bGE+PG1tbDptYXRoIGlkPSJpbmYyMyI+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5lc2M8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PC9tbWw6bWF0aD48L2lubGluZS1mb3JtdWxhPiBiZWNvbWUgYXBwcmVjaWFibHkgbG9uZ2VyIHRoYW4gPGlubGluZS1mb3JtdWxhPjxtbWw6bWF0aCBpZD0iaW5mMjQiPjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+b2ZmPC9tbWw6bWk+PC9tbWw6bXN1Yj48L21tbDptcm93PjwvbW1sOm1hdGg+PC9pbmxpbmUtZm9ybXVsYT4uPC9wPjxwPjxib2xkPkRPSTo8L2JvbGQ+PGV4dC1saW5rIGV4dC1saW5rLXR5cGU9ImRvaSIgeGxpbms6aHJlZj0iMTAuNzU1NC9lTGlmZS4wMDc3OC4wMTMiPmh0dHA6Ly9keC5kb2kub3JnLzEwLjc1NTQvZUxpZmUuMDA3NzguMDEzPC9leHQtbGluaz48L3A+PC9jYXB0aW9uPjxncmFwaGljIHhsaW5rOmhyZWY9ImVsaWZlMDA3NzhmMDA2Ii8+PC9maWc+PGZpZyBpZD0iZmlnNnMxIiBwb3NpdGlvbj0iZmxvYXQiIHNwZWNpZmljLXVzZT0iY2hpbGQtZmlnIj48b2JqZWN0LWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjc1NTQvZUxpZmUuMDA3NzguMDE0PC9vYmplY3QtaWQ+PGxhYmVsPkZpZ3VyZSA24oCUZmlndXJlIHN1cHBsZW1lbnQgMS48L2xhYmVsPjxjYXB0aW9uPjx0aXRsZT5TdG9jaGFzdGljIHJlYWN0aW9uLWRpZmZ1c2lvbiBzaW11bGF0aW9uIG9mIHRpbWUgYmVmb3JlIE1DQyBhZ29uaXN0IHBNSEMgZXNjYXBlIGZyb20gVENSIGNsdXN0ZXJzLjwvdGl0bGU+PHA+U2ltdWxhdGlvbnMgb2YgPGlubGluZS1mb3JtdWxhPjxtbWw6bWF0aCBpZD0iaW5mNTYiPjxtbWw6bXJvdz48bW1sOm1mcmFjPjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+ZXNjPC9tbWw6bWk+PC9tbWw6bXN1Yj48L21tbDptcm93PjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+b2ZmPC9tbWw6bWk+PC9tbWw6bXN1Yj48L21tbDptcm93PjwvbW1sOm1mcmFjPjwvbW1sOm1yb3c+PC9tbWw6bWF0aD48L2lubGluZS1mb3JtdWxhPiBhcyBhIGZ1bmN0aW9uIG9mIFRDUiBjbHVzdGVyIHNpemUsIDxpbmxpbmUtZm9ybXVsYT48bW1sOm1hdGggaWQ9ImluZjU3Ij48bW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9mZjwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+ICwgYW5kIDxpdGFsaWM+azwvaXRhbGljPjxzdWI+PGl0YWxpYz5vbjwvaXRhbGljPjwvc3ViPi4gVGhlIHJhdGlvIDxpbmxpbmUtZm9ybXVsYT48bW1sOm1hdGggaWQ9ImluZjU4Ij48bW1sOm1yb3c+PG1tbDptZnJhYz48bW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPmVzYzwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9mZjwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48L21tbDptZnJhYz48L21tbDptcm93PjwvbW1sOm1hdGg+PC9pbmxpbmUtZm9ybXVsYT4sIHdoaWNoIGlzIGFuIGluZGljYXRvciBvZiBhZ29uaXN0IHBNSEMgZW50cmFwbWVudCwgaXMgYSBmdW5jdGlvbiBvZiBUQ1IgY2x1c3RlciBzaXplIGFuZCA8aXRhbGljPms8L2l0YWxpYz48c3ViPjxpdGFsaWM+b248L2l0YWxpYz48L3N1Yj4sIGJ1dCBub3QgPGl0YWxpYz5rPC9pdGFsaWM+PHN1Yj48aXRhbGljPm9mZjwvaXRhbGljPjwvc3ViPi4gPGl0YWxpYz5rPC9pdGFsaWM+PHN1Yj48aXRhbGljPm9uPC9pdGFsaWM+PC9zdWI+ID0gMC41MSDCtW08c3VwPjI8L3N1cD5zPHN1cD7iiJIxPC9zdXA+bW9sZWN1bGU8c3VwPuKIkjE8L3N1cD4gY29ycmVzcG9uZHMgdG8gdGhlIGZhc3Rlc3QgYXZlcmFnZSA8aXRhbGljPms8L2l0YWxpYz48c3ViPjxpdGFsaWM+b248L2l0YWxpYz48L3N1Yj4gdGhhdCBhbGxvd3MgZm9yIHJlYmluZGluZyB0byB0aGUgc2FtZSBUQ1IuIE9ubHkgZm9yIHVucmVhbGlzdGljYWxseSBsYXJnZSBUQ1IgY2x1c3RlciBzaXplcyAoYXBwcm9hY2hpbmcgMTAwMCBUQ1JzIHBlciBjbHVzdGVyKSBhbmQgZmFzdCA8aXRhbGljPms8L2l0YWxpYz48c3ViPjxpdGFsaWM+b248L2l0YWxpYz48L3N1Yj4gaXMgPGlubGluZS1mb3JtdWxhPjxtbWw6bWF0aCBpZD0iaW5mNTkiPjxtbWw6bXJvdz48bW1sOm1mcmFjPjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bXJvdz48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPmVzYzwvbW1sOm1pPjwvbW1sOm1yb3c+PC9tbWw6bXN1Yj48L21tbDptcm93PjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+b2ZmPC9tbWw6bWk+PC9tbWw6bXN1Yj48L21tbDptcm93PjwvbW1sOm1mcmFjPjxtbWw6bW8+4omrPC9tbWw6bW8+PG1tbDptbj4xPC9tbWw6bW4+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+LCBtZWFuaW5nIHRoYXQgZW50cmFwbWVudCBkdWUgdG8gbWlsbGlzZWNvbmQtc2NhbGUgdW5iaW5kaW5nIGFuZCByZWJpbmRpbmcgaXMgdW5saWtlbHkgdG8gcmVzdWx0IGluIHRoZSBtaW51dGUtc2NhbGUgZHdlbGwgdGltZXMgb2JzZXJ2ZWQgaW4gb3VyIGV4cGVyaW1lbnRzLjwvcD48cD48Ym9sZD5ET0k6PC9ib2xkPjxleHQtbGluayBleHQtbGluay10eXBlPSJkb2kiIHhsaW5rOmhyZWY9IjEwLjc1NTQvZUxpZmUuMDA3NzguMDE0Ij5odHRwOi8vZHguZG9pLm9yZy8xMC43NTU0L2VMaWZlLjAwNzc4LjAxNDwvZXh0LWxpbms+PC9wPjwvY2FwdGlvbj48Z3JhcGhpYyB4bGluazpocmVmPSJlbGlmZTAwNzc4ZnMwMDMiLz48L2ZpZz48L2ZpZy1ncm91cD48L3A+CiAgICAgICAgPHA+VGhlc2Ugc2ltdWxhdGlvbnMgaW5kaWNhdGUgdGhhdCB0aGUgb2JzZXJ2ZWQgdmFsdWVzIG9mIDxpbmxpbmUtZm9ybXVsYT48bW1sOm1hdGggaWQ9ImluZjI1Ij48bW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9mZjwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+IGFyZSB1bmxpa2VseSB0byBiZSB0aGUgcmVzdWx0IG9mIHJhcGlkIHNlcmlhbCByZWJpbmRpbmcgb2Ygb25lIHBNSEMgd2l0aCBtYW55IFRDUiB3aXRoaW4gYSBUQ1IgY2x1c3Rlci4gV2Ugbm90ZSB0aGF0IGFsdGhvdWdoIFRDUiBjbHVzdGVycyBhcmUgbm90IHJlYWRpbHkgdmlzaWJsZSBhdCB0aGUgbG93IGFudGlnZW4gZGVuc2l0aWVzIGluIHRoZXNlIGV4cGVyaW1lbnRzLCBsb3cgbGV2ZWwgVENSIGNsdXN0ZXJpbmcgaGFzIGJlZW4gcmVwb3J0ZWQgaW4gdGhlIHJlc3Rpbmcgc3RhdGUgYnkgb3RoZXIgbWV0aG9kcyAoPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMzUiPlNjaGFtZWwgYW5kIEFsYXJjb24sIDIwMTM8L3hyZWY+KS4gRXZlbiB3aXRoIGEgdmVyeSBmYXN0IDxpdGFsaWM+azwvaXRhbGljPjxzdWI+PGl0YWxpYz5vbjwvaXRhbGljPjwvc3ViPiwgaWYgcE1IQyBjb21wbGV0ZWx5IGRpc2VuZ2FnZXMgZnJvbSBUQ1IgZm9yIGxvbmcgZW5vdWdoIHRvIGRpZmZ1c2UgdG8gYW4gYWRqYWNlbnQgVENSLCB0aGVuIHRoZSBwcm9iYWJpbGl0eSBvZiBjb21wbGV0ZSBlc2NhcGUgZnJvbSB0aGUgVENSIGNsdXN0ZXIgaXMgaGlnaC4gT25seSBpbiB0aGUgZXh0cmVtZSBsaW1pdCwgd2hlcmUgPGl0YWxpYz5rPC9pdGFsaWM+PHN1Yj48aXRhbGljPm9uPC9pdGFsaWM+PC9zdWI+IGlzIHNvIGZhc3QgdGhhdCBwTUhDIHVuYmluZGluZyBpcyBwcmVkb21pbmFudGx5IGZvbGxvd2VkIGJ5IHJlYmluZGluZyB0byB0aGUgc2FtZSBUQ1IsIGlzIHRoZSBlc2NhcGUgdGltZSBhcHByZWNpYWJseSBsb25nZXIgdGhhbiB0aGUgaW5kaXZpZHVhbCBtb2xlY3VsYXIgZHdlbGwgdGltZXMuIFRoZSBkaXN0aW5jdGlvbiBiZXR3ZWVuIHJhcGlkbHkgcmViaW5kaW5nIHRoZSBzYW1lIFRDUiBhbmQgYSBzaW5nbGUgZW5nYWdlbWVudCBpcyBsYXJnZWx5IHNlbWFudGljLiBIb3dldmVyLCBpdCBtYXkgcmV2ZWFsIHNvbWV0aGluZyBhYm91dCB0aGUgbWVjaGFuaWNhbCBzdGFiaWxpdHkgb2YgcE1IQzpUQ1IgaW50ZXJhY3Rpb25zLCBhbmQgY291bGQgYWNjb3VudCBmb3IgdGhlIGFwcGFyZW50bHkgYWNjZWxlcmF0ZWQgPGl0YWxpYz5rPC9pdGFsaWM+PHN1Yj48aXRhbGljPm9mZjwvaXRhbGljPjwvc3ViPiBvYnNlcnZlZCBpbiBvdGhlciB0eXBlcyBvZiBleHBlcmltZW50czxib2xkPi48L2JvbGQ+PC9wPgogICAgICA8L3NlYz4KICAgIDwvc2VjPgogICAgPHNlYyBpZD0iczMiIHNlYy10eXBlPSJkaXNjdXNzaW9uIj4KICAgICAgPHRpdGxlPkRpc2N1c3Npb248L3RpdGxlPgogICAgICA8cD5BbGwgZXZpZGVuY2UgcmVwb3J0ZWQgaGVyZSBzdWdnZXN0cyB0aGF0IGluZGl2aWR1YWwgYWdvbmlzdCBwTUhDIHJlbWFpbiBib3VuZCB0byB0aGUgc2FtZSBUQ1IgZm9yIGF0IGxlYXN0IHNldmVyYWwgc2Vjb25kcyBmb3IgdGhlIDVjLmM3IFRDUiBhbmQgZm9yIGFwcHJveGltYXRlbHkgb25lIG1pbnV0ZSBmb3IgdGhlIEFORCBUQ1IgaW4gbGl2ZSBjZWxscy4gU3Vic2VxdWVudCByZWNydWl0bWVudCBvZiBaQVA3MCBpbmRpY2F0ZXMgVENSIGFyZSB0cmlnZ2VyZWQgYW5kIG1vdmVtZW50IG9mIHRoZSBjb21wbGV4ZXMgYWxvbmcgbGluZWFyIHRyYWplY3RvcmllcyBjb25maXJtcyBzdGFibGUgYXNzb2NpYXRpb24gd2l0aCB0aGUgYWN0aW4gY3l0b3NrZWxldG9uLiBBbGwgb2YgdGhpcyBvY2N1cnMgYXMgYSByZXN1bHQgb2YgYSBsb25lIGFnb25pc3QgcE1IQyBiaW5kaW5nIFRDUiwgd2l0aG91dCBpbnZvbHZlbWVudCBvZiBvdGhlciBNSEMuIFRoZSBtZWFzdXJlZCBhdmVyYWdlIHBNSEM6VENSOlpBUDcwIHN0b2ljaGlvbWV0cnkgaW5kaWNhdGVzIFRDUiB0cmlnZ2VyaW5nIGlzIG1vc3QgbGlrZWx5IDE6MSB3aXRoIGFnb25pc3QgcE1IQy4gU3VwZXJudW1lcmFyeSB0cmlnZ2VyaW5nIG9mIG11bHRpcGxlIFRDUiBieSBhIHNpbmdsZSBwTUhDIGlzIG5vdCBvYnNlcnZlZCBvbiB0aGUgdGltZXNjYWxlcyBvZiBtaW51dGVzIGludmVzdGlnYXRlZCBpbiB0aGVzZSBleHBlcmltZW50cy4gVGhlIG9yaWdpbmFsIHNlcmlhbCB0cmlnZ2VyaW5nIG1vZGVsICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWI0MCI+VmFsaXR1dHRpIGV0IGFsLiwgMTk5NTwveHJlZj4pIGRyZXcgaXRzIGNvbmNsdXNpb25zIGZyb20gdGhlIGV4dGVudCBvZiBUQ1IgZG93biByZWd1bGF0aW9uIG1lYXN1cmVkIDUgaHIgYWZ0ZXIgZXhwb3N1cmUgb2YgVCBjZWxscyB0byBhbnRpZ2VuLXB1bHNlZCBBUENzLiBBZGRpdGlvbmFsbHksIHRoZSBsYWNrIG9mIG1vbGVjdWxhci1zY2FsZSBjb29wZXJhdGl2aXR5IGluIFRDUiB0cmlnZ2VyaW5nIGJ5IGFnb25pc3QgcE1IQyBpbmRpY2F0ZXMgdGhhdCBvYnNlcnZlZCBjb29wZXJhdGl2aXR5IGF0IHRoZSBsZXZlbCBvZiBjZWxsdWxhciBjYWxjaXVtIHJlc3BvbnNlLCBhdCBzaW1pbGFyIGxpZ2FuZCBkZW5zaXRpZXMgYW5kIHRpbWVzY2FsZXMgKDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjI2Ij5NYW56IGV0IGFsLiwgMjAxMTwveHJlZj4pLCBpcyBtb3N0IGxpa2VseSBkdWUgdG8gaW50cmFjZWxsdWxhciBmZWVkYmFjayBtZWNoYW5pc21zICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIxYSI+QWx0YW4tQm9ubmV0IGFuZCBHZXJtYWluLCAyMDA1PC94cmVmPjsgPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliNWEiPkNoYW4gZXQgYWwuLCAyMDA0PC94cmVmPjsgPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliOGEiPkRhcyBldCBhbC4sIDIwMDk8L3hyZWY+OyA8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIzOGEiPlN0ZWZhbm92w6EgZXQgYWwuLCAyMDAzPC94cmVmPikuPC9wPgogICAgICA8cD5UaGUgdGltZXNjYWxlcyBvZiB0aGUgcE1IQzpUQ1IgaW50ZXJhY3Rpb25zIHdlIG9ic2VydmUgaW4gbGl2ZSBjZWxscyBhcmUgY29uc2lzdGVudCB3aXRoIFNQUiBtZWFzdXJlbWVudHMgb2YgPGl0YWxpYz5rPC9pdGFsaWM+PHN1Yj48aXRhbGljPm9mZjwvaXRhbGljPjwvc3ViPiBmb3IgdGhlIDVjLmM3IFRDUiBhbmQgMjI2IFRDUiwgd2hpY2ggaXMgbmVhcmx5IGlkZW50aWNhbCB0byBBTkQgKDx4cmVmIHJlZi10eXBlPSJmaWciIHJpZD0iZmlnNSI+RmlndXJlIDVDPC94cmVmPiBhbmQgPHhyZWYgcmVmLXR5cGU9ImZpZyIgcmlkPSJmaWc3Ij5GaWd1cmUgNzwveHJlZj4pICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWI3Ij5Db3JzZSBldCBhbC4sIDIwMTA8L3hyZWY+OyA8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIyOSI+TmV3ZWxsIGV0IGFsLiwgMjAxMTwveHJlZj4pLiBUaGV5IGFyZSBhbHNvIGNvbnNpc3RlbnQgd2l0aCByZXBvcnRzIG9mIGEg4oi8MiBzIGtpbmV0aWMgdGhyZXNob2xkIGZvciB0aHltaWMgc2VsZWN0aW9uIGRldGVybWluZWQgaW4gdml2byAoPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliNDQiPldpbGxpYW1zIGV0IGFsLiwgMTk5OTwveHJlZj47IDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjMxIj5QYWxtZXIgYW5kIE5hZWhlciwgMjAwOTwveHJlZj4pLiBTdG9jaGFzdGljIHJlYWN0aW9uLWRpZmZ1c2lvbiBhbmFseXNpcyBvZiB0aGUgbWVhc3VyZWQga2luZXRpYyBhbmQgbW9iaWxpdHkgcGFyYW1ldGVycyBpbmRpY2F0ZXMgdGhhdCByYXBpZCBzZXJpYWwgcmViaW5kaW5nIG9mIGFnb25pc3QgcE1IQyB0byBtdWx0aXBsZSBUQ1JzIGluIGEgc2lnbmFsaW5nIGNsdXN0ZXIgaXMgdW5saWtlbHkgdG8gYmUgYSB1bml2ZXJzYWwgbWVjaGFuaXNtIGZvciBsaWdhbmQgZGlzY3JpbWluYXRpb24gYW5kIHJhcGlkIHNpZ25hbCBhbXBsaWZpY2F0aW9uIGluIFQgY2VsbHMuPGZpZyBpZD0iZmlnNyIgcG9zaXRpb249ImZsb2F0Ij48b2JqZWN0LWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjc1NTQvZUxpZmUuMDA3NzguMDE1PC9vYmplY3QtaWQ+PGxhYmVsPkZpZ3VyZSA3LjwvbGFiZWw+PGNhcHRpb24+PHRpdGxlPkludGVyYWN0aW9uIG9mIHRoZSAyMjYgVENSIHdpdGggdGhlIE1DQyBwZXB0aWRlLjwvdGl0bGU+PHA+KDxib2xkPkE8L2JvbGQ+KSBDRFIzzrEgKHllbGxvdykgYW5kIENEUjPOsiAob3JhbmdlKSBsb29wcyBmb3JtIGFsbCB0aGUgc3BlY2lmaWMgaW50ZXJhY3Rpb25zIHdpdGggdGhlIHBlcHRpZGUgKGN5YW4pLiBIeWRyb2dlbiBib25kcyBiZXR3ZWVuIHRoZSBDRFIzIGxvb3BzIGFuZCB0aGUgTUNDIHJlc2lkdWVzIGFyZSBzaG93biBieSBkYXNoZWQgbGluZXMgKFBEQiwgM1FJVSkgKDxib2xkPkI8L2JvbGQ+KSBDb21wYXJpc29uIG9mIENEUjMgbG9vcHMgYmV0d2VlbiB0aGUgMjI2IGFuZCBBTkQgVENScyByZXZlYWwgaWRlbnRpY2FsIHNlcXVlbmNlcyBhbmQgc3VnZ2VzdCBzaW1pbGFyIGJpbmRpbmcga2luZXRpY3MuIDIyNiBhbmQgQU5EIGFsc28gc2hhcmUgVs6xLCBKzrEsIFbOsiwgYW5kIErOsiBnZW5lIHNlZ21lbnRzIHRoYXQgZW5jb2RlIHRoZSByZXNpZHVlcyBzcGVjaWZpYyBmb3IgaW50ZXJhY3Rpb24gd2l0aCBJRTxzdXA+azwvc3VwPiAoPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMjkiPk5ld2VsbCBldCBhbC4sIDIwMTE8L3hyZWY+KS4gVGhlIHJlc2lkdWVzIGludm9sdmVkIGluIGh5ZHJvZ2VuIGJvbmRzIGJldHdlZW4gMjI2IGFuZCBNQ0MgYXJlIHNob3duIGluIGJsdWUuPC9wPjxwPjxib2xkPkRPSTo8L2JvbGQ+PGV4dC1saW5rIGV4dC1saW5rLXR5cGU9ImRvaSIgeGxpbms6aHJlZj0iMTAuNzU1NC9lTGlmZS4wMDc3OC4wMTUiPmh0dHA6Ly9keC5kb2kub3JnLzEwLjc1NTQvZUxpZmUuMDA3NzguMDE1PC9leHQtbGluaz48L3A+PC9jYXB0aW9uPjxncmFwaGljIHhsaW5rOmhyZWY9ImVsaWZlMDA3NzhmMDA3Ii8+PC9maWc+PC9wPgogICAgICA8cD5UaGUgaW50ZXJjZWxsdWxhciBnZW9tZXRyeSBhcyB3ZWxsIGFzIGFjdGl2ZSBwcm9jZXNzZXMgd2l0aGluIHRoZSBUIGNlbGwgaGF2ZSBsb25nIGJlZW4gc3VzcGVjdGVkIHRvIGluZmx1ZW5jZSBwTUhDOlRDUiBpbnRlcmFjdGlvbnMgKDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjM2Ij5TaGF3IGFuZCBEdXN0aW4sIDE5OTc8L3hyZWY+OyA8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIzMiI+UWkgZXQgYWwuLCAyMDAxPC94cmVmPjsgPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliNCI+QnVycm91Z2hzIGFuZCBXdWxmaW5nLCAyMDAyPC94cmVmPjsgPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliNDkiPlpodSBldCBhbC4sIDIwMTM8L3hyZWY+KS4gRGlyZWN0IGluIHNpdHUgbWVhc3VyZW1lbnRzIG9mIGluZGl2aWR1YWwgcE1IQzpUQ1IgYmluZGluZyBraW5ldGljcywgc3VjaCBhcyB3ZSByZXBvcnQgaGVyZSwgYXJlIGV4dHJlbWVseSBsaW1pdGVkICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIxNyI+SHVhbmcgZXQgYWwuLCAyMDEwPC94cmVmPjsgPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMTgiPkh1cHBhIGV0IGFsLiwgMjAxMDwveHJlZj47IDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjIiPkF4bWFubiBldCBhbC4sIDIwMTI8L3hyZWY+KSBidXQgaW5mb3JtYXRpdmUgY29tcGFyaXNvbnMgY2FuIGJlIG1hZGUuIE5vdGFibHksIGEgcmVjZW50IGludHJhbW9sZWN1bGFyIEZSRVQgc3R1ZHkgb2YgdGhlIDVjLmM3IFRDUiBiaW5kaW5nIE1DQyBwTUhDIHJlcG9ydHMgc2hvcnQgKDxpbmxpbmUtZm9ybXVsYT48bW1sOm1hdGggaWQ9ImluZjI2Ij48bW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bW8+4oypPC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5vZmY8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PG1tbDptbz7ijKo8L21tbDptbz48L21tbDptcm93PjwvbW1sOm1yb3c+PC9tbWw6bWF0aD48L2lubGluZS1mb3JtdWxhPuKIvDE1MCBtcykgaW4gc2l0dSAyRCBkd2VsbCB0aW1lcywgbmVhcmx5IDM1IHRpbWVzIGZhc3RlciB0aGFuIHRoZSA8aW5saW5lLWZvcm11bGE+PG1tbDptYXRoIGlkPSJpbmYyNyI+PG1tbDptcm93PjxtbWw6bXJvdz48bW1sOm1vPuKMqTwvbW1sOm1vPjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+b2ZmPC9tbWw6bWk+PC9tbWw6bXN1Yj48L21tbDptcm93PjxtbWw6bW8+4oyqPC9tbWw6bW8+PC9tbWw6bXJvdz48L21tbDptcm93PjwvbW1sOm1hdGg+PC9pbmxpbmUtZm9ybXVsYT4gPSA1LjIgwrEgMC4yIHMgd2UgbWVhc3VyZWQgYnkgdHJhY2tpbmcuIFRoaXMgc2FtZSBzdHVkeSBtZWFzdXJlcyA8aW5saW5lLWZvcm11bGE+PG1tbDptYXRoIGlkPSJpbmYyOCI+PG1tbDptcm93PjxtbWw6bXJvdz48bW1sOm1vPuKMqTwvbW1sOm1vPjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+b2ZmPC9tbWw6bWk+PC9tbWw6bXN1Yj48L21tbDptcm93PjxtbWw6bW8+4oyqPC9tbWw6bW8+PC9tbWw6bXJvdz48L21tbDptcm93PjwvbW1sOm1hdGg+PC9pbmxpbmUtZm9ybXVsYT4gMjUgdGltZXMgbG9uZ2VyIHVuZGVyIGNvbmRpdGlvbnMgb2YgY3l0b3NrZWxldG9uIGRpc3J1cHRpb24sIGVzc2VudGlhbGx5IGluIGFncmVlbWVudCB3aXRoIHRyYWNraW5nIG9ic2VydmF0aW9ucy4gVGhpcyByZXN1bHQgaGFzIGJlZW4gaW50ZXJwcmV0ZWQgdG8gbWVhbiB0aGF0IHRoZSBhY3RpbiBjeXRvc2tlbGV0b24gYWN0aXZlbHkgZGVzdGFiaWxpemVzIGFnb25pc3QgcE1IQzpUQ1IgY29tcGxleGVzLiBJbiBjb250cmFzdCwgd2Ugb2JzZXJ2ZSB2ZXJ5IHNtYWxsIGVmZmVjdHMgb2YgYWN0aW4gZGlzcnVwdGlvbiBvbiBhZ29uaXN0IHBNSEMgZHdlbGwgdGltZXMgZm9yIEFORCBhbmQgZXNzZW50aWFsbHkgbm8gZWZmZWN0IHdpdGggNWMuYzcgVENSICg8eHJlZiByZWYtdHlwZT0iZmlnIiByaWQ9ImZpZzUiPkZpZ3VyZSA1QzwveHJlZj4pLjwvcD4KICAgICAgPHA+SXQgaXMgY29uY2VpdmFibGUgdGhhdCB0aGUgYWdvbmlzdCBwTUhDOlRDUiBjb21wbGV4IGRvZXMgbm90IHJlbWFpbiBib3VuZCBpbiB0aGUgc2FtZSBzdHJ1Y3R1cmFsIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBkdXJhdGlvbiBvZiBlbmdhZ2VtZW50LiBJZiBtZWNoYW5pY2FsIGNvdXBsaW5nIHRvIGFjdGluIHNpZ25pZmljYW50bHkgcmVkdWNlcyB0aGUgYXBwYXJlbnQgPGlubGluZS1mb3JtdWxhPjxtbWw6bWF0aCBpZD0iaW5mMjkiPjxtbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7ijKk8L21tbDptbz48bW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9mZjwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48bW1sOm1vPuKMqjwvbW1sOm1vPjwvbW1sOm1yb3c+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+IGluIGEgc2luZ2xlIG1vbGVjdWxlIEZSRVQgbWVhc3VyZW1lbnQsIGJ1dCBub3QgaW4gYSBzaW5nbGUgbW9sZWN1bGUgdHJhY2tpbmcgZXhwZXJpbWVudCwgdGhpcyByYWlzZXMgdGhlIHBvc3NpYmlsaXR5IHRoYXQgbWVjaGFuaWNhbCBmb3JjZXMgY2FuIGluZHVjZSBjb25mb3JtYXRpb25hbCBhbHRlcmF0aW9ucyBpbiBhZ29uaXN0IHBNSEM6VENSIHdpdGhvdXQgY29tcGxldGUgZGlzZW5nYWdlbWVudCBvZiB0aGUgY29tcGxleC4gUmVjZW50IHN0cnVjdHVyYWwgc3R1ZGllcyBvZiBwTUhDOlRDUiBpbmRpY2F0ZSB0aGUgcG9zc2liaWxpdHkgb2Ygc3VjaCBmbGV4aWJpbGl0eSAoPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMSI+QWRhbXMgZXQgYWwuLCAyMDExPC94cmVmPjsgPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMTYiPkhhd3NlIGV0IGFsLiwgMjAxMjwveHJlZj47IDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjM0Ij5SZWJvdWwgZXQgYWwuLCAyMDEyPC94cmVmPikuIFdoaWxlIHB1dGF0aXZlIGNvbmZvcm1hdGlvbmFsIGNoYW5nZXMgd291bGQgbm90IGFmZmVjdCBzaW5nbGUtbW9sZWN1bGUgdHJhY2tpbmcgbWVhc3VyZW1lbnRzLCB0aGV5IGNvdWxkIHByb2R1Y2UgYSBGUkVUIHNpZ25hdHVyZSAoPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMTUiPkhhIGV0IGFsLiwgMTk5OTwveHJlZj47IDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjI1Ij5NYWp1bWRhciBldCBhbC4sIDIwMDc8L3hyZWY+KS4gVW5kZXIgc3VjaCBhIHNjZW5hcmlvLCBhcHBhcmVudGx5IGZhc3QgPGlubGluZS1mb3JtdWxhPjxtbWw6bWF0aCBpZD0iaW5mMzAiPjxtbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7ijKk8L21tbDptbz48bW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9mZjwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48bW1sOm1vPuKMqjwvbW1sOm1vPjwvbW1sOm1yb3c+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+IG9ic2VydmVkIGJ5IEZSRVQgaW1hZ2luZyAoPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMTgiPkh1cHBhIGV0IGFsLiwgMjAxMDwveHJlZj4pIG1heSBub3QgY29ycmVzcG9uZCB0byBhY3R1YWwgbW9sZWN1bGFyIHVuYmluZGluZyBhbmQgZXNjYXBlIG9mIGFnb25pc3QgcE1IQyBmcm9tIFRDUi48L3A+CiAgICAgIDxwPkluIHRoZSBhZ2dyZWdhdGUsIHRoZSBkYXRhIHJlcG9ydGVkIGhlcmUgaW5kaWNhdGUgdGhhdCBzcGF0aWFsbHkgZGlzY3JldGUgcE1IQzpUQ1I6WkFQNzAgY29tcGxleGVzIGZvcm0gYWNjb3JkaW5nIHRvIG1vbGVjdWxhciBtYXNzIGFjdGlvbiBsYXdzIHdpdGggcmVsYXRpdmVseSBwcmVkaWN0YWJsZSBjaGVtaWNhbCBraW5ldGljcyBhbmQgc3RvaWNoaW9tZXRyeSBpbiBsaXZpbmcgY2VsbHMuIFRoZSBvYnNlcnZlZCBwTUhDOlRDUiBtb2xlY3VsYXIgYmluZGluZyBraW5ldGljcyBtaXJyb3Igc29sdXRpb24gbWVhc3VyZW1lbnRzIGFuZCB3ZSBvYnNlcnZlIG5vIGV2aWRlbmNlIGZvciBtb2xlY3VsYXIgc2NhbGUgY29vcGVyYXRpdml0eSBpbiB0aGUgdHJpZ2dlcmluZyBvZiBUQ1IgYnkgYWdvbmlzdCBwTUhDIChhdCBsb3cgYWdvbmlzdCBkZW5zaXR5KS4gVGh1cyBhbnkgYW1wbGlmaWNhdGlvbiBvciBvdGhlciBmb3JtIG9mIHNpZ25hbCBwcm9jZXNzaW5nIG11c3Qgb2NjdXIgZG93bnN0cmVhbSBvZiBUQ1IgdHJpZ2dlcmluZy48L3A+CiAgICA8L3NlYz4KICAgIDxzZWMgaWQ9InM0IiBzZWMtdHlwZT0ibWF0ZXJpYWxzfG1ldGhvZHMiPgogICAgICA8dGl0bGU+TWF0ZXJpYWxzIGFuZCBtZXRob2RzPC90aXRsZT4KICAgICAgPHNlYyBpZD0iczQtMSI+CiAgICAgICAgPHRpdGxlPkROQSwgcHJvdGVpbiwgYW5kIFQgY2VsbCBwcmVwYXJhdGlvbjwvdGl0bGU+CiAgICAgICAgPHA+QSBwbGFzbWlkIGNvbnRhaW5pbmcgZW5oYW5jZWQgZ3JlZW4gZmx1b3Jlc2NlbnQgcHJvdGVpbiBmdXNlZCB0byBDRDMgemV0YS1jaGFpbi1hc3NvY2lhdGVkIHByb3RlaW4gb2YgNzAga0RhICg8aXRhbGljPlphcDcwLUVHRlA8L2l0YWxpYz4pIHdhcyBhIGdpZnQgb2YgVGFrYXNoaSBTYWl0bywgUklLRU4gUmVzZWFyY2ggQ2VudGVyIGZvciBBbGxlcmd5IGFuZCBJbW11bm9sb2d5LCBZb2tvaGFtYSwgSmFwYW4gKDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjQ3Ij5Zb2tvc3VrYSBldCBhbC4sIDIwMDU8L3hyZWY+KS4gVGhlIDxpdGFsaWM+WmFwNzAtRUdGUDwvaXRhbGljPiBnZW5lIHdhcyBhbXBsaWZpZWQgYnkgUENSIGFuZCBzdWJjbG9uZWQgaW50byBhIG11cmluZSBzdGVtIGNlbGwgdmlydXMgcGFyZW50IHZlY3RvciAocE1TQ1YpLjwvcD4KICAgICAgICA8cD5CaS1oZXhhaGlzdGlkaW5lLXRhZ2dlZCBtYWpvciBoaXN0b2NvbXBhdGliaWxpdHkgY29tcGxleCAoTUhDKSBjbGFzcyBJSSBJLUU8c3VwPms8L3N1cD4gcHJvdGVpbiB3YXMgcHJvZHVjZWQgYW5kIHB1cmlmaWVkIGFzIHByZXZpb3VzbHkgZGVzY3JpYmVkICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIzMCI+TnllIGFuZCBHcm92ZXMsIDIwMDg8L3hyZWY+KS4gQSBkZWNhaGlzdGlkaW5lLXRhZ2dlZCA8aXRhbGljPklDQU0xLVRhZ0JGUDwvaXRhbGljPiBmdXNpb24gcHJvdGVpbiB3YXMgZ2VuZXJhdGVkIGJ5IFBDUiBhbXBsaWZ5aW5nIHRoZSBUYWdCRlAgc2VxdWVuY2UgKEV2cm9nZW4gSW5jLiwgTW9zY293LCBSdXNzaWEpIGFuZCBzdWJjbG9uaW5nIGl0IGludG8gYSBwTjEtSUNBTTEgdmVjdG9yLiBUaGUgZW50aXJlIDxpdGFsaWM+SWNhbTEtVGFnQkZQPC9pdGFsaWM+IGdlbmUgd2FzIHRoZW4gZnVydGhlciBzdWJjbG9uZWQgaW50byB0aGUgcEZhc3RCYWMxIHZlY3RvciAoSW52aXRyb2dlbiBJbmMuLCBDYXJsc2JhZCwgQ0EpLCB3aGljaCB3YXMgdXNlZCB0byBnZW5lcmF0ZSBiYWN1bG92aXJ1cyBmb3IgaW5mZWN0aW9uIG9mIEhpZ2ggRml2ZSBjZWxscyAoSW52aXRyb2dlbiBJbmMuKS4gVGhlIElDQU0xLVRhZ0JGUCB3YXMgc3Vic2VxdWVudGx5IHB1cmlmaWVkIG9uIGEgTmktTlRBLWFnYXJvc2UgYWZmaW5pdHkgY29sdW1uLCBlbHV0ZWQgd2l0aCBhbiBpbWlkYXpvbGUgZ3JhZGllbnQsIGRpYWx5emVkLCBhbmQgc3RvcmVkIGluIFRyaXMgYnVmZmVyIGNvbnRhaW5pbmcgMTAlIGdseWNlcm9sLiBBTkQgQ0Q0KyBUIGNlbGxzICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIyMiI+S2F5ZSBldCBhbC4sIDE5ODk8L3hyZWY+KSBhbmQgNSBjLmM3IENENCsgVCBjZWxscyB3ZXJlIGhhcnZlc3RlZCBhbmQgY3VsdHVyZWQgZXNzZW50aWFsbHkgYXMgcHJldmlvdXNseSBkZXNjcmliZWQgKDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjM3Ij5TbWl0aCBldCBhbC4sIDIwMTE8L3hyZWY+OyA8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIzOCI+U21vbGlnb3ZldHMgZXQgYWwuLCAyMDEyPC94cmVmPikuPC9wPgogICAgICAgIDxwPlQgY2VsbHMgd2VyZSB0cmFuc2R1Y2VkIHdpdGggPGl0YWxpYz5aYXA3MC1FR0ZQPC9pdGFsaWM+IGFuZCBzb3J0ZWQgdXNpbmcgZmx1b3Jlc2NlbmNlLWFjdGl2YXRlZCBjZWxsIHNvcnRpbmcgKEZBQ1MpIGFjY29yZGluZyB0byB2aWFiaWxpdHkgYW5kIEVHRlAgZXhwcmVzc2lvbi4gVGhlIHBvcHVsYXRpb24gb2YgdHJhbnNkdWNlZCBjZWxscyB0aGF0IHdhcyB1c2VkIGV4cHJlc3NlZCBFR0ZQIGF0IG5vIG1vcmUgdGhhbiA1MCUgb2YgdGhlIGhpZ2hlc3QgRUdGUCBsZXZlbCBpbiB0aGUgb3ZlcmFsbCBFR0ZQLXBvc2l0aXZlIHBvcHVsYXRpb24uPC9wPgogICAgICA8L3NlYz4KICAgICAgPHNlYyBpZD0iczQtMiI+CiAgICAgICAgPHRpdGxlPlBlcHRpZGUgcHVyaWZpY2F0aW9uIGFuZCBsYWJlbGluZzwvdGl0bGU+CiAgICAgICAgPHA+VXNpbmcgdGhlIGJhc2ljIHNlcXVlbmNlIG9mIG1vdGggY3l0b2Nocm9tZSBjIChhbWlubyBhY2lkcyA4OOKAkzEwMykgYW5kIHByZXZpb3VzbHkgZGVzY3JpYmVkIHZhcmlhbnRzICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIxOCI+SHVwcGEgZXQgYWwuLCAyMDEwPC94cmVmPiksIHRoZSBmb2xsb3dpbmcgcGVwdGlkZXMgd2VyZSBzeW50aGVzaXplZCBieSBEYXZpZCBLaW5nIGF0IHRoZSBISE1JIE1hc3MgU3BlY3Ryb21ldHJ5IExhYm9yYXRvcnkgYXQgVUMgQmVya2VsZXkgYW5kL29yIGNvbW1lcmNpYWxseSAoRWxpbSBCaW9waGFybWFjZXV0aWNhbHMsIEhheXdhcmQsIENBKTogTUNDIChBTkVSQURMSUFZTEtRQVRLKSwgTUNDKEMpIChBTkVSQURMSUFZTEtRQVRLR0dTQyksIE1DQy1udWxsKEMpIChBTkVSQUVMSUFZTFRRQUFLR0dTQykuIEZvciBmbHVvcm9waG9yZSBsYWJlbGluZywgY3lzdGVpbmUtY29udGFpbmluZyBwZXB0aWRlcyB3ZXJlIGRpc3NvbHZlZCBpbiBhIHNtYWxsIGFtb3VudCBvZiBwaG9zcGhhdGUgYnVmZmVyIGFuZCBtaXhlZCBpbiBhIDE6MiBtb2xhciByYXRpbyB3aXRoIEF0dG8gNjQ3TiByZXN1c3BlbmRlZCBpbiBhIHNtYWxsIGFtb3VudCBvZiAxLXByb3Bhbm9sIG9yIGx5b3BoaWxpemVkIEF0dG8gNDg4IChBdHRvLVRlYyBHbWJILCBTaWVnZW4sIEdlcm1hbnkpIGFuZCBsYWJlbGVkIHVzaW5nIG1hbGVpbWlkZS10aGlvbCBjaGVtaXN0cnkuIFRoZSBwZXB0aWRlcyB3ZXJlIHRoZW4gaW5jdWJhdGVkIGF0IHJvb20gdGVtcGVyYXR1cmUgZm9yIGF0IGxlYXN0IDEgaHIgYW5kIHB1cmlmaWVkIG9uIGEgQzE4IHJldmVyc2UgcGhhc2UgY29sdW1uIChHcmFjZeKAk1Z5ZGFjLCBEZWVyZmllbGQsIElMKSBhbmQgSDxzdWI+Mjwvc3ViPk86YWNldG9uaXRyaWxlIGdyYWRpZW50IHVzaW5nIMOES1RBIGV4cGxvcmVyIDEwMCBGUExDIHN5c3RlbSAoQW1lcnNoYW0gUGhhcm1hY2lhIEJpb3RlY2gsIFBpc2NhdGF3YXksIE5KKS4gUGVwdGlkZSBpZGVudGl0eSB3YXMgY29uZmlybWVkIGFmdGVyIHB1cmlmaWNhdGlvbiB1c2luZyBtYXNzIHNwZWN0cm9tZXRyeS48L3A+CiAgICAgIDwvc2VjPgogICAgICA8c2VjIGlkPSJzNC0zIj4KICAgICAgICA8dGl0bGU+TWljcm9zY29weTwvdGl0bGU+CiAgICAgICAgPHA+VElSRiBleHBlcmltZW50cyB3ZXJlIHBlcmZvcm1lZCBvbiBhbiBpbnZlcnRlZCBtaWNyb3Njb3BlIChOaWtvbiBFY2xpcHNlIFRpOyBUZWNobmljYWwgSW5zdHJ1bWVudHMsIEJ1cmxpbmdhbWUsIENBKSB1c2luZyBhIGN1c3RvbS1idWlsdCBsYXNlciBsYXVuY2ggd2l0aCA0ODggbm0gKFNhcHBoaXJlIEhQOyBDb2hlcmVudCBJbmMuLCBTYW50YSBDbGFyYSwgQ0EpIGFuZCA2NDAgbm0gKEN1YmU7IENvaGVyZW50IEluYy4pIGRpb2RlIGxhc2VycywgYXMgZGVzY3JpYmVkIHByZXZpb3VzbHkgKDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjM3Ij5TbWl0aCBldCBhbC4sIDIwMTE8L3hyZWY+KS4gTGFzZXIgcG93ZXJzIG1lYXN1cmVkIGF0IHRoZSBzYW1wbGUgd2VyZSAwLjggbVcgKDY0MCBubSkgYW5kIDAuNSBtVyAoNDg4IG5tKSBmb3IgNTAwIG1zIGV4cG9zdXJlcyBhbmQgNC40IG1XICg2NDAgbm0pIGZvciAxNy41IG1zIGV4cG9zdXJlcy4gQSBkaWNocm9pYyBiZWFtc3BsaXR0ZXIgKHo0ODgvNjQ3cnBjOyBDaHJvbWEgVGVjaG5vbG9neSBDb3JwLiwgQmVsbG93cyBGYWxscywgVlQpIHJlZmxlY3RlZCB0aGUgbGFzZXIgbGlnaHQgdGhyb3VnaCB0aGUgb2JqZWN0aXZlIGxlbnMgKE5pa29uIDEuNDkgTkEgVElSRjsgVGVjaG5pY2FsIEluc3RydW1lbnRzLCBCdXJsaW5nYW1lLCBDQSkgYW5kIGZsdW9yZXNjZW5jZSBpbWFnZXMgd2VyZSByZWNvcmRlZCB1c2luZyBhbiBFTS1DQ0QgKGlYb24gNTk3RFU7IEFuZG9yIEluYy4sIFNvdXRoIFdpbmRzb3IsIENUKSBhZnRlciBwYXNzaW5nIHRocm91Z2ggYSBsYXNlci1ibG9ja2luZyBmaWx0ZXIgKFo0ODgvNjQ3IE07IENocm9tYSBUZWNobm9sb2d5IENvcnAuLCBCZWxsb3dzIEZhbGxzLCBWVCkuIEJhbmRwYXNzIGZpbHRlcnMgKEZGMDMgNTI1LzUwOyBTZW1yb2NrIEluYy4sIFJvY2hlc3RlciwgTlkgYW5kIEVUIDcwMC83NSwgQ2hyb21hIFRlY2hub2xvZ3kgQ29ycC4sIEJlbGxvd3MgRmFsbHMsIFZUKSB3ZXJlIHBsYWNlZCBpbiBhIER1YWxWaWV3IDIgU2ltdWx0YW5lb3VzIEltYWdpbmcgU3lzdGVtIChQaG90b21ldHJpY3MsIFR1c2NvbiwgQVopLiBDb2xvcnMgd2VyZSByZWdpc3RlcmVkIGJlZm9yZSBldmVyeSB0d28tY29sb3IgZXhwZXJpbWVudCBieSBpbWFnaW5nIDEwMCBubSBUZXRyYXNwZWMgYmVhZHMgKEludml0cm9nZW4gSW5jLikgZGVwb3NpdGVkIG9uIGEgY292ZXJzbGlwIHBhdHRlcm5lZCB3aXRoIGEgQ3IgZ3JpZCB3aXRoIOKIvDgwIG5tIHdpZHRoIGFuZCAz4oCTNCDOvG0gcGl0Y2ggQ3IgbGluZXMsIHNpbmNlIHRoZSBUZXRyYXNwZWMgYmVhZHMgcHJlZmVyZW50aWFsbHkgYmluZCB0aGUgcmVndWxhciBDciBwYXR0ZXJuLiBFeHBvc3VyZSB0aW1lcyBhbmQgdGltZS1sYXBzZSBwZXJpb2RzIGZvciBtb3N0IGV4cGVyaW1lbnRzIHdlcmUgc2V0IHVzaW5nIGltYWdlIGNvbGxlY3Rpb24gc29mdHdhcmUgKE1ldGFNb3JwaCA3LjU7IE1vbGVjdWxhciBEZXZpY2VzIEluYy4sIERvd25pbmd0b3duLCBQQSksIHdoaWNoIGRyaXZlcyBhbiBleHRlcm5hbCBzaHV0dGVyIChVbmlibGl0eiBMUzY7IFZpbmNlbnQgQXNzb2NpYXRlcywgUm9jaGVzdGVyLCBOWSkuIEV4cG9zdXJlIHRpbWUgYW5kIEZhc3QgS2luZXRpY3MgTW9kZSBmb3Igc2hvcnQgKDE3LjUgbXMpIGludGVncmF0aW9uIHRpbWUgZXhwZXJpbWVudHMgd2VyZSBzZXQgdXNpbmcgQW5kb3IgU29saXMgKEFuZG9yIEluYy4sIFNvdXRoIFdpbmRzb3IsIENUKS4gRXhwb3N1cmUgdGltZXMgd2VyZSBtZWFzdXJlZCBkaXJlY3RseSBmcm9tIHRoZSBGaXJlIG91dHB1dCBvZiB0aGUgRU0tQ0NEIHVzaW5nIGFuIG9zY2lsbG9zY29wZSAoVERTIDIxMDsgVGVrdHJvbml4LCBJbmMuLCBCZWF2ZXJ0b24sIE9SKS48L3A+CiAgICAgIDwvc2VjPgogICAgICA8c2VjIGlkPSJzNC00Ij4KICAgICAgICA8dGl0bGU+SW1hZ2luZyBjaGFtYmVyIGFuZCBzdXBwb3J0ZWQgbGlwaWQgYmlsYXllciBwcmVwYXJhdGlvbjwvdGl0bGU+CiAgICAgICAgPHA+U2luZ2xlIHVuaWxhbWVsbGFyIHZlc2ljbGVzIChTVVZzKSB3ZXJlIGZvcm1lZCBieSB0aXAgc29uaWNhdGlvbiBvZiBhIHNvbHV0aW9uIGNvbXBvc2VkIG9mIDk4IG1vbCAlIDEsMi1kaW9sZW95bC1zbi1nbHljZXJvLTMtcGhvc3Bob2Nob2xpbmUgKERPUEMpIGFuZCAyIG1vbCAlIDEsMi1kaW9sZW95bC1zbi1nbHljZXJvLTMtWyhOLSg1LWFtaW5vLTEtY2FyYm94eXBlbnR5bCkgaW1pbm9kaWFjZXRpYyBhY2lkKSBzdWNjaW55bF0gKG5pY2tlbCBzYWx0KSAoTmk8c3VwPjIrPC9zdXA+LU5UQS1ET0dTKSAoQXZhbnRpIFBvbGFyIExpcGlkcywgQWxhYmFzdGVyLCBBTCkgaW4gTWlsbC1RIHdhdGVyIChFTUQgTWlsbGlwb3JlLCBCaWxsZXJpY2EsIE1BKS4gVGlwIHNvbmljYXRpb24gd2FzIHByZWZlcnJlZCB0byB2ZXNpY2xlIGV4dHJ1c2lvbiBkdWUgdG8gdGhlIGludHJvZHVjdGlvbiBvZiBzaWduaWZpY2FudCBsZXZlbHMgb2YgZmx1b3Jlc2NlbnQgaW1wdXJpdGllcyBpbnRvIHRoZSBTVVZzIGR1cmluZyBleHRydXNpb24uIFByaW9yIHRvIGV4cGVyaW1lbnRzLCAjMiA0MCBtbSBkaWFtZXRlciByb3VuZCBjb3ZlcnNsaXBzIHdlcmUgdWx0cmFzb25pY2F0ZWQgZm9yIDMwIG1pbiBpbiA1MDo1MCBpc29wcm9weWwgYWxjb2hvbDp3YXRlciwgcmluc2VkIHRob3JvdWdobHkgaW4gTWlsbGktUSB3YXRlciAoRU1EIE1pbGxpcG9yZSwgQmlsbGVyaWNhLCBNQSksIGV0Y2hlZCBmb3IgNSBtaW4gaW4gcGlyYW5oYSBzb2x1dGlvbiAoMzoxIHN1bGZ1cmljIGFjaWQ6aHlkcm9nZW4gcGVyb3hpZGUpLCBhbmQgYWdhaW4gcmluc2VkIHRob3JvdWdobHkgaW4gTWlsbGktUSB3YXRlci4gVGhlIGNvdmVyc2xpcHMgd2VyZSB1c2VkIGluIHRoZSBhc3NlbWJseSBvZiBGQ1MyIENsb3NlZCBDaGFtYmVyIFN5c3RlbXMgKGZsb3cgY2VsbHM7IEJpb3B0ZWNocywgQnV0bGVyLCBQQSksIHdoaWNoIHdlcmUgcHJlLWZpbGxlZCB3aXRoIFRyaXMtYnVmZmVyZWQgc2FsaW5lIChUQlM7IDE5Ljk4IG1NIFRyaXMsIDEzNiBtTSBOYUNsLCBwSCA3LjQ7IE1lZGlhdGVjaCBJbmMuLCBIZXJuZG9uLCBWQSkuIFNVVnMgd2VyZSB0aGVuIGZsb3dlZCBpbnRvIHRoZSBjaGFtYmVycywgYW5kIGJpbGF5ZXJzIHdlcmUgYWxsb3dlZCB0byBmb3JtIGZvciBhdCBsZWFzdCAzMCBtaW4uIFRoZSBiaWxheWVycyB3ZXJlIHJpbnNlZCBvbmNlIHdpdGggVEJTLCBpbmN1YmF0ZWQgZm9yIDUgbWluIHdpdGggMTAwIG1NIE5pQ2w8c3ViPjI8L3N1Yj4gaW4gVEJTLCByaW5zZWQgd2l0aCBUQlMsIGFuZCB0aGVuIHJpbnNlZCB3aXRoIGEgVCBjZWxsIGltYWdpbmcgYnVmZmVyIGNvbXBvc2VkIG9mIDEgbU0gQ2FDbDxzdWI+Mjwvc3ViPiwgMiBtTSBNZ0NsPHN1Yj4yPC9zdWI+LCAyMCBtTSBIRVBFUywgMTM3IG1NIE5hQ2wsIDUgbU0gS0NsLCAwLjcgbU0gTmE8c3ViPjI8L3N1Yj5IUE88c3ViPjQ8L3N1Yj4sIDYgbU0gZC1nbHVjb3NlLCBhbmQgMSUgd3Qvdm9sIGJvdmluZSBzZXJ1bSBhbGJ1bWluLiA0OCBociBwcmlvciB0byBleHBlcmltZW50cywgTUhDIHdhcyBsb2FkZWQgd2l0aCBwZXB0aWRlIGF0IDM3wrBDIGluIGEgYnVmZmVyIGNvbXBvc2VkIG9mIDElIHd0L3ZvbCBib3ZpbmUgc2VydW0gYWxidW1pbiBpbiBwaG9zcGhhdGUtYnVmZmVyZWQgc2FsaW5lIGFuZCBicm91Z2h0IHRvIHBIIDQuNSB3aXRoIGNpdHJpYyBhY2lkLiBVbmJvdW5kIHBlcHRpZGUgd2FzIHNlcGFyYXRlZCBmcm9tIHBlcHRpZGUgbG9hZGVkIE1IQyAocE1IQykgdXNpbmcgMTBrIHNwaW4gY29uY2VudHJhdG9ycyAoQW1pY29uIFVsdHJhLCBDb3JrLCBJcmVsYW5kKSBhbmQgdGhlbiBwTUhDIHdhcyBkaWx1dGVkIGluIGltYWdpbmcgYnVmZmVyLiBJQ0FNMS1UYWdCRlAgYW5kIHBNSEMgd2VyZSBmdXJ0aGVyIGRpbHV0ZWQgd2l0aCBpbWFnaW5nIGJ1ZmZlciwgaW50cm9kdWNlZCBpbnRvIHRoZSBmbG93IGNlbGxzLCBhbmQgaW5jdWJhdGVkIGZvciAzNSBtaW4gZm9sbG93ZWQgYnkgYSByaW5zZSB3aXRoIGltYWdpbmcgYnVmZmVyLiBUIGNlbGxzIHJlc3VzcGVuZGVkIGluIGltYWdpbmcgYnVmZmVyIGFuZCBhZGRlZCB0byB0aGUgZmxvdyBjZWxscyAzNSBtaW4gYWZ0ZXIgdGhlIGZpbmFsIHJpbnNlIGFuZCBpbWFnZWQgaW1tZWRpYXRlbHkgZm9yIDMw4oCTNjAgbWluLiBUbyB2aXN1YWxpemUgVENSLCBUIGNlbGxzIHdlcmUgaW5jdWJhdGVkIGluIGEgc29sdXRpb24gb2YgMSDOvGwgQWxleGEgNjQ3IChJbnZpdHJvZ2VuIEluYy4pLWxhYmVsZWQgSDU3IGFudGktVENSIEZhYiBhbmQgMTAwIM68bCBpbWFnaW5nIGJ1ZmZlciBmb3IgMjAgbWluIGF0IDTCsEMgcHJpb3IgdG8gdGhlIHJlZ3VsYXIgaW1hZ2luZyBidWZmZXIgcmVzdXNwZW5zaW9uLiBBbGwgb3RoZXIgaW5jdWJhdGlvbnMgZHVyaW5nIHRoaXMgcHJvdG9jb2wgd2VyZSBwZXJmb3JtZWQgYXQgcm9vbSB0ZW1wZXJhdHVyZSwgYW5kIGltYWdpbmcgZXhwZXJpbWVudHMgd2VyZSBwZXJmb3JtZWQgYXQgMzfCsEMuPC9wPgogICAgICA8L3NlYz4KICAgICAgPHNlYyBpZD0iczQtNSI+CiAgICAgICAgPHRpdGxlPkRhdGEgYW5hbHlzaXM8L3RpdGxlPgogICAgICAgIDxwPlNpbmdsZSBtb2xlY3VsZSBkaWZmcmFjdGlvbi1saW1pdGVkIHNwb3RzIHdlcmUgZGV0ZWN0ZWQgaW4gcmF3IC50aWYgaW1hZ2Ugc3RhY2tzIG9mIGFnb25pc3QgcE1IQyBsYWJlbGVkIHdpdGggTUNDLUF0dG80ODggYW5kIE1DQy02NDdOIG1vbGVjdWxlcyBieSBmaWx0ZXJpbmcgZm9yIGJvdGggc2l6ZSBhbmQgaW50ZW5zaXR5IGFuZCBsaW5rZWQgaW50byB0cmFja3MgdXNpbmcgcHVibGlzaGVkIHBhcnRpY2xlIGRldGVjdGlvbiBhbmQgdHJhY2tpbmcgYWxnb3JpdGhtcyAoPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliOCI+Q3JvY2tlciBhbmQgR3JpZXIsIDE5OTY8L3hyZWY+KSBhZGFwdGVkIGZvciBNQVRMQUIgKFRoZSBNYXRod29ya3M7IE5hdGljaywgTUEpIGJ5IERhbmllbCBCbGFpciBhbmQgRXJpYyBEdWZyZXNuZSAoPGV4dC1saW5rIGV4dC1saW5rLXR5cGU9InVyaSIgeGxpbms6aHJlZj0iaHR0cDovL3BoeXNpY3MuZ2VvcmdldG93bi5lZHUvbWF0bGFiLyI+aHR0cDovL3BoeXNpY3MuZ2VvcmdldG93bi5lZHUvbWF0bGFiLzwvZXh0LWxpbms+OyBhY2Nlc3NlZCAxNiBBdWd1c3QgMjAxMikuIFNpemUgYW5kIGludGVuc2l0eSB0aHJlc2hvbGRzIHdlcmUgZmlyc3QgZGV0ZXJtaW5lZCBieSBleWUgdXNpbmcgYSB0ZXN0IGRhdGEgc2V0IGFuZCB0aGVuIGFwcGxpZWQgdW5pZm9ybWx5IHRvIGFsbCBkYXRhIGNvbGxlY3RlZCB3aXRoIHRoZSBzYW1lIGV4cG9zdXJlIHRpbWUgYW5kIGluY2lkZW50IGxhc2VyIGludGVuc2l0aWVzLiBTaW5nbGUgbW9sZWN1bGVzIHdlcmUgaWRlbnRpZmllZCBieSBzdGVwIHBob3RvYmxlYWNoaW5nIGRldGVjdGVkIGluIGFuIGF1dG9tYXRlZCB3YXkgdXNpbmcgYSBCYXllc2lhbiBjaGFuZ2UgcG9pbnQgZGV0ZWN0aW9uIGFsZ29yaXRobSAoPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMTIiPkVuc2lnbiBhbmQgUGFuZGUsIDIwMDk8L3hyZWY+KS48L3A+CiAgICAgICAgPHA+VGhlIGJyaWdodG5lc3Mgb2YgWkFQNzAtRUdGUCBmZWF0dXJlcyB2YXJpZXMgZnJvbSBhIHNpbmdsZSBtb2xlY3VsZSB0byBzZXZlcmFsIG1vbGVjdWxlcywgYW5kIGRpZmZlcmVudCBicmlnaHRuZXNzIGZlYXR1cmVzIGFyZSBkZXRlY3RlZCB1c2luZyBzbGlnaHRseSBkaWZmZXJlbnQgbWV0aG9kcywgZGVzcGl0ZSB0aGUgZmFjdCB0aGF0IHRoZSBmZWF0dXJlcyBhcmUgcGh5c2ljYWxseSBzaW1pbGFyLiBCcmlnaHQgWkFQNzAtRUdGUCBmZWF0dXJlcyAoYXMgc2hvd24gaW4gPHhyZWYgcmVmLXR5cGU9ImZpZyIgcmlkPSJmaWc0Ij5GaWd1cmUgNEEsRDwveHJlZj4pIHdlcmUgZGV0ZWN0ZWQgdXNpbmcgdGhlIHNhbWUgYWxnb3JpdGhtIGFzIGlzIHVzZWQgZm9yIHNpbmdsZSBtb2xlY3VsZSBwTUhDLiBUaGUgbG93ZXIgc2lnbmFsLXRvLW5vaXNlIHNpbmdsZSBtb2xlY3VsZSBaQVA3MC1FR0ZQIGludGVuc2l0eSB0cmFjZXMgbGlrZSB0aG9zZSBpbiA8eHJlZiByZWYtdHlwZT0iZmlnIiByaWQ9ImZpZzQiPkZpZ3VyZSA0QzwveHJlZj4gd2VyZSBvYnRhaW5lZCBieSBzdW1taW5nIHRoZSBpbnRlbnNpdHkgb2YgdGhlIFpBUDcwLUVHRlAgY2hhbm5lbCB1c2luZyB0aGUgYWdvbmlzdCBwTUhDIChsYWJlbGVkIHdpdGggQXR0bzY0N04pIG1vbGVjdWxlIHBvc2l0aW9uIGFzIGEgbWFzaywgYXMgaXMgZXhwbGFpbmVkIGluIHRoZSBtYWluIHRleHQuPC9wPgogICAgICAgIDxwPlRoZSBsaWZldGltZSBvZiB0aGUgYnJpZ2h0IFpBUDcwLUVHRlAgc3BlY2tsZXMgaXMgZGlmZmljdWx0IHRvIGFjY3VyYXRlbHkgYXNzZXNzIGR1ZSB0byB0aGUgZmx1Y3R1YXRpbmcgYmFja2dyb3VuZCBhbmQgdmFyeWluZyBzcGVja2xlIGludGVuc2l0eSAod2hpY2ggYmlhc2VzIG1lYXN1cmVtZW50IHRvd2FyZHMgYnJpZ2h0ZXIsIGxvbmdlci1saXZlZCBmbHVvcmVzY2VudCBmZWF0dXJlcyksIGJ1dCBzcGVja2xlIGxpZmV0aW1lcyBhcHBlYXIgdG8gYmUgbG9uZ2VyIHRoYW4gdGhlIHNpbmdsZSBtb2xlY3VsZSBaQVA3MC1FR0ZQIGxpZmV0aW1lcy4gU2luZ2xlIG1vbGVjdWxlIFpBUDcwLUVHRlAgbW9sZWN1bGVzIGFyZSB1bmNvcnJlY3RlZCBmb3IgcGhvdG9ibGVhY2hpbmcgb2YgYm90aCBaQVA3MC1FR0ZQIGFuZCBhZ29uaXN0IHBNSEMgYW5kIHRoZXJlZm9yZSB0aGUgcmFuZ2Ugb2YgYmluZGluZyB0aW1lcyByZXBvcnRlZCAoMTLigJMxMDcgcykgb25seSBzZXJ2ZXMgYXMgYSBsb3dlciBib3VuZCBmb3IgdGhlIG1vbGVjdWxhciBaQVA3MCBkd2VsbCB0aW1lLjwvcD4KICAgICAgICA8cD5UaGUgYWdvbmlzdCBwTUhDIHN0ZXAgc2l6ZSBkaXN0cmlidXRpb24gYXQgMTcuNSBtcyByZXNvbHV0aW9uIGluIDx4cmVmIHJlZi10eXBlPSJmaWciIHJpZD0iZmlnMSI+RmlndXJlIDFEPC94cmVmPiBpcyBwb3B1bGF0ZWQgdXNpbmcgc2ltaWxhciBwYXJ0aWNsZSBkZXRlY3Rpb24gYW5kIHRyYWNraW5nIG1ldGhvZHMgdG8gdGhlIDUwMCBtcyByZXNvbHV0aW9uIGFuYWx5c2lzLiwgQWdvbmlzdCBwTUhDOlRDUiBiaW5kaW5nIGtpbmV0aWNzIGNhbm5vdCBiZSB1bmlxdWVseSBpbmZlcnJlZCBmcm9tIHRoZSBzdGVwIHNpemUgZGlzdHJpYnV0aW9uLCBzaW5jZSB0aGUgc3RlcCBzaXplIGRpc3RyaWJ1dGlvbiBpcyBhIHRpbWUtaW5kZXBlbmRlbnQgYW5hbHlzaXMuIEZvciBpbnN0YW5jZSwgdGhlIHN0ZXAgc2l6ZSBkaXN0cmlidXRpb24gbWVhc3VyZWQgb3ZlciBhIGNlcnRhaW4gdGltZSBwZXJpb2Qgd2l0aCAyPGl0YWxpYz5rPC9pdGFsaWM+PHN1Yj48aXRhbGljPm9uPC9pdGFsaWM+PC9zdWI+IGFuZCAyPGl0YWxpYz5rPC9pdGFsaWM+PHN1Yj48aXRhbGljPm9mZjwvaXRhbGljPjwvc3ViPiB3b3VsZCBhcHBlYXIgaWRlbnRpY2FsIHRvIGEgc2NlbmFyaW8gd2l0aCA8aXRhbGljPms8L2l0YWxpYz48c3ViPjxpdGFsaWM+b248L2l0YWxpYz48L3N1Yj4gYW5kIDxpdGFsaWM+azwvaXRhbGljPjxzdWI+PGl0YWxpYz5vZmY8L2l0YWxpYz48L3N1Yj4uPC9wPgogICAgICAgIDxwPkxpZmV0aW1lIGRpc3RyaWJ1dGlvbnMgYXJlIHJvdWdobHkgZXhwb25lbnRpYWwgYW5kIG9mIHRoZSBmb3JtIDxpbmxpbmUtZm9ybXVsYT48bW1sOm1hdGggaWQ9ImluZjMxIj48bW1sOm1yb3c+PG1tbDptaT5mPC9tbWw6bWk+PG1tbDptcm93PjxtbWw6bW8+KDwvbW1sOm1vPjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+b2JzPC9tbWw6bWk+PC9tbWw6bXN1Yj48L21tbDptcm93PjxtbWw6bW8+KTwvbW1sOm1vPjwvbW1sOm1yb3c+PG1tbDptbz49PC9tbWw6bW8+PG1tbDptc3VwPjxtbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7ijKk8L21tbDptbz48bW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9iczwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48bW1sOm1vPuKMqjwvbW1sOm1vPjwvbW1sOm1yb3c+PC9tbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7iiJI8L21tbDptbz48bW1sOm1uPjE8L21tbDptbj48L21tbDptcm93PjwvbW1sOm1zdXA+PG1tbDptc3VwPjxtbWw6bWk+ZTwvbW1sOm1pPjxtbWw6bXJvdz48bW1sOm1mcmFjIGJldmVsbGVkPSJ0cnVlIj48bW1sOm1yb3c+PG1tbDptbz7iiJI8L21tbDptbz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+b2JzPC9tbWw6bWk+PC9tbWw6bXN1Yj48L21tbDptcm93PjxtbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7ijKk8L21tbDptbz48bW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9iczwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48bW1sOm1vPuKMqjwvbW1sOm1vPjwvbW1sOm1yb3c+PC9tbWw6bXJvdz48L21tbDptZnJhYz48L21tbDptcm93PjwvbW1sOm1zdXA+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+LCB3aGVyZSA8aXRhbGljPs+EPC9pdGFsaWM+PHN1Yj48aXRhbGljPm9iczwvaXRhbGljPjwvc3ViPiBpcyB0aGUgb2JzZXJ2ZWQgZHdlbGwgdGltZSBpbiBvdXIgZXhwZXJpbWVudHMuIFRoZSBpbmRpdmlkdWFsIGtpbmV0aWMgdHJhbnNpdGlvbnMgd2VyZSBkZXJpdmVkIGFzc3VtaW5nIHRoZSBmb2xsb3dpbmcgbW9kZWw6PGRpc3AtZm9ybXVsYSBpZD0iZXF1MyI+PG1tbDptYXRoIGlkPSJtMyI+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPnBNSEM8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPmZyZWU8L21tbDptaT48L21tbDptc3ViPjxtbWw6bXVuZGVyb3Zlcj48bW1sOm1vPuKHjDwvbW1sOm1vPjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT5rPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5vZmY8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPms8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9uPC9tbWw6bWk+PC9tbWw6bXN1Yj48L21tbDptcm93PjwvbW1sOm11bmRlcm92ZXI+PG1tbDptcm93PjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+cE1IQzwvbW1sOm1pPjxtbWw6bW8+OjwvbW1sOm1vPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+VENSPC9tbWw6bWk+PC9tbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptb3ZlciBhY2NlbnQ9InRydWUiPjxtbWw6bW8+4oaSPC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPms8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPmJsPC9tbWw6bWk+PC9tbWw6bXN1Yj48L21tbDptcm93PjwvbW1sOm1vdmVyPjwvbW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+cE1IQzwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+YmxlYWNoZWQ8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PC9tbWw6bWF0aD48L2Rpc3AtZm9ybXVsYT53aGVyZSA8aXRhbGljPnBNSEM8L2l0YWxpYz48c3ViPjxpdGFsaWM+ZnJlZTwvaXRhbGljPjwvc3ViPiBpcyB0aGUgZmFzdC1tb2JpbGl0eSBzdGF0ZSwgPGl0YWxpYz5wTUhDOlRDUjwvaXRhbGljPiBpcyB0aGUgc2xvdy1tb2JpbGl0eSBzdGF0ZSAob3IgdGhlIFRDUiBzdGFibHkgYm91bmQgc3RhdGUpLCA8aXRhbGljPnBNSEM8L2l0YWxpYz48c3ViPjxpdGFsaWM+YmxlYWNoZWQ8L2l0YWxpYz48L3N1Yj4gaXMgdGhlIGJsZWFjaGVkIHNsb3ctbW9iaWxpdHkgc3RhdGUsIDxpdGFsaWM+azwvaXRhbGljPjxzdWI+PGl0YWxpYz5vZmY8L2l0YWxpYz48L3N1Yj4gYW5kIDxpdGFsaWM+azwvaXRhbGljPjxzdWI+PGl0YWxpYz5vbjwvaXRhbGljPjwvc3ViPiBhcmUgdGhlIHJhdGVzIG9mIHRyYW5zaXRpb25zIGJldHdlZW4gdGhlIGJvdW5kIGFuZCB0aGUgZnJlZSBwTUhDLCBhbmQgPGl0YWxpYz5rPC9pdGFsaWM+PHN1Yj48aXRhbGljPmJsPC9pdGFsaWM+PC9zdWI+IGlzIHRoZSByYXRlIG9mIHRyYW5zaXRpb24gZnJvbSBib3VuZCBwTUhDOlRDUiB0byBwaG90b2JsZWFjaGVkIHBNSEMuIFdlIGFzc3VtZSB0aGF0IHRyYW5zaXRpdGlvbnMgYmV0d2VlbiBzdGF0ZXMgZm9sbG93IGEgTWFya292IG1lbW9yeS1sZXNzIHByb2Nlc3MgYW5kIGRlcml2ZSBhIHByb2JhYmlsaXR5IGRlbnNpdHkgZnVuY3Rpb24sIDxpbmxpbmUtZm9ybXVsYT48bW1sOm1hdGggaWQ9ImluZjMyIj48bW1sOm1yb3c+PG1tbDptaT5mPC9tbWw6bWk+PG1tbDptcm93PjxtbWw6bW8+KDwvbW1sOm1vPjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+b2JzPC9tbWw6bWk+PC9tbWw6bXN1Yj48L21tbDptcm93PjxtbWw6bW8+KTwvbW1sOm1vPjwvbW1sOm1yb3c+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+LCBmb3IgdGhlIHNpbmdsZSBtb2xlY3VsZSBkd2VsbCB0aW1lIGRpc3RyaWJ1dGlvbjogPGlubGluZS1mb3JtdWxhPjxtbWw6bWF0aCBpZD0iaW5mMzMiPjxtbWw6bXJvdz48bW1sOm1pPmY8L21tbDptaT48bW1sOm1yb3c+PG1tbDptbz4oPC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5vYnM8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PG1tbDptbz4pPC9tbWw6bW8+PC9tbWw6bXJvdz48bW1sOm1vPj08L21tbDptbz48bW1sOm1yb3c+PG1tbDptbz4oPC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bXN1cD48bW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bW8+4oypPC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5ibDwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48bW1sOm1vPuKMqjwvbW1sOm1vPjwvbW1sOm1yb3c+PC9tbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7iiJI8L21tbDptbz48bW1sOm1uPjE8L21tbDptbj48L21tbDptcm93PjwvbW1sOm1zdXA+PG1tbDptbz4rPC9tbWw6bW8+PG1tbDptc3VwPjxtbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7ijKk8L21tbDptbz48bW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9mZjwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48bW1sOm1vPuKMqjwvbW1sOm1vPjwvbW1sOm1yb3c+PC9tbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7iiJI8L21tbDptbz48bW1sOm1uPjE8L21tbDptbj48L21tbDptcm93PjwvbW1sOm1zdXA+PC9tbWw6bXJvdz48bW1sOm1vPik8L21tbDptbz48L21tbDptcm93PjxtbWw6bXN1cD48bW1sOm1pPmU8L21tbDptaT48bW1sOm1yb3c+PG1tbDptbz7iiJI8L21tbDptbz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+b2JzPC9tbWw6bWk+PC9tbWw6bXN1Yj48bW1sOm1yb3c+PG1tbDptbz4oPC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bXN1cD48bW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bW8+4oypPC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5ibDwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48bW1sOm1vPuKMqjwvbW1sOm1vPjwvbW1sOm1yb3c+PC9tbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7iiJI8L21tbDptbz48bW1sOm1uPjE8L21tbDptbj48L21tbDptcm93PjwvbW1sOm1zdXA+PG1tbDptbz4rPC9tbWw6bW8+PG1tbDptc3VwPjxtbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7ijKk8L21tbDptbz48bW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9mZjwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48bW1sOm1vPuKMqjwvbW1sOm1vPjwvbW1sOm1yb3c+PC9tbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7iiJI8L21tbDptbz48bW1sOm1uPjE8L21tbDptbj48L21tbDptcm93PjwvbW1sOm1zdXA+PC9tbWw6bXJvdz48bW1sOm1vPik8L21tbDptbz48L21tbDptcm93PjwvbW1sOm1yb3c+PC9tbWw6bXN1cD48L21tbDptcm93PjwvbW1sOm1hdGg+PC9pbmxpbmUtZm9ybXVsYT4sIHdoZXJlIDxpbmxpbmUtZm9ybXVsYT48bW1sOm1hdGggaWQ9ImluZjM0Ij48bW1sOm1yb3c+PG1tbDptc3VwPjxtbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz4oPC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bXN1cD48bW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bW8+4oypPC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5ibDwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48bW1sOm1vPuKMqjwvbW1sOm1vPjwvbW1sOm1yb3c+PC9tbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7iiJI8L21tbDptbz48bW1sOm1uPjE8L21tbDptbj48L21tbDptcm93PjwvbW1sOm1zdXA+PG1tbDptbz4rPC9tbWw6bW8+PG1tbDptc3VwPjxtbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7ijKk8L21tbDptbz48bW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9mZjwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48bW1sOm1vPuKMqjwvbW1sOm1vPjwvbW1sOm1yb3c+PC9tbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7iiJI8L21tbDptbz48bW1sOm1uPjE8L21tbDptbj48L21tbDptcm93PjwvbW1sOm1zdXA+PC9tbWw6bXJvdz48bW1sOm1vPik8L21tbDptbz48L21tbDptcm93PjwvbW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bW8+4oiSPC9tbWw6bW8+PG1tbDptbj4xPC9tbWw6bW4+PC9tbWw6bXJvdz48L21tbDptc3VwPjxtbWw6bW8+PTwvbW1sOm1vPjxtbWw6bXJvdz48bW1sOm1vPuKMqTwvbW1sOm1vPjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+b2JzPC9tbWw6bWk+PC9tbWw6bXN1Yj48L21tbDptcm93PjxtbWw6bW8+4oyqPC9tbWw6bW8+PC9tbWw6bXJvdz48L21tbDptcm93PjwvbW1sOm1hdGg+PC9pbmxpbmUtZm9ybXVsYT4gaXMgdGhlIG9ic2VydmVkIG1lYW4gZHdlbGwgdGltZSBpbiBvdXIgZXhwZXJpbWVudHMuIEFnb25pc3QgcE1IQyBsYWJlbGVkIHdpdGggQXR0bzQ4OCBhbmQgQXR0bzY0N04gU0xCIGJsZWFjaGluZyBjdXJ2ZXMgd2VyZSBiYWNrZ3JvdW5kIHN1YnRyYWN0ZWQgYW5kIHRoZW4gZml0IHRvIGFuIGV4cG9uZW50aWFsIGRlY2F5IGZ1bmN0aW9uIG9mIHRoZSBmb3JtIDxpbmxpbmUtZm9ybXVsYT48bW1sOm1hdGggaWQ9ImluZjM1Ij48bW1sOm1yb3c+PG1tbDptaT5mPC9tbWw6bWk+PG1tbDptcm93PjxtbWw6bW8+KDwvbW1sOm1vPjxtbWw6bWk+dDwvbW1sOm1pPjxtbWw6bW8+KTwvbW1sOm1vPjwvbW1sOm1yb3c+PG1tbDptbz49PC9tbWw6bW8+PG1tbDptc3ViPjxtbWw6bWk+azwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+Ymw8L21tbDptaT48L21tbDptc3ViPjxtbWw6bXN1cD48bW1sOm1pPmU8L21tbDptaT48bW1sOm1yb3c+PG1tbDptbz7iiJI8L21tbDptbz48bW1sOm1zdWI+PG1tbDptaT5rPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5ibDwvbW1sOm1pPjwvbW1sOm1zdWI+PG1tbDptaT50PC9tbWw6bWk+PC9tbWw6bXJvdz48L21tbDptc3VwPjwvbW1sOm1yb3c+PC9tbWw6bWF0aD48L2lubGluZS1mb3JtdWxhPi4gRml0dGluZyB3YXMgZG9uZSB1c2luZyBNQVRMQUIuPC9wPgogICAgICA8L3NlYz4KICAgICAgPHNlYyBpZD0iczQtNiI+CiAgICAgICAgPHRpdGxlPlN0b2NoYXN0aWMga2luZXRpYyBzaW11bGF0aW9uPC90aXRsZT4KICAgICAgICA8cD5TaW11bGF0aW9ucyB3ZXJlIHBlcmZvcm1lZCB1c2luZyBNQVRMQUIuIE91ciBzaW11bGF0aW9uIG1vZGVscyBhIFRDUiBjbHVzdGVyIGFzIGEgc3F1YXJlIGxhdHRpY2UgdXBvbiB3aGljaCBhZ29uaXN0IHBNSEMgbW9sZWN1bGVzIGJpbmQgZGlzY3JldGUgVENSIGxhdHRpY2Ugc2l0ZXMgZm9yIGR1cmF0aW9uIDxpbmxpbmUtZm9ybXVsYT48bW1sOm1hdGggaWQ9ImluZjM2Ij48bW1sOm1yb3c+PG1tbDptc3Vic3VwPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9mZjwvbW1sOm1pPjxtbWw6bWk+aTwvbW1sOm1pPjwvbW1sOm1zdWJzdXA+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+LCA8aW5saW5lLWZvcm11bGE+PG1tbDptYXRoIGlkPSJpbmYzNyI+PG1tbDptcm93PjxtbWw6bXN1YnN1cD48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5vZmY8L21tbDptaT48bW1sOm1pPmk8L21tbDptaT48L21tbDptc3Vic3VwPjwvbW1sOm1yb3c+PC9tbWw6bWF0aD48L2lubGluZS1mb3JtdWxhPiB3aGVyZSBpcyB0cmVhdGVkIGFzIGEgcmFuZG9tIHZhcmlhYmxlIGRyYXduIGZyb20gYW4gZXhwb25lbnRpYWwgZGlzdHJpYnV0aW9uIHdpdGggbWVhbiBlcXVhbCB0byA8aW5saW5lLWZvcm11bGE+PG1tbDptYXRoIGlkPSJpbmYzOCI+PG1tbDptcm93PjxtbWw6bXJvdz48bW1sOm1vPuKMqTwvbW1sOm1vPjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+b2ZmPC9tbWw6bWk+PC9tbWw6bXN1Yj48L21tbDptcm93PjxtbWw6bW8+4oyqPC9tbWw6bW8+PC9tbWw6bXJvdz48L21tbDptcm93PjwvbW1sOm1hdGg+PC9pbmxpbmUtZm9ybXVsYT4uIDxpbmxpbmUtZm9ybXVsYT48bW1sOm1hdGggaWQ9ImluZjM5Ij48bW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bW8+4oypPC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5vZmY8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PG1tbDptbz7ijKo8L21tbDptbz48L21tbDptcm93PjwvbW1sOm1yb3c+PC9tbWw6bWF0aD48L2lubGluZS1mb3JtdWxhPiBpcyB2YXJpZWQgb3ZlciBzZXZlcmFsIG9yZGVycyBvZiBtYWduaXR1ZGUgYW5kIGlzIGNob3NlbiB0byBtYXRjaCBtZWFzdXJlZCB2YWx1ZXMgZnJvbSB0aGUgbGl0ZXJhdHVyZS4gcE1IQyBhcmUgaW5pdGlhbGx5IHBsYWNlZCBhdCBhIHJhbmRvbWx5IGxhdHRpY2UgcG9zaXRpb24gZHJhd24gZnJvbSBhIHVuaWZvcm0gZGlzdHJpYnV0aW9uLiBBZnRlciBlYWNoIHRpbWUgcGVyaW9kIChkZXRlcm1pbmVkIGJ5IDxpbmxpbmUtZm9ybXVsYT48bW1sOm1hdGggaWQ9ImluZjQwIj48bW1sOm1yb3c+PG1tbDptc3Vic3VwPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9mZjwvbW1sOm1pPjxtbWw6bWk+aTwvbW1sOm1pPjwvbW1sOm1zdWJzdXA+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+KSwgdGhlIGFnb25pc3QgcE1IQyBtb2xlY3VsZSBzdGVwcyB0byBhIG5ldyBsYXR0aWNlIHNpdGUgb3Igc3RheXMgYXQgdGhlIHNhbWUgbGF0dGljZSBzaXRlICh0aGUgbGF0dGljZSBzcGFjaW5nIGlzIHNldCB0byAxMCBubSB0byByb3VnaGx5IGZvbGxvdyB0aGUgc2l6ZSBvZiB0aGUgVENSIGNvbXBsZXggWzx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjI5Ij5OZXdlbGwgZXQgYWwuLCAyMDExPC94cmVmPjsgPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliNDYiPllpbiBldCBhbC4sIDIwMTI8L3hyZWY+XSkgdW50aWwgdGhlIGFnb25pc3QgcE1IQyBpcyBubyBsb25nZXIgb24gdGhlIFRDUiBjbHVzdGVyLCBzdWNoIHRoYXQgPGlubGluZS1mb3JtdWxhPjxtbWw6bWF0aCBpZD0iaW5mNDEiPjxtbWw6bXJvdz48bW1sOm1zdWJzdXA+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+ZXNjPC9tbWw6bWk+PG1tbDptaT5rPC9tbWw6bWk+PC9tbWw6bXN1YnN1cD48bW1sOm1vPj08L21tbDptbz48bW1sOm1zdHlsZSBkaXNwbGF5c3R5bGU9InRydWUiPjxtbWw6bXVuZGVyb3Zlcj48bW1sOm1vPuKIkTwvbW1sOm1vPjxtbWw6bXJvdz48bW1sOm1pPmk8L21tbDptaT48bW1sOm1vPj08L21tbDptbz48bW1sOm1uPjA8L21tbDptbj48L21tbDptcm93PjxtbWw6bWk+bjwvbW1sOm1pPjwvbW1sOm11bmRlcm92ZXI+PG1tbDptcm93PjxtbWw6bXN1YnN1cD48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5vZmY8L21tbDptaT48bW1sOm1pPmk8L21tbDptaT48L21tbDptc3Vic3VwPjwvbW1sOm1yb3c+PC9tbWw6bXN0eWxlPjxtbWw6bW8+KzwvbW1sOm1vPjxtbWw6bXN0eWxlIGRpc3BsYXlzdHlsZT0idHJ1ZSI+PG1tbDptdW5kZXJvdmVyPjxtbWw6bW8+4oiRPC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bWk+aTwvbW1sOm1pPjxtbWw6bW8+PTwvbW1sOm1vPjxtbWw6bW4+MTwvbW1sOm1uPjwvbW1sOm1yb3c+PG1tbDptaT5uPC9tbWw6bWk+PC9tbWw6bXVuZGVyb3Zlcj48bW1sOm1yb3c+PG1tbDptc3Vic3VwPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9uPC9tbWw6bWk+PG1tbDptaT5pPC9tbWw6bWk+PC9tbWw6bXN1YnN1cD48L21tbDptcm93PjwvbW1sOm1zdHlsZT48bW1sOm1vPis8L21tbDptbz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+ZXhpdDwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+LCB3aGVyZSA8aXRhbGljPm48L2l0YWxpYz4gaW5kaWNhdGVzIHRoZSBudW1iZXIgb2Ygc3RlcHMgYW4gaW5kaXZpZHVhbCBhZ29uaXN0IHBNSEMgbW9sZWN1bGUgdGFrZXMgYmVmb3JlIGV4aXRpbmcgdGhlIFRDUiBjbHVzdGVyLCA8aW5saW5lLWZvcm11bGE+PG1tbDptYXRoIGlkPSJpbmY0MiI+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5vbjwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+IGlzIHRoZSB0aW1lIHBlcmlvZCBiZXR3ZWVuIHVuYmluZGluZyBhbmQgYmluZGluZyBldmVudHMsIGFuZCA8aW5saW5lLWZvcm11bGE+PG1tbDptYXRoIGlkPSJpbmY0MyI+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5leGl0PC9tbWw6bWk+PC9tbWw6bXN1Yj48L21tbDptcm93PjwvbW1sOm1hdGg+PC9pbmxpbmUtZm9ybXVsYT4gaXMgdGhlIHRpbWUgYmV0d2VlbiB0aGUgbGFzdCB1bmJpbmRpbmcgZXZlbnQgYW5kIHRoZSB1bHRpbWF0ZSBleGl0IGZyb20gdGhlIFRDUiBjbHVzdGVyLiBTdGVwIHNpemUgaXMgdHJlYXRlZCBhcyBhIGNvbWJpbmF0aW9uIG9mIHR3byBpbmRlcGVuZGVudCByYW5kb20gdmFyaWFibGVzLCAoPGlubGluZS1mb3JtdWxhPjxtbWw6bWF0aCBpZD0iaW5mNDQiPjxtbWw6bXJvdz48bW1sOm1pPs6UPC9tbWw6bWk+PG1tbDptaT54PC9tbWw6bWk+PG1tbDptbz4sPC9tbWw6bW8+PG1tbDptaT7OlDwvbW1sOm1pPjxtbWw6bWk+eTwvbW1sOm1pPjwvbW1sOm1yb3c+PC9tbWw6bWF0aD48L2lubGluZS1mb3JtdWxhPiwpIGRyYXduIGZyb20gR2F1c3NpYW4gZGlzdHJpYnV0aW9ucyB3aXRoIG1lYW4gMCBhbmQgc3RhbmRhcmQgZGV2aWF0aW9uIDxpbmxpbmUtZm9ybXVsYT48bW1sOm1hdGggaWQ9ImluZjQ1Ij48bW1sOm1yb3c+PG1tbDptc3FydD48bW1sOm1yb3c+PG1tbDptbj4yPC9tbWw6bW4+PG1tbDptc3ViPjxtbWw6bWk+RDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+U0xCPC9tbWw6bWk+PC9tbWw6bXN1Yj48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+b248L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PC9tbWw6bXNxcnQ+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+LiBUaGUgc3RlcCBzaXplIGlzIHRoZW4gYSByYW5kb20gdmFyaWFibGUgPGlubGluZS1mb3JtdWxhPjxtbWw6bWF0aCBpZD0iaW5mNDYiPjxtbWw6bXJvdz48bW1sOm1pPs6UPC9tbWw6bWk+PG1tbDptaT5yPC9tbWw6bWk+PG1tbDptbz49PC9tbWw6bW8+PG1tbDptc3FydD48bW1sOm1yb3c+PG1tbDptaT7OlDwvbW1sOm1pPjxtbWw6bXN1cD48bW1sOm1pPng8L21tbDptaT48bW1sOm1uPjI8L21tbDptbj48L21tbDptc3VwPjxtbWw6bW8+KzwvbW1sOm1vPjxtbWw6bWk+zpQ8L21tbDptaT48bW1sOm1zdXA+PG1tbDptaT55PC9tbWw6bWk+PG1tbDptbj4yPC9tbWw6bW4+PC9tbWw6bXN1cD48L21tbDptcm93PjwvbW1sOm1zcXJ0PjwvbW1sOm1yb3c+PC9tbWw6bWF0aD48L2lubGluZS1mb3JtdWxhPiBhbmQgdGhlIGFuZ2xlIG9mIGRpc3BsYWNlbWVudCBpcyBkcmF3biBmcm9tIGEgdW5pZm9ybSBkaXN0cmlidXRpb24uIFRoZSBpbnRlcnZhbCBiZXR3ZWVuIGJpbmRpbmcgZXZlbnRzLCA8aW5saW5lLWZvcm11bGE+PG1tbDptYXRoIGlkPSJpbmY0NyI+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5vbjwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+LCBpcyB0cmVhdGVkIGFzIGEgcmFuZG9tIHZhcmlhYmxlIGRyYXduIGZyb20gYW4gZXhwb25lbnRpYWwgZGlzdHJpYnV0aW9uIHdpdGggbWVhbiA8aXRhbGljPms8L2l0YWxpYz48c3ViPjxpdGFsaWM+b248L2l0YWxpYz48L3N1Yj4gPGlubGluZS1mb3JtdWxhPjxtbWw6bWF0aCBpZD0iaW5mNDgiPjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PgTwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+VENSPC9tbWw6bWk+PC9tbWw6bXN1Yj48L21tbDptcm93PjwvbW1sOm1hdGg+PC9pbmxpbmUtZm9ybXVsYT4gd2hlcmUgdGhlIGRlbnNpdHkgb2YgVENSLCA8aW5saW5lLWZvcm11bGE+PG1tbDptYXRoIGlkPSJpbmY0OSI+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+BPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5UQ1I8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PC9tbWw6bWF0aD48L2lubGluZS1mb3JtdWxhPiwgaXMgdGFrZW4gdG8gYmUgMTAsMDAwIG1vbGVjdWxlcy/CtW08c3VwPjI8L3N1cD4gKGFzIGluIHRoZSBjZW50cmFsIHN1cHJhbW9sZWN1bGFyIGFjdGl2YXRpb24gY2x1c3RlcikuIEluIHRoaXMgd2F5IDxpbmxpbmUtZm9ybXVsYT48bW1sOm1hdGggaWQ9ImluZjUwIj48bW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bW8+4oypPC9tbWw6bW8+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5vZmY8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PG1tbDptbz7ijKo8L21tbDptbz48L21tbDptcm93PjxtbWw6bW8+PTwvbW1sOm1vPjxtbWw6bWZyYWM+PG1tbDptbj4xPC9tbWw6bW4+PG1tbDptaT5rPC9tbWw6bWk+PC9tbWw6bWZyYWM+PG1tbDptc3R5bGUgZGlzcGxheXN0eWxlPSJ0cnVlIj48bW1sOm11bmRlcj48bW1sOm1vPuKIkTwvbW1sOm1vPjxtbWw6bWk+azwvbW1sOm1pPjwvbW1sOm11bmRlcj48bW1sOm1yb3c+PG1tbDptc3Vic3VwPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPmVzYzwvbW1sOm1pPjxtbWw6bWk+azwvbW1sOm1pPjwvbW1sOm1zdWJzdXA+PC9tbWw6bXJvdz48L21tbDptc3R5bGU+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+LCB3aGVyZSA8aXRhbGljPms8L2l0YWxpYz4gaXMgdGhlIG51bWJlciBvZiBpdGVyYXRpb25zICgxMDAgaW4gdGhlIGNhc2Ugb2YgPHhyZWYgcmVmLXR5cGU9ImZpZyIgcmlkPSJmaWc2Ij5GaWd1cmUgNjwveHJlZj4gYW5kIDx4cmVmIHJlZi10eXBlPSJmaWciIHJpZD0iZmlnNnMxIj5GaWd1cmUgNuKAlGZpZ3VyZSBzdXBwbGVtZW50IDE8L3hyZWY+KSwgaXMgY2FsY3VsYXRlZCBmb3IgZXZlcnkgY29tYmluYXRpb24gb2YgPGlubGluZS1mb3JtdWxhPjxtbWw6bWF0aCBpZD0iaW5mNTEiPjxtbWw6bXJvdz48bW1sOm1yb3c+PG1tbDptbz7ijKk8L21tbDptbz48bW1sOm1yb3c+PG1tbDptc3ViPjxtbWw6bWk+z4Q8L21tbDptaT48bW1sOm1pIG1hdGh2YXJpYW50PSJpdGFsaWMiPm9mZjwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48bW1sOm1vPuKMqjwvbW1sOm1vPjwvbW1sOm1yb3c+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+LCBUQ1IgY2x1c3RlciBzaXplLCBhbmQgPGl0YWxpYz5rPC9pdGFsaWM+PHN1Yj48aXRhbGljPm9uPC9pdGFsaWM+PC9zdWI+LiBOb3RlIHRoYXQgc2luY2UgPGlubGluZS1mb3JtdWxhPjxtbWw6bWF0aCBpZD0iaW5mNTIiPjxtbWw6bXJvdz48bW1sOm1zdWI+PG1tbDptaT7PhDwvbW1sOm1pPjxtbWw6bWkgbWF0aHZhcmlhbnQ9Iml0YWxpYyI+b2ZmPC9tbWw6bWk+PC9tbWw6bXN1Yj48bW1sOm1vPuKJqzwvbW1sOm1vPjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5vbjwvbW1sOm1pPjwvbW1sOm1zdWI+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+LCA8aW5saW5lLWZvcm11bGE+PG1tbDptYXRoIGlkPSJpbmY1MyI+PG1tbDptcm93PjxtbWw6bWZyYWM+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5lc2M8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5vZmY8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PC9tbWw6bWZyYWM+PG1tbDptbz7iiYg8L21tbDptbz48bW1sOm1yb3c+PG1tbDptbz7ijKk8L21tbDptbz48bW1sOm1pPm48L21tbDptaT48bW1sOm1vPuKMqjwvbW1sOm1vPjwvbW1sOm1yb3c+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+LCB3aGVyZSA8aW5saW5lLWZvcm11bGE+PG1tbDptYXRoIGlkPSJpbmY1NCI+PG1tbDptcm93PjxtbWw6bXJvdz48bW1sOm1vPuKMqTwvbW1sOm1vPjxtbWw6bWk+bjwvbW1sOm1pPjxtbWw6bW8+4oyqPC9tbWw6bW8+PC9tbWw6bXJvdz48L21tbDptcm93PjwvbW1sOm1hdGg+PC9pbmxpbmUtZm9ybXVsYT4gaXMgZXF1aXZhbGVudCB0byB0aGUgVENSIGNsdXN0ZXIgc2l6ZS4gVGhpcyByZWxhdGlvbnNoaXAgYmV0d2VlbiA8aW5saW5lLWZvcm11bGE+PG1tbDptYXRoIGlkPSJpbmY1NSI+PG1tbDptcm93PjxtbWw6bWZyYWM+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5lc2M8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PG1tbDptcm93PjxtbWw6bXN1Yj48bW1sOm1pPs+EPC9tbWw6bWk+PG1tbDptaSBtYXRodmFyaWFudD0iaXRhbGljIj5vZmY8L21tbDptaT48L21tbDptc3ViPjwvbW1sOm1yb3c+PC9tbWw6bWZyYWM+PC9tbWw6bXJvdz48L21tbDptYXRoPjwvaW5saW5lLWZvcm11bGE+IGFuZCBUQ1IgY2x1c3RlciBzaXplIGNhbiBiZSBzZWVuIGluIDx4cmVmIHJlZi10eXBlPSJmaWciIHJpZD0iZmlnNnMxIj5GaWd1cmUgNuKAlGZpZ3VyZSBzdXBwbGVtZW50IDE8L3hyZWY+LiBJdCBpcyBwb3NzaWJsZSB0aGF0IGFnb25pc3QgcE1IQyBiaW5kaW5nIGludGVyYWN0aW9ucyB3aXRoIENENCBjb3VsZCBzbG93IHRoZSBtb2JpbGl0eSBvZiBhbiBpbmRpdmlkdWFsIGFnb25pc3QgcE1IQyB3aXRoaW4gYSBUQ1IgY2x1c3RlciByZWxhdGl2ZSB0byA8aXRhbGljPkQ8L2l0YWxpYz48c3ViPjxpdGFsaWM+U0xCPC9pdGFsaWM+PC9zdWI+IHdoZW4gdGhlIGFnb25pc3QgcE1IQyBhcmUgdW5ib3VuZCBmcm9tIFRDUi4gVGhpcyBjb3VsZCBoeXBvdGhldGljYWxseSBsZWFkIHRvIGVudHJhcG1lbnQgYW5kIGxvbmcgc2luZ2xlIG1vbGVjdWxlIHRyYWNrcyAobGlrZSB0aG9zZSByZXBvcnRlZCBoZXJlKSBpbiB0aGUgYWJzZW5jZSBvZiBkaXJlY3QsIHN1c3RhaW5lZCBhZ29uaXN0IHBNSEMtVENSIGludGVyYWN0aW9ucy4gV2hpbGUgc3VjaCBhIG1lY2hhbmlzbSBpcyBjb25jZWl2YWJsZSwgdGhlcmUgaXMgbm8gZGlyZWN0IGV2aWRlbmNlIGZvciBzdWNoIGEgdGV0aGVyaW5nIG1lY2hhbmlzbSBpbiB0aGUgbGl0ZXJhdHVyZS48L3A+CiAgICAgIDwvc2VjPgogICAgPC9zZWM+CiAgPC9ib2R5PgogIDxiYWNrPgogICAgPGFjayBpZD0iYWNrIj4KICAgICAgPHRpdGxlPkFja25vd2xlZGdlbWVudHM8L3RpdGxlPgogICAgICA8cD5UaGUgY29udGVudCBpcyBzb2xlbHkgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSBhdXRob3JzIGFuZCBkb2VzIG5vdCBuZWNlc3NhcmlseSByZXByZXNlbnQgdGhlIG9mZmljaWFsIHZpZXdzIG9mIHRoZSBOYXRpb25hbCBJbnN0aXR1dGVzIG9mIEhlYWx0aC4gV2UgdGhhbmsgRGF2aWQgS2luZyBvZiB0aGUgSEhNSSBNYXNzIFNwZWMgRmFjaWxpdHkgZm9yIHBlcHRpZGUgc3ludGhlc2lzIGFuZCBNYXNzIFNwZWN0cm9zY29weSwgTmljb2xlIEZheSwgS2F0ZSBBbGZpZXJpLCBhbmQgTmnDsWEgSGFydG1hbiBmb3IgTUhDIHB1cmlmaWNhdGlvbiwgYW5kIEJyaWFuIEQgQmVsYXJkaSBmb3IgYSBjcml0aWNhbCByZWFkaW5nIG9mIHRoZSBtYW51c2NyaXB0LjwvcD4KICAgIDwvYWNrPgogICAgPHNlYyBzZWMtdHlwZT0iYWRkaXRpb25hbC1pbmZvcm1hdGlvbiI+CiAgICAgIDx0aXRsZT5BZGRpdGlvbmFsIGluZm9ybWF0aW9uPC90aXRsZT4KICAgICAgPGZuLWdyb3VwIGNvbnRlbnQtdHlwZT0iY29tcGV0aW5nLWludGVyZXN0Ij4KICAgICAgICA8dGl0bGU+Q29tcGV0aW5nIGludGVyZXN0czwvdGl0bGU+CiAgICAgICAgPGZuIGZuLXR5cGU9ImNvbmZsaWN0IiBpZD0iY29uZjEiPgogICAgICAgICAgPHA+VGhlIGF1dGhvcnMgZGVjbGFyZSB0aGF0IG5vIGNvbXBldGluZyBpbnRlcmVzdHMgZXhpc3QuPC9wPgogICAgICAgIDwvZm4+CiAgICAgIDwvZm4tZ3JvdXA+CiAgICAgIDxmbi1ncm91cCBjb250ZW50LXR5cGU9ImF1dGhvci1jb250cmlidXRpb24iPgogICAgICAgIDx0aXRsZT5BdXRob3IgY29udHJpYnV0aW9uczwvdGl0bGU+CiAgICAgICAgPGZuIGZuLXR5cGU9ImNvbiIgaWQ9ImNvbjEiPgogICAgICAgICAgPHA+R1BPLCBDb25jZXB0aW9uIGFuZCBkZXNpZ24sIEFjcXVpc2l0aW9uIG9mIGRhdGEsIEFuYWx5c2lzIGFuZCBpbnRlcnByZXRhdGlvbiBvZiBkYXRhLCBEcmFmdGluZyBvciByZXZpc2luZyB0aGUgYXJ0aWNsZTwvcD4KICAgICAgICA8L2ZuPgogICAgICAgIDxmbiBmbi10eXBlPSJjb24iIGlkPSJjb24yIj4KICAgICAgICAgIDxwPlJNUCwgQ29uY2VwdGlvbiBhbmQgZGVzaWduLCBBY3F1aXNpdGlvbiBvZiBkYXRhLCBBbmFseXNpcyBhbmQgaW50ZXJwcmV0YXRpb24gb2YgZGF0YSwgRHJhZnRpbmcgb3IgcmV2aXNpbmcgdGhlIGFydGljbGU8L3A+CiAgICAgICAgPC9mbj4KICAgICAgICA8Zm4gZm4tdHlwZT0iY29uIiBpZD0iY29uMyI+CiAgICAgICAgICA8cD5BQVMsIEFjcXVpc2l0aW9uIG9mIGRhdGEsIERyYWZ0aW5nIG9yIHJldmlzaW5nIHRoZSBhcnRpY2xlPC9wPgogICAgICAgIDwvZm4+CiAgICAgICAgPGZuIGZuLXR5cGU9ImNvbiIgaWQ9ImNvbjQiPgogICAgICAgICAgPHA+SkpMLCBBY3F1aXNpdGlvbiBvZiBkYXRhLCBEcmFmdGluZyBvciByZXZpc2luZyB0aGUgYXJ0aWNsZTwvcD4KICAgICAgICA8L2ZuPgogICAgICAgIDxmbiBmbi10eXBlPSJjb24iIGlkPSJjb241Ij4KICAgICAgICAgIDxwPkpURywgQ29uY2VwdGlvbiBhbmQgZGVzaWduLCBBbmFseXNpcyBhbmQgaW50ZXJwcmV0YXRpb24gb2YgZGF0YSwgRHJhZnRpbmcgb3IgcmV2aXNpbmcgdGhlIGFydGljbGU8L3A+CiAgICAgICAgPC9mbj4KICAgICAgPC9mbi1ncm91cD4KICAgICAgPGZuLWdyb3VwIGNvbnRlbnQtdHlwZT0iZXRoaWNzLWluZm9ybWF0aW9uIj4KICAgICAgICA8dGl0bGU+RXRoaWNzPC90aXRsZT4KICAgICAgICA8Zm4gZm4tdHlwZT0ib3RoZXIiPgogICAgICAgICAgPHA+QW5pbWFsIGV4cGVyaW1lbnRhdGlvbjogQ0Q0KyBULWNlbGwgYmxhc3RzIHdlcmUgY3VsdHVyZWQgZnJvbSB0aGUgbHltcGggbm9kZXMgYW5kIHNwbGVlbnMgb2YgZmlyc3QgZ2VuZXJhdGlvbiBBTkQgeCBCMTAuQlIgYW5kIDVjLmM3IFRDUiB0cmFuc2dlbmljIG1pY2Ugb24gZGF5IDEgb2YgdGhlIFQtY2VsbCBwcm90b2NvbCBpbiBhY2NvcmRhbmNlIHdpdGggTGF3cmVuY2UgQmVya2VsZXkgTmF0aW9uYWwgTGFib3JhdG9yeSBBbmltYWwgV2VsZmFyZSBhbmQgUmVzZWFyY2ggQ29tbWl0dGVlLWFwcHJvdmVkIHByb3RvY29sIDE3NzAyLjwvcD4KICAgICAgICA8L2ZuPgogICAgICA8L2ZuLWdyb3VwPgogICAgPC9zZWM+CiAgICA8cmVmLWxpc3Q+CiAgICAgIDx0aXRsZT5SZWZlcmVuY2VzPC90aXRsZT4KICAgICAgPHJlZiBpZD0iYmliMSI+CiAgICAgICAgPGVsZW1lbnQtY2l0YXRpb24gcHVibGljYXRpb24tdHlwZT0iam91cm5hbCI+CiAgICAgICAgICA8cGVyc29uLWdyb3VwIHBlcnNvbi1ncm91cC10eXBlPSJhdXRob3IiPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5BZGFtczwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+Sko8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPk5hcmF5YW5hbjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+UzwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+TGl1PC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5CPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5CaXJuYmF1bTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+TUU8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPktydXNlPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5BQzwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+Qm93ZXJtYW48L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPk5BPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8ZXRhbC8+CiAgICAgICAgICA8L3BlcnNvbi1ncm91cD4KICAgICAgICAgIDx5ZWFyPjIwMTE8L3llYXI+CiAgICAgICAgICA8YXJ0aWNsZS10aXRsZT5UIGNlbGwgcmVjZXB0b3Igc2lnbmFsaW5nIGlzIGxpbWl0ZWQgYnkgZG9ja2luZyBnZW9tZXRyeSB0byBwZXB0aWRlLW1ham9yIGhpc3RvY29tcGF0aWJpbGl0eSBjb21wbGV4PC9hcnRpY2xlLXRpdGxlPgogICAgICAgICAgPHNvdXJjZT5JbW11bml0eTwvc291cmNlPgogICAgICAgICAgPHZvbHVtZT4zNTwvdm9sdW1lPgogICAgICAgICAgPGZwYWdlPjY4MTwvZnBhZ2U+CiAgICAgICAgICA8bHBhZ2U+OTM8L2xwYWdlPgogICAgICAgICAgPHB1Yi1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC4xMDE2L2ouaW1tdW5pLjIwMTEuMDkuMDEzPC9wdWItaWQ+CiAgICAgICAgPC9lbGVtZW50LWNpdGF0aW9uPgogICAgICA8L3JlZj4KICAgICAgPHJlZiBpZD0iYmliMWEiPgogICAgICAgIDxlbGVtZW50LWNpdGF0aW9uIHB1YmxpY2F0aW9uLXR5cGU9ImpvdXJuYWwiPgogICAgICAgICAgPHBlcnNvbi1ncm91cCBwZXJzb24tZ3JvdXAtdHlwZT0iYXV0aG9yIj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+QWx0YW4tQm9ubmV0PC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5HPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5HZXJtYWluPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5STjwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgIDwvcGVyc29uLWdyb3VwPgogICAgICAgICAgPHllYXI+MjAwNTwveWVhcj4KICAgICAgICAgIDxhcnRpY2xlLXRpdGxlPk1vZGVsaW5nIFQgQ2VsbCBhbnRpZ2VuIGRpc2NyaW1pbmF0aW9uIGJhc2VkIG9uIGZlZWRiYWNrIGNvbnRyb2wgb2YgZGlnaXRhbCBFUksgcmVzcG9uc2VzPC9hcnRpY2xlLXRpdGxlPgogICAgICAgICAgPHNvdXJjZT5QTG9TIEJpb2w8L3NvdXJjZT4KICAgICAgICAgIDx2b2x1bWU+Mzwvdm9sdW1lPgogICAgICAgICAgPGZwYWdlPmUzNTY8L2ZwYWdlPgogICAgICAgICAgPHB1Yi1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC4xMzcxL2pvdXJuYWwucGJpby4wMDMwMzU2PC9wdWItaWQ+CiAgICAgICAgPC9lbGVtZW50LWNpdGF0aW9uPgogICAgICA8L3JlZj4KICAgICAgPHJlZiBpZD0iYmliMiI+CiAgICAgICAgPGVsZW1lbnQtY2l0YXRpb24gcHVibGljYXRpb24tdHlwZT0iam91cm5hbCI+CiAgICAgICAgICA8cGVyc29uLWdyb3VwIHBlcnNvbi1ncm91cC10eXBlPSJhdXRob3IiPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5BeG1hbm48L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPk08L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkh1cHBhPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5KQjwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+RGF2aXM8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPk1NPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5TY2jDvHR6PC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5HSjwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgIDwvcGVyc29uLWdyb3VwPgogICAgICAgICAgPHllYXI+MjAxMjwveWVhcj4KICAgICAgICAgIDxhcnRpY2xlLXRpdGxlPkRldGVybWluYXRpb24gb2YgaW50ZXJhY3Rpb24ga2luZXRpY3MgYmV0d2VlbiB0aGUgVCBjZWxsIHJlY2VwdG9yIGFuZCBwZXB0aWRlLWxvYWRlZCBNSEMgY2xhc3MgSUkgdmlhIHNpbmdsZS1tb2xlY3VsZSBkaWZmdXNpb24gbWVhc3VyZW1lbnRzPC9hcnRpY2xlLXRpdGxlPgogICAgICAgICAgPHNvdXJjZT5CaW9waHlzIEo8L3NvdXJjZT4KICAgICAgICAgIDx2b2x1bWU+MTAzPC92b2x1bWU+CiAgICAgICAgICA8ZnBhZ2U+TDE3PC9mcGFnZT4KICAgICAgICAgIDxscGFnZT45PC9scGFnZT4KICAgICAgICAgIDxwdWItaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuMTAxNi9qLmJwai4yMDEyLjA2LjAxOTwvcHViLWlkPgogICAgICAgIDwvZWxlbWVudC1jaXRhdGlvbj4KICAgICAgPC9yZWY+CiAgICAgIDxyZWYgaWQ9ImJpYjMiPgogICAgICAgIDxlbGVtZW50LWNpdGF0aW9uIHB1YmxpY2F0aW9uLXR5cGU9ImpvdXJuYWwiPgogICAgICAgICAgPHBlcnNvbi1ncm91cCBwZXJzb24tZ3JvdXAtdHlwZT0iYXV0aG9yIj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+QnVubmVsbDwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+U0M8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkhvbmc8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkRJPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5LYXJkb248L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkpSPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5ZYW1hemFraTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+VDwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+TWNHbGFkZTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+Q0o8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkJhcnI8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPlZBPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8ZXRhbC8+CiAgICAgICAgICA8L3BlcnNvbi1ncm91cD4KICAgICAgICAgIDx5ZWFyPjIwMDI8L3llYXI+CiAgICAgICAgICA8YXJ0aWNsZS10aXRsZT5UIGNlbGwgcmVjZXB0b3IgbGlnYXRpb24gaW5kdWNlcyB0aGUgZm9ybWF0aW9uIG9mIGR5bmFtaWNhbGx5IHJlZ3VsYXRlZCBzaWduYWxpbmcgYXNzZW1ibGllczwvYXJ0aWNsZS10aXRsZT4KICAgICAgICAgIDxzb3VyY2U+SiBDZWxsIEJpb2w8L3NvdXJjZT4KICAgICAgICAgIDx2b2x1bWU+MTU4PC92b2x1bWU+CiAgICAgICAgICA8ZnBhZ2U+MTI2MzwvZnBhZ2U+CiAgICAgICAgICA8bHBhZ2U+NzU8L2xwYWdlPgogICAgICAgICAgPHB1Yi1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC4xMDgzL2pjYi4yMDAyMDMwNDM8L3B1Yi1pZD4KICAgICAgICA8L2VsZW1lbnQtY2l0YXRpb24+CiAgICAgIDwvcmVmPgogICAgICA8cmVmIGlkPSJiaWI0Ij4KICAgICAgICA8ZWxlbWVudC1jaXRhdGlvbiBwdWJsaWNhdGlvbi10eXBlPSJqb3VybmFsIj4KICAgICAgICAgIDxwZXJzb24tZ3JvdXAgcGVyc29uLWdyb3VwLXR5cGU9ImF1dGhvciI+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkJ1cnJvdWdoczwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+Tko8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPld1bGZpbmc8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkM8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICA8L3BlcnNvbi1ncm91cD4KICAgICAgICAgIDx5ZWFyPjIwMDI8L3llYXI+CiAgICAgICAgICA8YXJ0aWNsZS10aXRsZT5EaWZmZXJlbnRpYWwgc2VncmVnYXRpb24gaW4gYSBjZWxsLWNlbGwgY29udGFjdCBpbnRlcmZhY2U6IHRoZSBkeW5hbWljcyBvZiB0aGUgaW1tdW5vbG9naWNhbCBzeW5hcHNlPC9hcnRpY2xlLXRpdGxlPgogICAgICAgICAgPHNvdXJjZT5CaW9waHlzIEo8L3NvdXJjZT4KICAgICAgICAgIDx2b2x1bWU+ODM8L3ZvbHVtZT4KICAgICAgICAgIDxmcGFnZT4xNzg0PC9mcGFnZT4KICAgICAgICAgIDxscGFnZT45NjwvbHBhZ2U+CiAgICAgICAgICA8cHViLWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjEwMTYvUzAwMDYtMzQ5NSgwMik3Mzk0NC0xPC9wdWItaWQ+CiAgICAgICAgPC9lbGVtZW50LWNpdGF0aW9uPgogICAgICA8L3JlZj4KICAgICAgPHJlZiBpZD0iYmliNSI+CiAgICAgICAgPGVsZW1lbnQtY2l0YXRpb24gcHVibGljYXRpb24tdHlwZT0iam91cm5hbCI+CiAgICAgICAgICA8cGVyc29uLWdyb3VwIHBlcnNvbi1ncm91cC10eXBlPSJhdXRob3IiPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5DYW1waTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+RzwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+VmFybWE8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPlI8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkR1c3Rpbjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+TUw8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICA8L3BlcnNvbi1ncm91cD4KICAgICAgICAgIDx5ZWFyPjIwMDU8L3llYXI+CiAgICAgICAgICA8YXJ0aWNsZS10aXRsZT5BY3RpbiBhbmQgYWdvbmlzdCBNSEMtcGVwdGlkZSBjb21wbGV4LWRlcGVuZGVudCBUIGNlbGwgcmVjZXB0b3IgbWljcm9jbHVzdGVycyBhcyBzY2FmZm9sZHMgZm9yIHNpZ25hbGluZzwvYXJ0aWNsZS10aXRsZT4KICAgICAgICAgIDxzb3VyY2U+SiBFeHAgTWVkPC9zb3VyY2U+CiAgICAgICAgICA8dm9sdW1lPjIwMjwvdm9sdW1lPgogICAgICAgICAgPGZwYWdlPjEwMzE8L2ZwYWdlPgogICAgICAgICAgPGxwYWdlPjY8L2xwYWdlPgogICAgICAgICAgPHB1Yi1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC4xMDg0L2plbS4yMDA1MTE4MjwvcHViLWlkPgogICAgICAgIDwvZWxlbWVudC1jaXRhdGlvbj4KICAgICAgPC9yZWY+CiAgICAgIDxyZWYgaWQ9ImJpYjVhIj4KICAgICAgICA8ZWxlbWVudC1jaXRhdGlvbiBwdWJsaWNhdGlvbi10eXBlPSJqb3VybmFsIj4KICAgICAgICAgIDxwZXJzb24tZ3JvdXAgcGVyc29uLWdyb3VwLXR5cGU9ImF1dGhvciI+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkNoYW48L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkM8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPlN0YXJrPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5KPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5HZW9yZ2U8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkFKPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgPC9wZXJzb24tZ3JvdXA+CiAgICAgICAgICA8eWVhcj4yMDA0PC95ZWFyPgogICAgICAgICAgPGFydGljbGUtdGl0bGU+RmVlZGJhY2sgY29udHJvbCBvZiBULWNlbGwgcmVjZXB0b3IgYWN0aXZhdGlvbjwvYXJ0aWNsZS10aXRsZT4KICAgICAgICAgIDxzb3VyY2U+UHJvYyBCaW9sIFNjaTwvc291cmNlPgogICAgICAgICAgPHZvbHVtZT4yNzE8L3ZvbHVtZT4KICAgICAgICAgIDxmcGFnZT45MzE8L2ZwYWdlPgogICAgICAgICAgPGxwYWdlPjk8L2xwYWdlPgogICAgICAgICAgPHB1Yi1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC4xMDk4L3JzcGIuMjAwMy4yNTg3PC9wdWItaWQ+CiAgICAgICAgPC9lbGVtZW50LWNpdGF0aW9uPgogICAgICA8L3JlZj4KICAgICAgPHJlZiBpZD0iYmliNiI+CiAgICAgICAgPGVsZW1lbnQtY2l0YXRpb24gcHVibGljYXRpb24tdHlwZT0iam91cm5hbCI+CiAgICAgICAgICA8cGVyc29uLWdyb3VwIHBlcnNvbi1ncm91cC10eXBlPSJhdXRob3IiPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5Db29wZXI8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkpBPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5RaWFuPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5IPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgPC9wZXJzb24tZ3JvdXA+CiAgICAgICAgICA8eWVhcj4yMDA4PC95ZWFyPgogICAgICAgICAgPGFydGljbGUtdGl0bGU+QSBtZWNoYW5pc20gZm9yIFNyYyBraW5hc2UtZGVwZW5kZW50IHNpZ25hbGluZyBieSBub25jYXRhbHl0aWMgcmVjZXB0b3JzPC9hcnRpY2xlLXRpdGxlPgogICAgICAgICAgPHNvdXJjZT5CaW9jaGVtaXN0cnk8L3NvdXJjZT4KICAgICAgICAgIDx2b2x1bWU+NDc8L3ZvbHVtZT4KICAgICAgICAgIDxmcGFnZT41NjgxPC9mcGFnZT4KICAgICAgICAgIDxscGFnZT44PC9scGFnZT4KICAgICAgICAgIDxwdWItaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuMTAyMS9iaTgwMDMwNDQ8L3B1Yi1pZD4KICAgICAgICA8L2VsZW1lbnQtY2l0YXRpb24+CiAgICAgIDwvcmVmPgogICAgICA8cmVmIGlkPSJiaWI3Ij4KICAgICAgICA8ZWxlbWVudC1jaXRhdGlvbiBwdWJsaWNhdGlvbi10eXBlPSJqb3VybmFsIj4KICAgICAgICAgIDxwZXJzb24tZ3JvdXAgcGVyc29uLWdyb3VwLXR5cGU9ImF1dGhvciI+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkNvcnNlPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5FPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5Hb3R0c2NoYWxrPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5SQTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+S3JvZ3NnYWFyZDwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+TTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+QWxsaXNvbjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+SlA8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICA8L3BlcnNvbi1ncm91cD4KICAgICAgICAgIDx5ZWFyPjIwMTA8L3llYXI+CiAgICAgICAgICA8YXJ0aWNsZS10aXRsZT5BdHRlbnVhdGVkIFQgY2VsbCByZXNwb25zZXMgdG8gYSBoaWdoLXBvdGVuY3kgbGlnYW5kIGluIHZpdm88L2FydGljbGUtdGl0bGU+CiAgICAgICAgICA8c291cmNlPlBMT1MgQmlvbDwvc291cmNlPgogICAgICAgICAgPHZvbHVtZT44PC92b2x1bWU+CiAgICAgICAgICA8ZnBhZ2U+ZTEwMDA0ODE8L2ZwYWdlPgogICAgICAgICAgPHB1Yi1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC4xMzcxL2pvdXJuYWwucGJpby4xMDAwNDgxPC9wdWItaWQ+CiAgICAgICAgPC9lbGVtZW50LWNpdGF0aW9uPgogICAgICA8L3JlZj4KICAgICAgPHJlZiBpZD0iYmliOCI+CiAgICAgICAgPGVsZW1lbnQtY2l0YXRpb24gcHVibGljYXRpb24tdHlwZT0iam91cm5hbCI+CiAgICAgICAgICA8cGVyc29uLWdyb3VwIHBlcnNvbi1ncm91cC10eXBlPSJhdXRob3IiPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5Dcm9ja2VyPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5KQzwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+R3JpZXI8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkRHPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgPC9wZXJzb24tZ3JvdXA+CiAgICAgICAgICA8eWVhcj4xOTk2PC95ZWFyPgogICAgICAgICAgPGFydGljbGUtdGl0bGU+TWV0aG9kcyBvZiBkaWdpdGFsIHZpZGVvIG1pY3Jvc2NvcHkgZm9yIGNvbGxvaWRhbCBzdHVkaWVzPC9hcnRpY2xlLXRpdGxlPgogICAgICAgICAgPHNvdXJjZT5KIENvbGxvaWQgSW50ZXJmYWNlIFNjaTwvc291cmNlPgogICAgICAgICAgPHZvbHVtZT4xNzk8L3ZvbHVtZT4KICAgICAgICAgIDxmcGFnZT4yOTg8L2ZwYWdlPgogICAgICAgICAgPGxwYWdlPjMxMDwvbHBhZ2U+CiAgICAgICAgICA8cHViLWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjEwMDYvamNpcy4xOTk2LjAyMTc8L3B1Yi1pZD4KICAgICAgICA8L2VsZW1lbnQtY2l0YXRpb24+CiAgICAgIDwvcmVmPgogICAgICA8cmVmIGlkPSJiaWI4YSI+CiAgICAgICAgPGVsZW1lbnQtY2l0YXRpb24gcHVibGljYXRpb24tdHlwZT0iam91cm5hbCI+CiAgICAgICAgICA8cGVyc29uLWdyb3VwIHBlcnNvbi1ncm91cC10eXBlPSJhdXRob3IiPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5EYXM8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPko8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkhvPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5NPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5aaWtoZXJtYW48L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPko8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkdvdmVybjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+QzwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+WWFuZzwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+TTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+V2Vpc3M8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkE8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxldGFsLz4KICAgICAgICAgIDwvcGVyc29uLWdyb3VwPgogICAgICAgICAgPHllYXI+MjAwOTwveWVhcj4KICAgICAgICAgIDxhcnRpY2xlLXRpdGxlPkRpZ2l0YWwgc2lnbmFsaW5nIGFuZCBoeXN0ZXJlc2lzIGNoYXJhY3Rlcml6ZSByYXMgYWN0aXZhdGlvbiBpbiBseW1waG9pZCBjZWxsczwvYXJ0aWNsZS10aXRsZT4KICAgICAgICAgIDxzb3VyY2U+Q2VsbDwvc291cmNlPgogICAgICAgICAgPHZvbHVtZT4xMzY8L3ZvbHVtZT4KICAgICAgICAgIDxmcGFnZT4zMzc8L2ZwYWdlPgogICAgICAgICAgPGxwYWdlPjUxPC9scGFnZT4KICAgICAgICAgIDxwdWItaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuMTAxNi9qLmNlbGwuMjAwOC4xMS4wNTE8L3B1Yi1pZD4KICAgICAgICA8L2VsZW1lbnQtY2l0YXRpb24+CiAgICAgIDwvcmVmPgogICAgICA8cmVmIGlkPSJiaWI5Ij4KICAgICAgICA8ZWxlbWVudC1jaXRhdGlvbiBwdWJsaWNhdGlvbi10eXBlPSJqb3VybmFsIj4KICAgICAgICAgIDxwZXJzb24tZ3JvdXAgcGVyc29uLWdyb3VwLXR5cGU9ImF1dGhvciI+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkRlTW9uZDwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+QUw8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPk1vc3NtYW48L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPktEPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5TdGFycjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+VDwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+RHVzdGluPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5NTDwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+R3JvdmVzPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5KVDwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgIDwvcGVyc29uLWdyb3VwPgogICAgICAgICAgPHllYXI+MjAwODwveWVhcj4KICAgICAgICAgIDxhcnRpY2xlLXRpdGxlPlQgY2VsbCByZWNlcHRvciBtaWNyb2NsdXN0ZXIgdHJhbnNwb3J0IHRocm91Z2ggbW9sZWN1bGFyIG1hemVzIHJldmVhbHMgbWVjaGFuaXNtIG9mIHRyYW5zbG9jYXRpb248L2FydGljbGUtdGl0bGU+CiAgICAgICAgICA8c291cmNlPkJpb3BoeXMgSjwvc291cmNlPgogICAgICAgICAgPHZvbHVtZT45NDwvdm9sdW1lPgogICAgICAgICAgPGZwYWdlPjMyODY8L2ZwYWdlPgogICAgICAgICAgPGxwYWdlPjkyPC9scGFnZT4KICAgICAgICAgIDxwdWItaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuMTUyOS9iaW9waHlzai4xMDcuMTE5MDk5PC9wdWItaWQ+CiAgICAgICAgPC9lbGVtZW50LWNpdGF0aW9uPgogICAgICA8L3JlZj4KICAgICAgPHJlZiBpZD0iYmliMTAiPgogICAgICAgIDxlbGVtZW50LWNpdGF0aW9uIHB1YmxpY2F0aW9uLXR5cGU9ImpvdXJuYWwiPgogICAgICAgICAgPHBlcnNvbi1ncm91cCBwZXJzb24tZ3JvdXAtdHlwZT0iYXV0aG9yIj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+RG9tYW5za2k8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPko8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPlN0YW5zZmVsZDwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+UDwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+U2Fuc29tPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5NUDwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+QmVja3N0ZWluPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5PPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgPC9wZXJzb24tZ3JvdXA+CiAgICAgICAgICA8eWVhcj4yMDEwPC95ZWFyPgogICAgICAgICAgPGFydGljbGUtdGl0bGU+TGlwaWRib29rOiBhIHB1YmxpYyByZXBvc2l0b3J5IGZvciBmb3JjZS1maWVsZCBwYXJhbWV0ZXJzIHVzZWQgaW4gbWVtYnJhbmUgc2ltdWxhdGlvbnM8L2FydGljbGUtdGl0bGU+CiAgICAgICAgICA8c291cmNlPkogTWVtYnIgQmlvbDwvc291cmNlPgogICAgICAgICAgPHZvbHVtZT4yMzY8L3ZvbHVtZT4KICAgICAgICAgIDxmcGFnZT4yNTU8L2ZwYWdlPgogICAgICAgICAgPGxwYWdlPjg8L2xwYWdlPgogICAgICAgICAgPHB1Yi1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC4xMDA3L3MwMDIzMi0wMTAtOTI5Ni04PC9wdWItaWQ+CiAgICAgICAgPC9lbGVtZW50LWNpdGF0aW9uPgogICAgICA8L3JlZj4KICAgICAgPHJlZiBpZD0iYmliMTEiPgogICAgICAgIDxlbGVtZW50LWNpdGF0aW9uIHB1YmxpY2F0aW9uLXR5cGU9ImpvdXJuYWwiPgogICAgICAgICAgPHBlcnNvbi1ncm91cCBwZXJzb24tZ3JvdXAtdHlwZT0iYXV0aG9yIj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+RHVzdGluPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5NTDwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+R3JvdmVzPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5KVDwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgIDwvcGVyc29uLWdyb3VwPgogICAgICAgICAgPHllYXI+MjAxMjwveWVhcj4KICAgICAgICAgIDxhcnRpY2xlLXRpdGxlPlJlY2VwdG9yIHNpZ25hbGluZyBjbHVzdGVycyBpbiB0aGUgaW1tdW5lIHN5bmFwc2U8L2FydGljbGUtdGl0bGU+CiAgICAgICAgICA8c291cmNlPkFubnUgUmV2IEJpb3BoeXM8L3NvdXJjZT4KICAgICAgICAgIDx2b2x1bWU+NDE8L3ZvbHVtZT4KICAgICAgICAgIDxmcGFnZT41NDM8L2ZwYWdlPgogICAgICAgICAgPGxwYWdlPjU2PC9scGFnZT4KICAgICAgICAgIDxwdWItaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuMTE0Ni9hbm51cmV2LWJpb3BoeXMtMDQyOTEwLTE1NTIzODwvcHViLWlkPgogICAgICAgIDwvZWxlbWVudC1jaXRhdGlvbj4KICAgICAgPC9yZWY+CiAgICAgIDxyZWYgaWQ9ImJpYjEyIj4KICAgICAgICA8ZWxlbWVudC1jaXRhdGlvbiBwdWJsaWNhdGlvbi10eXBlPSJqb3VybmFsIj4KICAgICAgICAgIDxwZXJzb24tZ3JvdXAgcGVyc29uLWdyb3VwLXR5cGU9ImF1dGhvciI+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkVuc2lnbjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+REw8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPlBhbmRlPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5WUzwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgIDwvcGVyc29uLWdyb3VwPgogICAgICAgICAgPHllYXI+MjAwOTwveWVhcj4KICAgICAgICAgIDxhcnRpY2xlLXRpdGxlPkJheWVzaWFuIGRldGVjdGlvbiBvZiBpbnRlbnNpdHkgY2hhbmdlcyBpbiBzaW5nbGUgbW9sZWN1bGUgYW5kIG1vbGVjdWxhciBkeW5hbWljcyB0cmFqZWN0b3JpZXM8L2FydGljbGUtdGl0bGU+CiAgICAgICAgICA8c291cmNlPkogUGh5cyBDaGVtIEI8L3NvdXJjZT4KICAgICAgICAgIDx2b2x1bWU+MTE0PC92b2x1bWU+CiAgICAgICAgICA8ZnBhZ2U+MjgwPC9mcGFnZT4KICAgICAgICAgIDxscGFnZT45MjwvbHBhZ2U+CiAgICAgICAgICA8cHViLWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjEwMjEvanA5MDY3ODZiPC9wdWItaWQ+CiAgICAgICAgPC9lbGVtZW50LWNpdGF0aW9uPgogICAgICA8L3JlZj4KICAgICAgPHJlZiBpZD0iYmliMTMiPgogICAgICAgIDxlbGVtZW50LWNpdGF0aW9uIHB1YmxpY2F0aW9uLXR5cGU9ImpvdXJuYWwiPgogICAgICAgICAgPHBlcnNvbi1ncm91cCBwZXJzb24tZ3JvdXAtdHlwZT0iYXV0aG9yIj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+R292ZXJuPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5DQzwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+UGFjem9zYTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+TUs8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkNoYWtyYWJvcnR5PC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5BSzwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+SHVzZWJ5PC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5FUzwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgIDwvcGVyc29uLWdyb3VwPgogICAgICAgICAgPHllYXI+MjAxMDwveWVhcj4KICAgICAgICAgIDxhcnRpY2xlLXRpdGxlPkZhc3Qgb24tcmF0ZXMgYWxsb3cgc2hvcnQgZHdlbGwgdGltZSBsaWdhbmRzIHRvIGFjdGl2YXRlIFQgY2VsbHM8L2FydGljbGUtdGl0bGU+CiAgICAgICAgICA8c291cmNlPlByb2MgTmF0bCBBY2FkIFNjaSBVU0E8L3NvdXJjZT4KICAgICAgICAgIDx2b2x1bWU+MTA3PC92b2x1bWU+CiAgICAgICAgICA8ZnBhZ2U+ODcyNDwvZnBhZ2U+CiAgICAgICAgICA8bHBhZ2U+OTwvbHBhZ2U+CiAgICAgICAgICA8cHViLWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjEwNzMvcG5hcy4xMDAwOTY2MTA3PC9wdWItaWQ+CiAgICAgICAgPC9lbGVtZW50LWNpdGF0aW9uPgogICAgICA8L3JlZj4KICAgICAgPHJlZiBpZD0iYmliMTQiPgogICAgICAgIDxlbGVtZW50LWNpdGF0aW9uIHB1YmxpY2F0aW9uLXR5cGU9ImpvdXJuYWwiPgogICAgICAgICAgPHBlcnNvbi1ncm91cCBwZXJzb24tZ3JvdXAtdHlwZT0iYXV0aG9yIj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+R3Jha291aTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+QTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+QnJvbWxleTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+U0s8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPlN1bWVuPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5DPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5EYXZpczwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+TU08L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPlNoYXc8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkFTPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5BbGxlbjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+UE08L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxldGFsLz4KICAgICAgICAgIDwvcGVyc29uLWdyb3VwPgogICAgICAgICAgPHllYXI+MTk5OTwveWVhcj4KICAgICAgICAgIDxhcnRpY2xlLXRpdGxlPlRoZSBpbW11bm9sb2dpY2FsIHN5bmFwc2U6IGEgbW9sZWN1bGFyIG1hY2hpbmUgY29udHJvbGxpbmcgVCBjZWxsIGFjdGl2YXRpb248L2FydGljbGUtdGl0bGU+CiAgICAgICAgICA8c291cmNlPlNjaWVuY2U8L3NvdXJjZT4KICAgICAgICAgIDx2b2x1bWU+Mjg1PC92b2x1bWU+CiAgICAgICAgICA8ZnBhZ2U+MjIxPC9mcGFnZT4KICAgICAgICAgIDxscGFnZT43PC9scGFnZT4KICAgICAgICAgIDxwdWItaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuMTEyNi9zY2llbmNlLjI4NS41NDI1LjIyMTwvcHViLWlkPgogICAgICAgIDwvZWxlbWVudC1jaXRhdGlvbj4KICAgICAgPC9yZWY+CiAgICAgIDxyZWYgaWQ9ImJpYjE1Ij4KICAgICAgICA8ZWxlbWVudC1jaXRhdGlvbiBwdWJsaWNhdGlvbi10eXBlPSJqb3VybmFsIj4KICAgICAgICAgIDxwZXJzb24tZ3JvdXAgcGVyc29uLWdyb3VwLXR5cGU9ImF1dGhvciI+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkhhPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5UPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5UaW5nPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5BWTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+TGlhbmc8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPko8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkNhbGR3ZWxsPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5XQjwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+RGVuaXo8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkFBPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5DaGVtbGE8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkRTPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8ZXRhbC8+CiAgICAgICAgICA8L3BlcnNvbi1ncm91cD4KICAgICAgICAgIDx5ZWFyPjE5OTk8L3llYXI+CiAgICAgICAgICA8YXJ0aWNsZS10aXRsZT5TaW5nbGUtbW9sZWN1bGUgZmx1b3Jlc2NlbmNlIHNwZWN0cm9zY29weSBvZiBlbnp5bWUgY29uZm9ybWF0aW9uYWwgZHluYW1pY3MgYW5kIGNsZWF2YWdlIG1lY2hhbmlzbTwvYXJ0aWNsZS10aXRsZT4KICAgICAgICAgIDxzb3VyY2U+UHJvYyBOYXRsIEFjYWQgU2NpIFVTQTwvc291cmNlPgogICAgICAgICAgPHZvbHVtZT45Njwvdm9sdW1lPgogICAgICAgICAgPGZwYWdlPjg5MzwvZnBhZ2U+CiAgICAgICAgICA8bHBhZ2U+ODwvbHBhZ2U+CiAgICAgICAgICA8cHViLWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjEwNzMvcG5hcy45Ni4zLjg5MzwvcHViLWlkPgogICAgICAgIDwvZWxlbWVudC1jaXRhdGlvbj4KICAgICAgPC9yZWY+CiAgICAgIDxyZWYgaWQ9ImJpYjE2Ij4KICAgICAgICA8ZWxlbWVudC1jaXRhdGlvbiBwdWJsaWNhdGlvbi10eXBlPSJqb3VybmFsIj4KICAgICAgICAgIDxwZXJzb24tZ3JvdXAgcGVyc29uLWdyb3VwLXR5cGU9ImF1dGhvciI+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkhhd3NlPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5XRjwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+Q2hhbXBpb248L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPk1NPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5Kb3ljZTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+TVY8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkhlbGxtYW48L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkxNPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5Ib3NzYWluPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5NPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5SeWFuPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5WPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8ZXRhbC8+CiAgICAgICAgICA8L3BlcnNvbi1ncm91cD4KICAgICAgICAgIDx5ZWFyPjIwMTI8L3llYXI+CiAgICAgICAgICA8YXJ0aWNsZS10aXRsZT5DdXR0aW5nIGVkZ2U6IGV2aWRlbmNlIGZvciBhIGR5bmFtaWNhbGx5IGRyaXZlbiBUIGNlbGwgc2lnbmFsaW5nIG1lY2hhbmlzbTwvYXJ0aWNsZS10aXRsZT4KICAgICAgICAgIDxzb3VyY2U+SiBJbW11bm9sPC9zb3VyY2U+CiAgICAgICAgICA8dm9sdW1lPjE4ODwvdm9sdW1lPgogICAgICAgICAgPGZwYWdlPjU4MTk8L2ZwYWdlPgogICAgICAgICAgPGxwYWdlPjIzPC9scGFnZT4KICAgICAgICAgIDxwdWItaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuNDA0OS9qaW1tdW5vbC4xMjAwOTUyPC9wdWItaWQ+CiAgICAgICAgPC9lbGVtZW50LWNpdGF0aW9uPgogICAgICA8L3JlZj4KICAgICAgPHJlZiBpZD0iYmliMTciPgogICAgICAgIDxlbGVtZW50LWNpdGF0aW9uIHB1YmxpY2F0aW9uLXR5cGU9ImpvdXJuYWwiPgogICAgICAgICAgPHBlcnNvbi1ncm91cCBwZXJzb24tZ3JvdXAtdHlwZT0iYXV0aG9yIj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+SHVhbmc8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPko8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPlphcm5pdHN5bmE8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPlZJPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5MaXU8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkI8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkVkd2FyZHM8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkxKPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5KaWFuZzwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+TjwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+RXZhdm9sZDwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+QkQ8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxldGFsLz4KICAgICAgICAgIDwvcGVyc29uLWdyb3VwPgogICAgICAgICAgPHllYXI+MjAxMDwveWVhcj4KICAgICAgICAgIDxhcnRpY2xlLXRpdGxlPlRoZSBraW5ldGljcyBvZiB0d28tZGltZW5zaW9uYWwgVENSIGFuZCBwTUhDIGludGVyYWN0aW9ucyBkZXRlcm1pbmUgVC1jZWxsIHJlc3BvbnNpdmVuZXNzPC9hcnRpY2xlLXRpdGxlPgogICAgICAgICAgPHNvdXJjZT5OYXR1cmU8L3NvdXJjZT4KICAgICAgICAgIDx2b2x1bWU+NDY0PC92b2x1bWU+CiAgICAgICAgICA8ZnBhZ2U+OTMyPC9mcGFnZT4KICAgICAgICAgIDxscGFnZT42PC9scGFnZT4KICAgICAgICAgIDxwdWItaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuMTAzOC9uYXR1cmUwODk0NDwvcHViLWlkPgogICAgICAgIDwvZWxlbWVudC1jaXRhdGlvbj4KICAgICAgPC9yZWY+CiAgICAgIDxyZWYgaWQ9ImJpYjE4Ij4KICAgICAgICA8ZWxlbWVudC1jaXRhdGlvbiBwdWJsaWNhdGlvbi10eXBlPSJqb3VybmFsIj4KICAgICAgICAgIDxwZXJzb24tZ3JvdXAgcGVyc29uLWdyb3VwLXR5cGU9ImF1dGhvciI+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkh1cHBhPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5KQjwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+QXhtYW5uPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5NPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5Nb3J0ZWxtYWllcjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+TUE8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkxpbGxlbWVpZXI8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkJGPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5OZXdlbGw8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkVXPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5CcmFtZXNodWJlcjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+TTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPGV0YWwvPgogICAgICAgICAgPC9wZXJzb24tZ3JvdXA+CiAgICAgICAgICA8eWVhcj4yMDEwPC95ZWFyPgogICAgICAgICAgPGFydGljbGUtdGl0bGU+VENSLXBlcHRpZGUtTUhDIGludGVyYWN0aW9ucyBpbiBzaXR1IHNob3cgYWNjZWxlcmF0ZWQga2luZXRpY3MgYW5kIGluY3JlYXNlZCBhZmZpbml0eTwvYXJ0aWNsZS10aXRsZT4KICAgICAgICAgIDxzb3VyY2U+TmF0dXJlPC9zb3VyY2U+CiAgICAgICAgICA8dm9sdW1lPjQ2Mzwvdm9sdW1lPgogICAgICAgICAgPGZwYWdlPjk2MzwvZnBhZ2U+CiAgICAgICAgICA8bHBhZ2U+NzwvbHBhZ2U+CiAgICAgICAgICA8cHViLWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjEwMzgvbmF0dXJlMDg3NDY8L3B1Yi1pZD4KICAgICAgICA8L2VsZW1lbnQtY2l0YXRpb24+CiAgICAgIDwvcmVmPgogICAgICA8cmVmIGlkPSJiaWIxOGEiPgogICAgICAgIDxlbGVtZW50LWNpdGF0aW9uIHB1YmxpY2F0aW9uLXR5cGU9ImpvdXJuYWwiPgogICAgICAgICAgPHBlcnNvbi1ncm91cCBwZXJzb24tZ3JvdXAtdHlwZT0iYXV0aG9yIj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+SHVzZTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+TTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+S2xlaW48L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkxPPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5HaXJ2aW48L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkFUPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5GYXJhajwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+Sk08L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkxpPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5RLUo8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkt1aG5zPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5NUzwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPGV0YWwvPgogICAgICAgICAgPC9wZXJzb24tZ3JvdXA+CiAgICAgICAgICA8eWVhcj4yMDA3PC95ZWFyPgogICAgICAgICAgPGFydGljbGUtdGl0bGU+U3BhdGlhbCBhbmQgdGVtcG9yYWwgZHluYW1pY3Mgb2YgVCBjZWxsIHJlY2VwdG9yIHNpZ25hbGluZyB3aXRoIGEgcGhvdG9hY3RpdmF0YWJsZSBhZ29uaXN0PC9hcnRpY2xlLXRpdGxlPgogICAgICAgICAgPHNvdXJjZT5JbW11bml0eTwvc291cmNlPgogICAgICAgICAgPHZvbHVtZT4yNzwvdm9sdW1lPgogICAgICAgICAgPGZwYWdlPjc2PC9mcGFnZT4KICAgICAgICAgIDxscGFnZT44ODwvbHBhZ2U+CiAgICAgICAgICA8cHViLWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjEwMTYvai5pbW11bmkuMjAwNy4wNS4wMTc8L3B1Yi1pZD4KICAgICAgICA8L2VsZW1lbnQtY2l0YXRpb24+CiAgICAgIDwvcmVmPgogICAgICA8cmVmIGlkPSJiaWIxOSI+CiAgICAgICAgPGVsZW1lbnQtY2l0YXRpb24gcHVibGljYXRpb24tdHlwZT0iam91cm5hbCI+CiAgICAgICAgICA8cGVyc29uLWdyb3VwIHBlcnNvbi1ncm91cC10eXBlPSJhdXRob3IiPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5JcnZpbmU8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkRKPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5QdXJiaG9vPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5NQTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+S3JvZ3NnYWFyZDwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+TTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+RGF2aXM8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPk1NPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgPC9wZXJzb24tZ3JvdXA+CiAgICAgICAgICA8eWVhcj4yMDAyPC95ZWFyPgogICAgICAgICAgPGFydGljbGUtdGl0bGU+RGlyZWN0IG9ic2VydmF0aW9uIG9mIGxpZ2FuZCByZWNvZ25pdGlvbiBieSBUIGNlbGxzPC9hcnRpY2xlLXRpdGxlPgogICAgICAgICAgPHNvdXJjZT5OYXR1cmU8L3NvdXJjZT4KICAgICAgICAgIDx2b2x1bWU+NDE5PC92b2x1bWU+CiAgICAgICAgICA8ZnBhZ2U+ODQ1PC9mcGFnZT4KICAgICAgICAgIDxscGFnZT45PC9scGFnZT4KICAgICAgICAgIDxwdWItaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuMTAzOC9uYXR1cmUwMTA3NjwvcHViLWlkPgogICAgICAgIDwvZWxlbWVudC1jaXRhdGlvbj4KICAgICAgPC9yZWY+CiAgICAgIDxyZWYgaWQ9ImJpYjIwIj4KICAgICAgICA8ZWxlbWVudC1jaXRhdGlvbiBwdWJsaWNhdGlvbi10eXBlPSJqb3VybmFsIj4KICAgICAgICAgIDxwZXJzb24tZ3JvdXAgcGVyc29uLWdyb3VwLXR5cGU9ImF1dGhvciI+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkl3YXNoaW1hPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5NPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5JcnZpbmc8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkJBPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT52YW4gT2Vyczwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+TlM8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkNoYW48L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkFDPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5XZWlzczwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+QTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgIDwvcGVyc29uLWdyb3VwPgogICAgICAgICAgPHllYXI+MTk5NDwveWVhcj4KICAgICAgICAgIDxhcnRpY2xlLXRpdGxlPlNlcXVlbnRpYWwgaW50ZXJhY3Rpb25zIG9mIHRoZSBUQ1Igd2l0aCB0d28gZGlzdGluY3QgY3l0b3BsYXNtaWMgdHlyb3NpbmUga2luYXNlczwvYXJ0aWNsZS10aXRsZT4KICAgICAgICAgIDxzb3VyY2U+U2NpZW5jZTwvc291cmNlPgogICAgICAgICAgPHZvbHVtZT4yNjM8L3ZvbHVtZT4KICAgICAgICAgIDxmcGFnZT4xMTM2PC9mcGFnZT4KICAgICAgICAgIDxscGFnZT45PC9scGFnZT4KICAgICAgICAgIDxwdWItaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuMTEyNi9zY2llbmNlLjc1MDkwODM8L3B1Yi1pZD4KICAgICAgICA8L2VsZW1lbnQtY2l0YXRpb24+CiAgICAgIDwvcmVmPgogICAgICA8cmVmIGlkPSJiaWIyMSI+CiAgICAgICAgPGVsZW1lbnQtY2l0YXRpb24gcHVibGljYXRpb24tdHlwZT0iam91cm5hbCI+CiAgICAgICAgICA8cGVyc29uLWdyb3VwIHBlcnNvbi1ncm91cC10eXBlPSJhdXRob3IiPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5LYWl6dWthPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5ZPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5Eb3VnbGFzczwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+QUQ8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPlZhcm1hPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5SPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5EdXN0aW48L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPk1MPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5WYWxlPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5SRDwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgIDwvcGVyc29uLWdyb3VwPgogICAgICAgICAgPHllYXI+MjAwNzwveWVhcj4KICAgICAgICAgIDxhcnRpY2xlLXRpdGxlPk1lY2hhbmlzbXMgZm9yIHNlZ3JlZ2F0aW5nIFQgY2VsbCByZWNlcHRvciBhbmQgYWRoZXNpb24gbW9sZWN1bGVzIGR1cmluZyBpbW11bm9sb2dpY2FsIHN5bmFwc2UgZm9ybWF0aW9uIGluIEp1cmthdCBUIGNlbGxzPC9hcnRpY2xlLXRpdGxlPgogICAgICAgICAgPHNvdXJjZT5Qcm9jIE5hdGwgQWNhZCBTY2kgVVNBPC9zb3VyY2U+CiAgICAgICAgICA8dm9sdW1lPjEwNDwvdm9sdW1lPgogICAgICAgICAgPGZwYWdlPjIwMjk2PC9mcGFnZT4KICAgICAgICAgIDxscGFnZT4zMDE8L2xwYWdlPgogICAgICAgICAgPHB1Yi1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC4xMDczL3BuYXMuMDcxMDI1ODEwNTwvcHViLWlkPgogICAgICAgIDwvZWxlbWVudC1jaXRhdGlvbj4KICAgICAgPC9yZWY+CiAgICAgIDxyZWYgaWQ9ImJpYjIyIj4KICAgICAgICA8ZWxlbWVudC1jaXRhdGlvbiBwdWJsaWNhdGlvbi10eXBlPSJqb3VybmFsIj4KICAgICAgICAgIDxwZXJzb24tZ3JvdXAgcGVyc29uLWdyb3VwLXR5cGU9ImF1dGhvciI+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPktheWU8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPko8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkhzdTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+TUw8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPlNhdXJvbjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+TUU8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkphbWVzb248L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPlNDPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5HYXNjb2lnbmU8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPk5SPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5IZWRyaWNrPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5TTTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgIDwvcGVyc29uLWdyb3VwPgogICAgICAgICAgPHllYXI+MTk4OTwveWVhcj4KICAgICAgICAgIDxhcnRpY2xlLXRpdGxlPlNlbGVjdGl2ZSBkZXZlbG9wbWVudCBvZiBDRDQrIFQgY2VsbHMgaW4gdHJhbnNnZW5pYyBtaWNlIGV4cHJlc3NpbmcgYSBjbGFzcyBJSSBNSEMtcmVzdHJpY3RlZCBhbnRpZ2VuIHJlY2VwdG9yPC9hcnRpY2xlLXRpdGxlPgogICAgICAgICAgPHNvdXJjZT5OYXR1cmU8L3NvdXJjZT4KICAgICAgICAgIDx2b2x1bWU+MzQxPC92b2x1bWU+CiAgICAgICAgICA8ZnBhZ2U+NzQ2PC9mcGFnZT4KICAgICAgICAgIDxscGFnZT45PC9scGFnZT4KICAgICAgICAgIDxwdWItaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuMTAzOC8zNDE3NDZhMDwvcHViLWlkPgogICAgICAgIDwvZWxlbWVudC1jaXRhdGlvbj4KICAgICAgPC9yZWY+CiAgICAgIDxyZWYgaWQ9ImJpYjIzIj4KICAgICAgICA8ZWxlbWVudC1jaXRhdGlvbiBwdWJsaWNhdGlvbi10eXBlPSJqb3VybmFsIj4KICAgICAgICAgIDxwZXJzb24tZ3JvdXAgcGVyc29uLWdyb3VwLXR5cGU9ImF1dGhvciI+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPktyb2dzZ2FhcmQ8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPk08L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkxpPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5RSjwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+U3VtZW48L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkM8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkh1cHBhPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5KQjwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+SHVzZTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+TTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+RGF2aXM8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPk1NPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgPC9wZXJzb24tZ3JvdXA+CiAgICAgICAgICA8eWVhcj4yMDA1PC95ZWFyPgogICAgICAgICAgPGFydGljbGUtdGl0bGU+QWdvbmlzdC9lbmRvZ2Vub3VzIHBlcHRpZGUtTUhDIGhldGVyb2RpbWVycyBkcml2ZSBUIGNlbGwgYWN0aXZhdGlvbiBhbmQgc2Vuc2l0aXZpdHk8L2FydGljbGUtdGl0bGU+CiAgICAgICAgICA8c291cmNlPk5hdHVyZTwvc291cmNlPgogICAgICAgICAgPHZvbHVtZT40MzQ8L3ZvbHVtZT4KICAgICAgICAgIDxmcGFnZT4yMzg8L2ZwYWdlPgogICAgICAgICAgPGxwYWdlPjQzPC9scGFnZT4KICAgICAgICAgIDxwdWItaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuMTAzOC9uYXR1cmUwMzM5MTwvcHViLWlkPgogICAgICAgIDwvZWxlbWVudC1jaXRhdGlvbj4KICAgICAgPC9yZWY+CiAgICAgIDxyZWYgaWQ9ImJpYjI0Ij4KICAgICAgICA8ZWxlbWVudC1jaXRhdGlvbiBwdWJsaWNhdGlvbi10eXBlPSJib29rIj4KICAgICAgICAgIDxwZXJzb24tZ3JvdXAgcGVyc29uLWdyb3VwLXR5cGU9ImF1dGhvciI+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkxpbjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+Vy1DPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5ZdTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+Qy1IPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5UcmlmZm88L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPlM8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkdyb3Zlczwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+SlQ8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICA8L3BlcnNvbi1ncm91cD4KICAgICAgICAgIDx5ZWFyPjIwMTA8L3llYXI+CiAgICAgICAgICA8YXJ0aWNsZS10aXRsZT5TdXBwb3J0ZWQgbWVtYnJhbmUgZm9ybWF0aW9uLCBjaGFyYWN0ZXJpemF0aW9uLCBmdW5jdGlvbmFsaXphdGlvbiwgYW5kIHBhdHRlcm5pbmcgZm9yIGFwcGxpY2F0aW9uIGluIGJpb2xvZ2ljYWwgc2NpZW5jZSBhbmQgdGVjaG5vbG9neTwvYXJ0aWNsZS10aXRsZT4KICAgICAgICAgIDxzb3VyY2U+Q3VycmVudCBwcm90b2NvbHMgaW4gY2hlbWljYWwgYmlvbG9neTwvc291cmNlPgogICAgICAgICAgPHZvbHVtZT4yPC92b2x1bWU+CiAgICAgICAgICA8cHVibGlzaGVyLW5hbWU+Sm9obiBXaWxleSAmYW1wOyBTb25zLCBJbmM8L3B1Ymxpc2hlci1uYW1lPgogICAgICAgICAgPGZwYWdlPjIzNTwvZnBhZ2U+CiAgICAgICAgICA8bHBhZ2U+Njk8L2xwYWdlPgogICAgICAgICAgPHB1Yi1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC4xMDAyLzk3ODA0NzA1NTkyNzcuY2gxMDAxMzE8L3B1Yi1pZD4KICAgICAgICA8L2VsZW1lbnQtY2l0YXRpb24+CiAgICAgIDwvcmVmPgogICAgICA8cmVmIGlkPSJiaWIyNSI+CiAgICAgICAgPGVsZW1lbnQtY2l0YXRpb24gcHVibGljYXRpb24tdHlwZT0iam91cm5hbCI+CiAgICAgICAgICA8cGVyc29uLWdyb3VwIHBlcnNvbi1ncm91cC10eXBlPSJhdXRob3IiPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5NYWp1bWRhcjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+RFM8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPlNtaXJub3ZhPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5JPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5LYXNobzwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+VjwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+TmlyPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5FPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5Lb25nPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5YPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5XZWlzczwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+UzwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPGV0YWwvPgogICAgICAgICAgPC9wZXJzb24tZ3JvdXA+CiAgICAgICAgICA8eWVhcj4yMDA3PC95ZWFyPgogICAgICAgICAgPGFydGljbGUtdGl0bGU+U2luZ2xlLW1vbGVjdWxlIEZSRVQgcmV2ZWFscyBzdWdhci1pbmR1Y2VkIGNvbmZvcm1hdGlvbmFsIGR5bmFtaWNzIGluIExhY1k8L2FydGljbGUtdGl0bGU+CiAgICAgICAgICA8c291cmNlPlByb2MgTmF0bCBBY2FkIFNjaSBVU0E8L3NvdXJjZT4KICAgICAgICAgIDx2b2x1bWU+MTA0PC92b2x1bWU+CiAgICAgICAgICA8ZnBhZ2U+MTI2NDA8L2ZwYWdlPgogICAgICAgICAgPGxwYWdlPjU8L2xwYWdlPgogICAgICAgICAgPHB1Yi1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC4xMDczL3BuYXMuMDcwMDk2OTEwNDwvcHViLWlkPgogICAgICAgIDwvZWxlbWVudC1jaXRhdGlvbj4KICAgICAgPC9yZWY+CiAgICAgIDxyZWYgaWQ9ImJpYjI2Ij4KICAgICAgICA8ZWxlbWVudC1jaXRhdGlvbiBwdWJsaWNhdGlvbi10eXBlPSJqb3VybmFsIj4KICAgICAgICAgIDxwZXJzb24tZ3JvdXAgcGVyc29uLWdyb3VwLXR5cGU9ImF1dGhvciI+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPk1hbno8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkJOPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5KYWNrc29uPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5CTDwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+UGV0aXQ8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPlJTPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5EdXN0aW48L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPk1MPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5Hcm92ZXM8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPko8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICA8L3BlcnNvbi1ncm91cD4KICAgICAgICAgIDx5ZWFyPjIwMTE8L3llYXI+CiAgICAgICAgICA8YXJ0aWNsZS10aXRsZT5ULWNlbGwgdHJpZ2dlcmluZyB0aHJlc2hvbGRzIGFyZSBtb2R1bGF0ZWQgYnkgdGhlIG51bWJlciBvZiBhbnRpZ2VuIHdpdGhpbiBpbmRpdmlkdWFsIFQtY2VsbCByZWNlcHRvciBjbHVzdGVyczwvYXJ0aWNsZS10aXRsZT4KICAgICAgICAgIDxzb3VyY2U+UHJvYyBOYXRsIEFjYWQgU2NpIFVTQTwvc291cmNlPgogICAgICAgICAgPHZvbHVtZT4xMDg8L3ZvbHVtZT4KICAgICAgICAgIDxmcGFnZT45MDg5PC9mcGFnZT4KICAgICAgICAgIDxscGFnZT45NDwvbHBhZ2U+CiAgICAgICAgICA8cHViLWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjEwNzMvcG5hcy4xMDE4NzcxMTA4PC9wdWItaWQ+CiAgICAgICAgPC9lbGVtZW50LWNpdGF0aW9uPgogICAgICA8L3JlZj4KICAgICAgPHJlZiBpZD0iYmliMjciPgogICAgICAgIDxlbGVtZW50LWNpdGF0aW9uIHB1YmxpY2F0aW9uLXR5cGU9ImpvdXJuYWwiPgogICAgICAgICAgPHBlcnNvbi1ncm91cCBwZXJzb24tZ3JvdXAtdHlwZT0iYXV0aG9yIj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+TWF0c3VpPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5LPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5Cb25pZmFjZTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+Sko8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPlN0ZWZmbmVyPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5QPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5SZWF5PC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5QQTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+RGF2aXM8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPk1NPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgPC9wZXJzb24tZ3JvdXA+CiAgICAgICAgICA8eWVhcj4xOTk0PC95ZWFyPgogICAgICAgICAgPGFydGljbGUtdGl0bGU+S2luZXRpY3Mgb2YgVC1jZWxsIHJlY2VwdG9yIGJpbmRpbmcgdG8gcGVwdGlkZS9JLUVrIGNvbXBsZXhlczogY29ycmVsYXRpb24gb2YgdGhlIGRpc3NvY2lhdGlvbiByYXRlIHdpdGggVC1jZWxsIHJlc3BvbnNpdmVuZXNzPC9hcnRpY2xlLXRpdGxlPgogICAgICAgICAgPHNvdXJjZT5Qcm9jIE5hdGwgQWNhZCBTY2kgVVNBPC9zb3VyY2U+CiAgICAgICAgICA8dm9sdW1lPjkxPC92b2x1bWU+CiAgICAgICAgICA8ZnBhZ2U+MTI4NjI8L2ZwYWdlPgogICAgICAgICAgPGxwYWdlPjY8L2xwYWdlPgogICAgICAgICAgPHB1Yi1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC4xMDczL3BuYXMuOTEuMjYuMTI4NjI8L3B1Yi1pZD4KICAgICAgICA8L2VsZW1lbnQtY2l0YXRpb24+CiAgICAgIDwvcmVmPgogICAgICA8cmVmIGlkPSJiaWIyOCI+CiAgICAgICAgPGVsZW1lbnQtY2l0YXRpb24gcHVibGljYXRpb24tdHlwZT0iam91cm5hbCI+CiAgICAgICAgICA8cGVyc29uLWdyb3VwIHBlcnNvbi1ncm91cC10eXBlPSJhdXRob3IiPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5NY0tlaXRoYW48L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPlRXPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgPC9wZXJzb24tZ3JvdXA+CiAgICAgICAgICA8eWVhcj4xOTk1PC95ZWFyPgogICAgICAgICAgPGFydGljbGUtdGl0bGU+S2luZXRpYyBwcm9vZnJlYWRpbmcgaW4gVC1jZWxsIHJlY2VwdG9yIHNpZ25hbCB0cmFuc2R1Y3Rpb248L2FydGljbGUtdGl0bGU+CiAgICAgICAgICA8c291cmNlPlByb2MgTmF0bCBBY2FkIFNjaSBVU0E8L3NvdXJjZT4KICAgICAgICAgIDx2b2x1bWU+OTI8L3ZvbHVtZT4KICAgICAgICAgIDxmcGFnZT41MDQyPC9mcGFnZT4KICAgICAgICAgIDxscGFnZT42PC9scGFnZT4KICAgICAgICAgIDxwdWItaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuMTA3My9wbmFzLjkyLjExLjUwNDI8L3B1Yi1pZD4KICAgICAgICA8L2VsZW1lbnQtY2l0YXRpb24+CiAgICAgIDwvcmVmPgogICAgICA8cmVmIGlkPSJiaWIyOSI+CiAgICAgICAgPGVsZW1lbnQtY2l0YXRpb24gcHVibGljYXRpb24tdHlwZT0iam91cm5hbCI+CiAgICAgICAgICA8cGVyc29uLWdyb3VwIHBlcnNvbi1ncm91cC10eXBlPSJhdXRob3IiPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5OZXdlbGw8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkVXPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5FbHk8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkxLPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5LcnVzZTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+QUM8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPlJlYXk8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPlBBPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5Sb2RyaWd1ZXo8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPlNOPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5MaW48L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkFFPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8ZXRhbC8+CiAgICAgICAgICA8L3BlcnNvbi1ncm91cD4KICAgICAgICAgIDx5ZWFyPjIwMTE8L3llYXI+CiAgICAgICAgICA8YXJ0aWNsZS10aXRsZT5TdHJ1Y3R1cmFsIGJhc2lzIG9mIHNwZWNpZmljaXR5IGFuZCBjcm9zcy1yZWFjdGl2aXR5IGluIFQgY2VsbCByZWNlcHRvcnMgc3BlY2lmaWMgZm9yIGN5dG9jaHJvbWUgYy1JLUUoayk8L2FydGljbGUtdGl0bGU+CiAgICAgICAgICA8c291cmNlPkogSW1tdW5vbDwvc291cmNlPgogICAgICAgICAgPHZvbHVtZT4xODY8L3ZvbHVtZT4KICAgICAgICAgIDxmcGFnZT41ODIzPC9mcGFnZT4KICAgICAgICAgIDxscGFnZT4zMjwvbHBhZ2U+CiAgICAgICAgICA8cHViLWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjQwNDkvamltbXVub2wuMTEwMDE5NzwvcHViLWlkPgogICAgICAgIDwvZWxlbWVudC1jaXRhdGlvbj4KICAgICAgPC9yZWY+CiAgICAgIDxyZWYgaWQ9ImJpYjMwIj4KICAgICAgICA8ZWxlbWVudC1jaXRhdGlvbiBwdWJsaWNhdGlvbi10eXBlPSJqb3VybmFsIj4KICAgICAgICAgIDxwZXJzb24tZ3JvdXAgcGVyc29uLWdyb3VwLXR5cGU9ImF1dGhvciI+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPk55ZTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+SkE8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkdyb3Zlczwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+SlQ8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICA8L3BlcnNvbi1ncm91cD4KICAgICAgICAgIDx5ZWFyPjIwMDg8L3llYXI+CiAgICAgICAgICA8YXJ0aWNsZS10aXRsZT5LaW5ldGljIGNvbnRyb2wgb2YgSGlzdGlkaW5lLXRhZ2dlZCBwcm90ZWluIHN1cmZhY2UgZGVuc2l0eSBvbiBzdXBwb3J0ZWQgbGlwaWQgYmlsYXllcnM8L2FydGljbGUtdGl0bGU+CiAgICAgICAgICA8c291cmNlPkxhbmdtdWlyPC9zb3VyY2U+CiAgICAgICAgICA8dm9sdW1lPjI0PC92b2x1bWU+CiAgICAgICAgICA8ZnBhZ2U+NDE0NTwvZnBhZ2U+CiAgICAgICAgICA8bHBhZ2U+OTwvbHBhZ2U+CiAgICAgICAgICA8cHViLWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjEwMjEvbGE3MDM3ODhoPC9wdWItaWQ+CiAgICAgICAgPC9lbGVtZW50LWNpdGF0aW9uPgogICAgICA8L3JlZj4KICAgICAgPHJlZiBpZD0iYmliMzEiPgogICAgICAgIDxlbGVtZW50LWNpdGF0aW9uIHB1YmxpY2F0aW9uLXR5cGU9ImpvdXJuYWwiPgogICAgICAgICAgPHBlcnNvbi1ncm91cCBwZXJzb24tZ3JvdXAtdHlwZT0iYXV0aG9yIj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+UGFsbWVyPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5FPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5OYWVoZXI8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkQ8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICA8L3BlcnNvbi1ncm91cD4KICAgICAgICAgIDx5ZWFyPjIwMDk8L3llYXI+CiAgICAgICAgICA8YXJ0aWNsZS10aXRsZT5BZmZpbml0eSB0aHJlc2hvbGQgZm9yIHRoeW1pYyBzZWxlY3Rpb24gdGhyb3VnaCBhIFQtY2VsbCByZWNlcHRvci1jby1yZWNlcHRvciB6aXBwZXI8L2FydGljbGUtdGl0bGU+CiAgICAgICAgICA8c291cmNlPk5hdCBSZXYgSW1tdW5vbDwvc291cmNlPgogICAgICAgICAgPHZvbHVtZT45PC92b2x1bWU+CiAgICAgICAgICA8ZnBhZ2U+MjA3PC9mcGFnZT4KICAgICAgICAgIDxscGFnZT4xMzwvbHBhZ2U+CiAgICAgICAgICA8cHViLWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjEwMzgvbnJpMjQ2OTwvcHViLWlkPgogICAgICAgIDwvZWxlbWVudC1jaXRhdGlvbj4KICAgICAgPC9yZWY+CiAgICAgIDxyZWYgaWQ9ImJpYjMyIj4KICAgICAgICA8ZWxlbWVudC1jaXRhdGlvbiBwdWJsaWNhdGlvbi10eXBlPSJqb3VybmFsIj4KICAgICAgICAgIDxwZXJzb24tZ3JvdXAgcGVyc29uLWdyb3VwLXR5cGU9ImF1dGhvciI+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPlFpPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5TWTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+R3JvdmVzPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5KVDwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+Q2hha3JhYm9ydHk8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkFLPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgPC9wZXJzb24tZ3JvdXA+CiAgICAgICAgICA8eWVhcj4yMDAxPC95ZWFyPgogICAgICAgICAgPGFydGljbGUtdGl0bGU+U3luYXB0aWMgcGF0dGVybiBmb3JtYXRpb24gZHVyaW5nIGNlbGx1bGFyIHJlY29nbml0aW9uPC9hcnRpY2xlLXRpdGxlPgogICAgICAgICAgPHNvdXJjZT5Qcm9jIE5hdGwgQWNhZCBTY2kgVVNBPC9zb3VyY2U+CiAgICAgICAgICA8dm9sdW1lPjk4PC92b2x1bWU+CiAgICAgICAgICA8ZnBhZ2U+NjU0ODwvZnBhZ2U+CiAgICAgICAgICA8bHBhZ2U+NTM8L2xwYWdlPgogICAgICAgICAgPHB1Yi1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC4xMDczL3BuYXMuMTExNTM2Nzk4PC9wdWItaWQ+CiAgICAgICAgPC9lbGVtZW50LWNpdGF0aW9uPgogICAgICA8L3JlZj4KICAgICAgPHJlZiBpZD0iYmliMzMiPgogICAgICAgIDxlbGVtZW50LWNpdGF0aW9uIHB1YmxpY2F0aW9uLXR5cGU9ImpvdXJuYWwiPgogICAgICAgICAgPHBlcnNvbi1ncm91cCBwZXJzb24tZ3JvdXAtdHlwZT0iYXV0aG9yIj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+UmFiaW5vd2l0ejwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+SkQ8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkJlZXNvbjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+QzwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+THlvbnM8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkRTPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5EYXZpczwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+TU08L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPk1jQ29ubmVsbDwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+SE08L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICA8L3BlcnNvbi1ncm91cD4KICAgICAgICAgIDx5ZWFyPjE5OTY8L3llYXI+CiAgICAgICAgICA8YXJ0aWNsZS10aXRsZT5LaW5ldGljIGRpc2NyaW1pbmF0aW9uIGluIFQtY2VsbCBhY3RpdmF0aW9uPC9hcnRpY2xlLXRpdGxlPgogICAgICAgICAgPHNvdXJjZT5Qcm9jIE5hdGwgQWNhZCBTY2kgVVNBPC9zb3VyY2U+CiAgICAgICAgICA8dm9sdW1lPjkzPC92b2x1bWU+CiAgICAgICAgICA8ZnBhZ2U+MTQwMTwvZnBhZ2U+CiAgICAgICAgICA8bHBhZ2U+NTwvbHBhZ2U+CiAgICAgICAgICA8cHViLWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjEwNzMvcG5hcy45My40LjE0MDE8L3B1Yi1pZD4KICAgICAgICA8L2VsZW1lbnQtY2l0YXRpb24+CiAgICAgIDwvcmVmPgogICAgICA8cmVmIGlkPSJiaWIzNCI+CiAgICAgICAgPGVsZW1lbnQtY2l0YXRpb24gcHVibGljYXRpb24tdHlwZT0iam91cm5hbCI+CiAgICAgICAgICA8cGVyc29uLWdyb3VwIHBlcnNvbi1ncm91cC10eXBlPSJhdXRob3IiPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5SZWJvdWw8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkNGPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5NZXllcjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+R1I8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPlBvcmVic2tpPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5CVDwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+Qm9yZzwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+TkE8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkJ1Y2tsZTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+QU08L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICA8L3BlcnNvbi1ncm91cD4KICAgICAgICAgIDx5ZWFyPjIwMTI8L3llYXI+CiAgICAgICAgICA8YXJ0aWNsZS10aXRsZT5FcGl0b3BlIGZsZXhpYmlsaXR5IGFuZCBkeW5hbWljIGZvb3RwcmludCByZXZlYWxlZCBieSBtb2xlY3VsYXIgZHluYW1pY3Mgb2YgYSBwTUhDLVRDUiBjb21wbGV4PC9hcnRpY2xlLXRpdGxlPgogICAgICAgICAgPHNvdXJjZT5QTE9TIENvbXB1dCBCaW9sPC9zb3VyY2U+CiAgICAgICAgICA8dm9sdW1lPjg8L3ZvbHVtZT4KICAgICAgICAgIDxmcGFnZT5lMTAwMjQwNDwvZnBhZ2U+CiAgICAgICAgICA8cHViLWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjEzNzEvam91cm5hbC5wY2JpLjEwMDI0MDQ8L3B1Yi1pZD4KICAgICAgICA8L2VsZW1lbnQtY2l0YXRpb24+CiAgICAgIDwvcmVmPgogICAgICA8cmVmIGlkPSJiaWIzNSI+CiAgICAgICAgPGVsZW1lbnQtY2l0YXRpb24gcHVibGljYXRpb24tdHlwZT0iam91cm5hbCI+CiAgICAgICAgICA8cGVyc29uLWdyb3VwIHBlcnNvbi1ncm91cC10eXBlPSJhdXRob3IiPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5TY2hhbWVsPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5XVzwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+QWxhcmNvbjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+QjwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgIDwvcGVyc29uLWdyb3VwPgogICAgICAgICAgPHllYXI+MjAxMzwveWVhcj4KICAgICAgICAgIDxhcnRpY2xlLXRpdGxlPk9yZ2FuaXphdGlvbiBvZiB0aGUgcmVzdGluZyBUQ1IgaW4gbmFub3NjYWxlIG9saWdvbWVyczwvYXJ0aWNsZS10aXRsZT4KICAgICAgICAgIDxzb3VyY2U+SW1tdW5vbCBSZXY8L3NvdXJjZT4KICAgICAgICAgIDx2b2x1bWU+MjUxPC92b2x1bWU+CiAgICAgICAgICA8ZnBhZ2U+MTM8L2ZwYWdlPgogICAgICAgICAgPGxwYWdlPjIwPC9scGFnZT4KICAgICAgICAgIDxwdWItaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuMTExMS9pbXIuMTIwMTk8L3B1Yi1pZD4KICAgICAgICA8L2VsZW1lbnQtY2l0YXRpb24+CiAgICAgIDwvcmVmPgogICAgICA8cmVmIGlkPSJiaWIzNiI+CiAgICAgICAgPGVsZW1lbnQtY2l0YXRpb24gcHVibGljYXRpb24tdHlwZT0iam91cm5hbCI+CiAgICAgICAgICA8cGVyc29uLWdyb3VwIHBlcnNvbi1ncm91cC10eXBlPSJhdXRob3IiPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5TaGF3PC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5BUzwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+RHVzdGluPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5NTDwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgIDwvcGVyc29uLWdyb3VwPgogICAgICAgICAgPHllYXI+MTk5NzwveWVhcj4KICAgICAgICAgIDxhcnRpY2xlLXRpdGxlPk1ha2luZyB0aGUgVCBjZWxsIHJlY2VwdG9yIGdvIHRoZSBkaXN0YW5jZTogYSB0b3BvbG9naWNhbCB2aWV3IG9mIFQgY2VsbCBhY3RpdmF0aW9uPC9hcnRpY2xlLXRpdGxlPgogICAgICAgICAgPHNvdXJjZT5JbW11bml0eTwvc291cmNlPgogICAgICAgICAgPHZvbHVtZT42PC92b2x1bWU+CiAgICAgICAgICA8ZnBhZ2U+MzYxPC9mcGFnZT4KICAgICAgICAgIDxscGFnZT45PC9scGFnZT4KICAgICAgICAgIDxwdWItaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuMTAxNi9TMTA3NC03NjEzKDAwKTgwMjc5LTQ8L3B1Yi1pZD4KICAgICAgICA8L2VsZW1lbnQtY2l0YXRpb24+CiAgICAgIDwvcmVmPgogICAgICA8cmVmIGlkPSJiaWIzNyI+CiAgICAgICAgPGVsZW1lbnQtY2l0YXRpb24gcHVibGljYXRpb24tdHlwZT0iam91cm5hbCI+CiAgICAgICAgICA8cGVyc29uLWdyb3VwIHBlcnNvbi1ncm91cC10eXBlPSJhdXRob3IiPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5TbWl0aDwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+QVc8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPlNtb2xpZ292ZXRzPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5BQTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+R3JvdmVzPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5KVDwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgIDwvcGVyc29uLWdyb3VwPgogICAgICAgICAgPHllYXI+MjAxMTwveWVhcj4KICAgICAgICAgIDxhcnRpY2xlLXRpdGxlPlBhdHRlcm5lZCB0d28tcGhvdG9uIHBob3RvYWN0aXZhdGlvbiBpbGx1bWluYXRlcyBzcGF0aWFsIHJlb3JnYW5pemF0aW9uIGluIGxpdmUgY2VsbHM8L2FydGljbGUtdGl0bGU+CiAgICAgICAgICA8c291cmNlPkogUGh5cyBDaGVtIEE8L3NvdXJjZT4KICAgICAgICAgIDx2b2x1bWU+MTE1PC92b2x1bWU+CiAgICAgICAgICA8ZnBhZ2U+Mzg2NzwvZnBhZ2U+CiAgICAgICAgICA8bHBhZ2U+NzU8L2xwYWdlPgogICAgICAgICAgPHB1Yi1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC4xMDIxL2pwMTA4Mjk1czwvcHViLWlkPgogICAgICAgIDwvZWxlbWVudC1jaXRhdGlvbj4KICAgICAgPC9yZWY+CiAgICAgIDxyZWYgaWQ9ImJpYjM4Ij4KICAgICAgICA8ZWxlbWVudC1jaXRhdGlvbiBwdWJsaWNhdGlvbi10eXBlPSJqb3VybmFsIj4KICAgICAgICAgIDxwZXJzb24tZ3JvdXAgcGVyc29uLWdyb3VwLXR5cGU9ImF1dGhvciI+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPlNtb2xpZ292ZXRzPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5BQTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+U21pdGg8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkFXPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5XdTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+SC1KPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5QZXRpdDwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+UlM8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkdyb3Zlczwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+SlQ8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICA8L3BlcnNvbi1ncm91cD4KICAgICAgICAgIDx5ZWFyPjIwMTI8L3llYXI+CiAgICAgICAgICA8YXJ0aWNsZS10aXRsZT5DaGFyYWN0ZXJpemF0aW9uIG9mIGR5bmFtaWMgYWN0aW4gYXNzb2NpYXRpb25zIHdpdGggVC1jZWxsIHJlY2VwdG9yIG1pY3JvY2x1c3RlcnMgaW4gcHJpbWFyeSBUIGNlbGxzPC9hcnRpY2xlLXRpdGxlPgogICAgICAgICAgPHNvdXJjZT5KIENlbGwgU2NpPC9zb3VyY2U+CiAgICAgICAgICA8dm9sdW1lPjEyNTwvdm9sdW1lPgogICAgICAgICAgPGZwYWdlPjczNTwvZnBhZ2U+CiAgICAgICAgICA8bHBhZ2U+NDI8L2xwYWdlPgogICAgICAgICAgPHB1Yi1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC4xMjQyL2pjcy4wOTI4MjU8L3B1Yi1pZD4KICAgICAgICA8L2VsZW1lbnQtY2l0YXRpb24+CiAgICAgIDwvcmVmPgogICAgICA8cmVmIGlkPSJiaWIzOGEiPgogICAgICAgIDxlbGVtZW50LWNpdGF0aW9uIHB1YmxpY2F0aW9uLXR5cGU9ImpvdXJuYWwiPgogICAgICAgICAgPHBlcnNvbi1ncm91cCBwZXJzb24tZ3JvdXAtdHlwZT0iYXV0aG9yIj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+U3RlZmFub3bDoTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+STwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+SGVtbWVyPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5CPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5WZXJnZWxsaTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+TTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+TWFydGluPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5SPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5CaWRkaXNvbjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+V0U8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkdlcm1haW48L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPlJOPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgPC9wZXJzb24tZ3JvdXA+CiAgICAgICAgICA8eWVhcj4yMDAzPC95ZWFyPgogICAgICAgICAgPGFydGljbGUtdGl0bGU+VENSIGxpZ2FuZCBkaXNjcmltaW5hdGlvbiBpcyBlbmZvcmNlZCBieSBjb21wZXRpbmcgRVJLIHBvc2l0aXZlIGFuZCBTSFAtMSBuZWdhdGl2ZSBmZWVkYmFjayBwYXRod2F5czwvYXJ0aWNsZS10aXRsZT4KICAgICAgICAgIDxzb3VyY2U+TmF0IEltbXVub2w8L3NvdXJjZT4KICAgICAgICAgIDx2b2x1bWU+NDwvdm9sdW1lPgogICAgICAgICAgPGZwYWdlPjI0ODwvZnBhZ2U+CiAgICAgICAgICA8bHBhZ2U+NTQ8L2xwYWdlPgogICAgICAgICAgPHB1Yi1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC4xMDM4L25pODk1PC9wdWItaWQ+CiAgICAgICAgPC9lbGVtZW50LWNpdGF0aW9uPgogICAgICA8L3JlZj4KICAgICAgPHJlZiBpZD0iYmliMzkiPgogICAgICAgIDxlbGVtZW50LWNpdGF0aW9uIHB1YmxpY2F0aW9uLXR5cGU9ImpvdXJuYWwiPgogICAgICAgICAgPHBlcnNvbi1ncm91cCBwZXJzb24tZ3JvdXAtdHlwZT0iYXV0aG9yIj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+VGlhbjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+UzwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+TWFpbGU8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPlI8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkNvbGxpbnM8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkVKPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5GcmVsaW5nZXI8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkpBPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgPC9wZXJzb24tZ3JvdXA+CiAgICAgICAgICA8eWVhcj4yMDA3PC95ZWFyPgogICAgICAgICAgPGFydGljbGUtdGl0bGU+Q0Q4KyBUIGNlbGwgYWN0aXZhdGlvbiBpcyBnb3Zlcm5lZCBieSBUQ1ItUGVwdGlkZS9NSEMgYWZmaW5pdHksIG5vdCBkaXNzb2NpYXRpb24gcmF0ZTwvYXJ0aWNsZS10aXRsZT4KICAgICAgICAgIDxzb3VyY2U+SiBJbW11bm9sPC9zb3VyY2U+CiAgICAgICAgICA8dm9sdW1lPjE3OTwvdm9sdW1lPgogICAgICAgICAgPGZwYWdlPjI5NTI8L2ZwYWdlPgogICAgICAgICAgPGxwYWdlPjYwPC9scGFnZT4KICAgICAgICA8L2VsZW1lbnQtY2l0YXRpb24+CiAgICAgIDwvcmVmPgogICAgICA8cmVmIGlkPSJiaWI0MCI+CiAgICAgICAgPGVsZW1lbnQtY2l0YXRpb24gcHVibGljYXRpb24tdHlwZT0iam91cm5hbCI+CiAgICAgICAgICA8cGVyc29uLWdyb3VwIHBlcnNvbi1ncm91cC10eXBlPSJhdXRob3IiPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5WYWxpdHV0dGk8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPlM8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPk11bGxlcjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+UzwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+Q2VsbGE8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPk08L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPlBhZG92YW48L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkU8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkxhbnphdmVjY2hpYTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+QTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgIDwvcGVyc29uLWdyb3VwPgogICAgICAgICAgPHllYXI+MTk5NTwveWVhcj4KICAgICAgICAgIDxhcnRpY2xlLXRpdGxlPlNlcmlhbCB0cmlnZ2VyaW5nIG9mIG1hbnkgVC1jZWxsIHJlY2VwdG9ycyBieSBhIGZldyBwZXB0aWRlLU1IQyBjb21wbGV4ZXM8L2FydGljbGUtdGl0bGU+CiAgICAgICAgICA8c291cmNlPk5hdHVyZTwvc291cmNlPgogICAgICAgICAgPHZvbHVtZT4zNzU8L3ZvbHVtZT4KICAgICAgICAgIDxmcGFnZT4xNDg8L2ZwYWdlPgogICAgICAgICAgPGxwYWdlPjUxPC9scGFnZT4KICAgICAgICAgIDxwdWItaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuMTAzOC8zNzUxNDhhMDwvcHViLWlkPgogICAgICAgIDwvZWxlbWVudC1jaXRhdGlvbj4KICAgICAgPC9yZWY+CiAgICAgIDxyZWYgaWQ9ImJpYjQxIj4KICAgICAgICA8ZWxlbWVudC1jaXRhdGlvbiBwdWJsaWNhdGlvbi10eXBlPSJqb3VybmFsIj4KICAgICAgICAgIDxwZXJzb24tZ3JvdXAgcGVyc29uLWdyb3VwLXR5cGU9ImF1dGhvciI+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPnZhbiBkZXIgTWVyd2U8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPlBBPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5EdXNoZWs8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPk88L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICA8L3BlcnNvbi1ncm91cD4KICAgICAgICAgIDx5ZWFyPjIwMTE8L3llYXI+CiAgICAgICAgICA8YXJ0aWNsZS10aXRsZT5NZWNoYW5pc21zIGZvciBUIGNlbGwgcmVjZXB0b3IgdHJpZ2dlcmluZzwvYXJ0aWNsZS10aXRsZT4KICAgICAgICAgIDxzb3VyY2U+TmF0IFJldiBJbW11bm9sPC9zb3VyY2U+CiAgICAgICAgICA8dm9sdW1lPjExPC92b2x1bWU+CiAgICAgICAgICA8ZnBhZ2U+NDc8L2ZwYWdlPgogICAgICAgICAgPGxwYWdlPjU1PC9scGFnZT4KICAgICAgICAgIDxwdWItaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuMTAzOC9ucmkyODg3PC9wdWItaWQ+CiAgICAgICAgPC9lbGVtZW50LWNpdGF0aW9uPgogICAgICA8L3JlZj4KICAgICAgPHJlZiBpZD0iYmliNDIiPgogICAgICAgIDxlbGVtZW50LWNpdGF0aW9uIHB1YmxpY2F0aW9uLXR5cGU9ImpvdXJuYWwiPgogICAgICAgICAgPHBlcnNvbi1ncm91cCBwZXJzb24tZ3JvdXAtdHlwZT0iYXV0aG9yIj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+VmFybWE8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPlI8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkNhbXBpPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5HPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5Zb2tvc3VrYTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+VDwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+U2FpdG88L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPlQ8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkR1c3Rpbjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+TUw8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICA8L3BlcnNvbi1ncm91cD4KICAgICAgICAgIDx5ZWFyPjIwMDY8L3llYXI+CiAgICAgICAgICA8YXJ0aWNsZS10aXRsZT5UIGNlbGwgcmVjZXB0b3ItcHJveGltYWwgc2lnbmFscyBhcmUgc3VzdGFpbmVkIGluIHBlcmlwaGVyYWwgbWljcm9jbHVzdGVycyBhbmQgdGVybWluYXRlZCBpbiB0aGUgY2VudHJhbCBzdXByYW1vbGVjdWxhciBhY3RpdmF0aW9uIGNsdXN0ZXI8L2FydGljbGUtdGl0bGU+CiAgICAgICAgICA8c291cmNlPkltbXVuaXR5PC9zb3VyY2U+CiAgICAgICAgICA8dm9sdW1lPjI1PC92b2x1bWU+CiAgICAgICAgICA8ZnBhZ2U+MTE3PC9mcGFnZT4KICAgICAgICAgIDxscGFnZT4yNzwvbHBhZ2U+CiAgICAgICAgICA8cHViLWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjEwMTYvai5pbW11bmkuMjAwNi4wNC4wMTA8L3B1Yi1pZD4KICAgICAgICA8L2VsZW1lbnQtY2l0YXRpb24+CiAgICAgIDwvcmVmPgogICAgICA8cmVmIGlkPSJiaWI0MyI+CiAgICAgICAgPGVsZW1lbnQtY2l0YXRpb24gcHVibGljYXRpb24tdHlwZT0iam91cm5hbCI+CiAgICAgICAgICA8cGVyc29uLWdyb3VwIHBlcnNvbi1ncm91cC10eXBlPSJhdXRob3IiPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5XZWlzczwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+QTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+TGl0dG1hbjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+RFI8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICA8L3BlcnNvbi1ncm91cD4KICAgICAgICAgIDx5ZWFyPjE5OTQ8L3llYXI+CiAgICAgICAgICA8YXJ0aWNsZS10aXRsZT5TaWduYWwgdHJhbnNkdWN0aW9uIGJ5IGx5bXBob2N5dGUgYW50aWdlbiByZWNlcHRvcnM8L2FydGljbGUtdGl0bGU+CiAgICAgICAgICA8c291cmNlPkNlbGw8L3NvdXJjZT4KICAgICAgICAgIDx2b2x1bWU+NzY8L3ZvbHVtZT4KICAgICAgICAgIDxmcGFnZT4yNjM8L2ZwYWdlPgogICAgICAgICAgPGxwYWdlPjc0PC9scGFnZT4KICAgICAgICAgIDxwdWItaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuMTAxNi8wMDkyLTg2NzQoOTQpOTAzMzQtNDwvcHViLWlkPgogICAgICAgIDwvZWxlbWVudC1jaXRhdGlvbj4KICAgICAgPC9yZWY+CiAgICAgIDxyZWYgaWQ9ImJpYjQ0Ij4KICAgICAgICA8ZWxlbWVudC1jaXRhdGlvbiBwdWJsaWNhdGlvbi10eXBlPSJqb3VybmFsIj4KICAgICAgICAgIDxwZXJzb24tZ3JvdXAgcGVyc29uLWdyb3VwLXR5cGU9ImF1dGhvciI+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPldpbGxpYW1zPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5DQjwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+RW5nbGU8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkRMPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5LZXJzaDwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+R0o8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPk1pY2hhZWwgV2hpdGU8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPko8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkFsbGVuPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5QTTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgIDwvcGVyc29uLWdyb3VwPgogICAgICAgICAgPHllYXI+MTk5OTwveWVhcj4KICAgICAgICAgIDxhcnRpY2xlLXRpdGxlPkEga2luZXRpYyB0aHJlc2hvbGQgYmV0d2VlbiBuZWdhdGl2ZSBhbmQgcG9zaXRpdmUgc2VsZWN0aW9uIGJhc2VkIG9uIHRoZSBsb25nZXZpdHkgb2YgdGhlIFQgY2VsbCByZWNlcHRvci1saWdhbmQgY29tcGxleDwvYXJ0aWNsZS10aXRsZT4KICAgICAgICAgIDxzb3VyY2U+SiBFeHAgTWVkPC9zb3VyY2U+CiAgICAgICAgICA8dm9sdW1lPjE4OTwvdm9sdW1lPgogICAgICAgICAgPGZwYWdlPjE1MzE8L2ZwYWdlPgogICAgICAgICAgPGxwYWdlPjQ0PC9scGFnZT4KICAgICAgICAgIDxwdWItaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuMTA4NC9qZW0uMTg5LjEwLjE1MzE8L3B1Yi1pZD4KICAgICAgICA8L2VsZW1lbnQtY2l0YXRpb24+CiAgICAgIDwvcmVmPgogICAgICA8cmVmIGlkPSJiaWI0NSI+CiAgICAgICAgPGVsZW1lbnQtY2l0YXRpb24gcHVibGljYXRpb24tdHlwZT0iam91cm5hbCI+CiAgICAgICAgICA8cGVyc29uLWdyb3VwIHBlcnNvbi1ncm91cC10eXBlPSJhdXRob3IiPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5YdTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+UTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+TGluPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5XQzwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+UGV0aXQ8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPlJTPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5Hcm92ZXM8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkpUPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgPC9wZXJzb24tZ3JvdXA+CiAgICAgICAgICA8eWVhcj4yMDExPC95ZWFyPgogICAgICAgICAgPGFydGljbGUtdGl0bGU+RXBoQTIgcmVjZXB0b3IgYWN0aXZhdGlvbiBieSBtb25vbWVyaWMgRXBocmluLUExIG9uIHN1cHBvcnRlZCBtZW1icmFuZXM8L2FydGljbGUtdGl0bGU+CiAgICAgICAgICA8c291cmNlPkJpb3BoeXMgSjwvc291cmNlPgogICAgICAgICAgPHZvbHVtZT4xMDE8L3ZvbHVtZT4KICAgICAgICAgIDxmcGFnZT4yNzMxPC9mcGFnZT4KICAgICAgICAgIDxscGFnZT45PC9scGFnZT4KICAgICAgICAgIDxwdWItaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuMTAxNi9qLmJwai4yMDExLjEwLjAzOTwvcHViLWlkPgogICAgICAgIDwvZWxlbWVudC1jaXRhdGlvbj4KICAgICAgPC9yZWY+CiAgICAgIDxyZWYgaWQ9ImJpYjQ2Ij4KICAgICAgICA8ZWxlbWVudC1jaXRhdGlvbiBwdWJsaWNhdGlvbi10eXBlPSJqb3VybmFsIj4KICAgICAgICAgIDxwZXJzb24tZ3JvdXAgcGVyc29uLWdyb3VwLXR5cGU9ImF1dGhvciI+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPllpbjwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+WTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+V2FuZzwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+WFg8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPk1hcml1enphPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5SQTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgIDwvcGVyc29uLWdyb3VwPgogICAgICAgICAgPHllYXI+MjAxMjwveWVhcj4KICAgICAgICAgIDxhcnRpY2xlLXRpdGxlPkNyeXN0YWwgc3RydWN0dXJlIG9mIGEgY29tcGxldGUgdGVybmFyeSBjb21wbGV4IG9mIFQtY2VsbCByZWNlcHRvciwgcGVwdGlkZS1NSEMsIGFuZCBDRDQ8L2FydGljbGUtdGl0bGU+CiAgICAgICAgICA8c291cmNlPlByb2MgTmF0bCBBY2FkIFNjaSBVU0E8L3NvdXJjZT4KICAgICAgICAgIDx2b2x1bWU+MTA5PC92b2x1bWU+CiAgICAgICAgICA8ZnBhZ2U+NTQwNTwvZnBhZ2U+CiAgICAgICAgICA8bHBhZ2U+MTA8L2xwYWdlPgogICAgICAgICAgPHB1Yi1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC4xMDczL3BuYXMuMTExODgwMTEwOTwvcHViLWlkPgogICAgICAgIDwvZWxlbWVudC1jaXRhdGlvbj4KICAgICAgPC9yZWY+CiAgICAgIDxyZWYgaWQ9ImJpYjQ3Ij4KICAgICAgICA8ZWxlbWVudC1jaXRhdGlvbiBwdWJsaWNhdGlvbi10eXBlPSJqb3VybmFsIj4KICAgICAgICAgIDxwZXJzb24tZ3JvdXAgcGVyc29uLWdyb3VwLXR5cGU9ImF1dGhvciI+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPllva29zdWthPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5UPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5TYWthdGEtU29nYXdhPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5LPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5Lb2JheWFzaGk8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPlc8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkhpcm9zaGltYTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+TTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+SGFzaGltb3RvLVRhbmU8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkE8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPlRva3VuYWdhPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5NPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8ZXRhbC8+CiAgICAgICAgICA8L3BlcnNvbi1ncm91cD4KICAgICAgICAgIDx5ZWFyPjIwMDU8L3llYXI+CiAgICAgICAgICA8YXJ0aWNsZS10aXRsZT5OZXdseSBnZW5lcmF0ZWQgVCBjZWxsIHJlY2VwdG9yIG1pY3JvY2x1c3RlcnMgaW5pdGlhdGUgYW5kIHN1c3RhaW4gVCBjZWxsIGFjdGl2YXRpb24gYnkgcmVjcnVpdG1lbnQgb2YgWmFwNzAgYW5kIFNMUC03NjwvYXJ0aWNsZS10aXRsZT4KICAgICAgICAgIDxzb3VyY2U+TmF0IEltbXVub2w8L3NvdXJjZT4KICAgICAgICAgIDx2b2x1bWU+Njwvdm9sdW1lPgogICAgICAgICAgPGZwYWdlPjEyNTM8L2ZwYWdlPgogICAgICAgICAgPGxwYWdlPjYyPC9scGFnZT4KICAgICAgICAgIDxwdWItaWQgcHViLWlkLXR5cGU9ImRvaSI+MTAuMTAzOC9uaTEyNzI8L3B1Yi1pZD4KICAgICAgICA8L2VsZW1lbnQtY2l0YXRpb24+CiAgICAgIDwvcmVmPgogICAgICA8cmVmIGlkPSJiaWI0OCI+CiAgICAgICAgPGVsZW1lbnQtY2l0YXRpb24gcHVibGljYXRpb24tdHlwZT0iam91cm5hbCI+CiAgICAgICAgICA8cGVyc29uLWdyb3VwIHBlcnNvbi1ncm91cC10eXBlPSJhdXRob3IiPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5ZdTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+WTwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+RmF5PC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5OQzwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+U21vbGlnb3ZldHM8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkFBPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5XdTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+SEo8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkdyb3Zlczwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+SlQ8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICA8L3BlcnNvbi1ncm91cD4KICAgICAgICAgIDx5ZWFyPjIwMTI8L3llYXI+CiAgICAgICAgICA8YXJ0aWNsZS10aXRsZT5NeW9zaW4gSUlBIG1vZHVsYXRlcyBUIGNlbGwgcmVjZXB0b3IgdHJhbnNwb3J0IGFuZCBDYXNMIHBob3NwaG9yeWxhdGlvbiBkdXJpbmcgZWFybHkgaW1tdW5vbG9naWNhbCBzeW5hcHNlIGZvcm1hdGlvbjwvYXJ0aWNsZS10aXRsZT4KICAgICAgICAgIDxzb3VyY2U+UExPUyBPTkU8L3NvdXJjZT4KICAgICAgICAgIDx2b2x1bWU+Nzwvdm9sdW1lPgogICAgICAgICAgPGZwYWdlPmUzMDcwNDwvZnBhZ2U+CiAgICAgICAgICA8cHViLWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjEzNzEvam91cm5hbC5wb25lLjAwMzA3MDQ8L3B1Yi1pZD4KICAgICAgICA8L2VsZW1lbnQtY2l0YXRpb24+CiAgICAgIDwvcmVmPgogICAgICA8cmVmIGlkPSJiaWI0OSI+CiAgICAgICAgPGVsZW1lbnQtY2l0YXRpb24gcHVibGljYXRpb24tdHlwZT0iam91cm5hbCI+CiAgICAgICAgICA8cGVyc29uLWdyb3VwIHBlcnNvbi1ncm91cC10eXBlPSJhdXRob3IiPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5aaHU8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkM8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkppYW5nPC9zdXJuYW1lPgogICAgICAgICAgICAgIDxnaXZlbi1uYW1lcz5OPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICA8c3VybmFtZT5IdWFuZzwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+SjwvZ2l2ZW4tbmFtZXM+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgPHN1cm5hbWU+WmFybml0c3luYTwvc3VybmFtZT4KICAgICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+Vkk8L2dpdmVuLW5hbWVzPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgIDxzdXJuYW1lPkV2YXZvbGQ8L3N1cm5hbWU+CiAgICAgICAgICAgICAgPGdpdmVuLW5hbWVzPkJEPC9naXZlbi1uYW1lcz4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgPC9wZXJzb24tZ3JvdXA+CiAgICAgICAgICA8eWVhcj4yMDEzPC95ZWFyPgogICAgICAgICAgPGFydGljbGUtdGl0bGU+SW5zaWdodHMgZnJvbSBpbiBzaXR1IGFuYWx5c2lzIG9mIFRDUi1wTUhDIHJlY29nbml0aW9uOiByZXNwb25zZSBvZiBhbiBpbnRlcmFjdGlvbiBuZXR3b3JrPC9hcnRpY2xlLXRpdGxlPgogICAgICAgICAgPHNvdXJjZT5JbW11bm9sIFJldjwvc291cmNlPgogICAgICAgICAgPHZvbHVtZT4yNTE8L3ZvbHVtZT4KICAgICAgICAgIDxmcGFnZT40OTwvZnBhZ2U+CiAgICAgICAgICA8bHBhZ2U+NjQ8L2xwYWdlPgogICAgICAgICAgPHB1Yi1pZCBwdWItaWQtdHlwZT0iZG9pIj4xMC4xMTExL2ltci4xMjAxNjwvcHViLWlkPgogICAgICAgIDwvZWxlbWVudC1jaXRhdGlvbj4KICAgICAgPC9yZWY+CiAgICA8L3JlZi1saXN0PgogIDwvYmFjaz4KICA8c3ViLWFydGljbGUgYXJ0aWNsZS10eXBlPSJhcnRpY2xlLWNvbW1lbnRhcnkiIGlkPSJTQTEiPgogICAgPGZyb250LXN0dWI+CiAgICAgIDxhcnRpY2xlLWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjc1NTQvZUxpZmUuMDA3NzguMDE2PC9hcnRpY2xlLWlkPgogICAgICA8dGl0bGUtZ3JvdXA+CiAgICAgICAgPGFydGljbGUtdGl0bGU+RGVjaXNpb24gbGV0dGVyPC9hcnRpY2xlLXRpdGxlPgogICAgICA8L3RpdGxlLWdyb3VwPgogICAgICA8Y29udHJpYi1ncm91cCBjb250ZW50LXR5cGU9InNlY3Rpb24iPgogICAgICAgIDxjb250cmliIGNvbnRyaWItdHlwZT0iZWRpdG9yIj4KICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICA8c3VybmFtZT5CcnVuZ2VyPC9zdXJuYW1lPgogICAgICAgICAgICA8Z2l2ZW4tbmFtZXM+QXhlbCBUPC9naXZlbi1uYW1lcz4KICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgIDxyb2xlPlJldmlld2luZyBlZGl0b3I8L3JvbGU+CiAgICAgICAgICA8YWZmPjxpbnN0aXR1dGlvbj5Ib3dhcmQgSHVnaGVzIE1lZGljYWwgSW5zdGl0dXRlLCBTdGFuZm9yZCBVbml2ZXJzaXR5PC9pbnN0aXR1dGlvbj4sIDxjb3VudHJ5PlVuaXRlZCBTdGF0ZXM8L2NvdW50cnk+PC9hZmY+CiAgICAgICAgPC9jb250cmliPgogICAgICA8L2NvbnRyaWItZ3JvdXA+CiAgICA8L2Zyb250LXN0dWI+CiAgICA8Ym9keT4KICAgICAgPGJveGVkLXRleHQ+CiAgICAgICAgPHA+ZUxpZmUgcG9zdHMgdGhlIGVkaXRvcmlhbCBkZWNpc2lvbiBsZXR0ZXIgYW5kIGF1dGhvciByZXNwb25zZSBvbiBhIHNlbGVjdGlvbiBvZiB0aGUgcHVibGlzaGVkIGFydGljbGVzIChzdWJqZWN0IHRvIHRoZSBhcHByb3ZhbCBvZiB0aGUgYXV0aG9ycykuIEFuIGVkaXRlZCB2ZXJzaW9uIG9mIHRoZSBsZXR0ZXIgc2VudCB0byB0aGUgYXV0aG9ycyBhZnRlciBwZWVyIHJldmlldyBpcyBzaG93biwgaW5kaWNhdGluZyB0aGUgc3Vic3RhbnRpdmUgY29uY2VybnMgb3IgY29tbWVudHM7IG1pbm9yIGNvbmNlcm5zIGFyZSBub3QgdXN1YWxseSBzaG93bi4gUmV2aWV3ZXJzIGhhdmUgdGhlIG9wcG9ydHVuaXR5IHRvIGRpc2N1c3MgdGhlIGRlY2lzaW9uIGJlZm9yZSB0aGUgbGV0dGVyIGlzIHNlbnQgKHNlZSA8ZXh0LWxpbmsgZXh0LWxpbmstdHlwZT0idXJpIiB4bGluazpocmVmPSJodHRwOi8vd3d3LmVsaWZlc2NpZW5jZXMub3JnL3RoZS1qb3VybmFsL3Jldmlldy1wcm9jZXNzIj5yZXZpZXcgcHJvY2VzczwvZXh0LWxpbms+KS4gU2ltaWxhcmx5LCB0aGUgYXV0aG9yIHJlc3BvbnNlIHR5cGljYWxseSBzaG93cyBvbmx5IHJlc3BvbnNlcyB0byB0aGUgbWFqb3IgY29uY2VybnMgcmFpc2VkIGJ5IHRoZSByZXZpZXdlcnMuPC9wPgogICAgICA8L2JveGVkLXRleHQ+CiAgICAgIDxwPlRoYW5rIHlvdSBmb3Igc2VuZGluZyB5b3VyIHdvcmsgZW50aXRsZWQg4oCcRGlyZWN0IHNpbmdsZSBtb2xlY3VsZSBtZWFzdXJlbWVudCBvZiBUQ1IgdHJpZ2dlcmluZyBieSBhZ29uaXN0IHBNSEMgaW4gbGl2aW5nIHByaW1hcnkgVCBjZWxsc+KAnSBmb3IgY29uc2lkZXJhdGlvbiBhdCA8aXRhbGljPmVMaWZlPC9pdGFsaWM+LiBZb3VyIGFydGljbGUgaGFzIGJlZW4gZmF2b3JhYmx5IGV2YWx1YXRlZCBieSBhIFNlbmlvciBlZGl0b3IsIERldGxlZiBXZWlnZWwsIGFuZCAzIHJldmlld2Vycywgb25lIG9mIHdob20gaXMgYSBtZW1iZXIgb2Ygb3VyIEJvYXJkIG9mIFJldmlld2luZyBFZGl0b3JzLjwvcD4KICAgICAgPHA+VGhlIFJldmlld2luZyBlZGl0b3IgYW5kIHRoZSBvdGhlciByZXZpZXdlcnMgZGlzY3Vzc2VkIHRoZWlyIGNvbW1lbnRzIGJlZm9yZSB3ZSByZWFjaGVkIHRoaXMgZGVjaXNpb24sIGFuZCB0aGUgUmV2aWV3aW5nIGVkaXRvciBoYXMgYXNzZW1ibGVkIHRoZSBmb2xsb3dpbmcgY29tbWVudHMgdG8gaGVscCB5b3UgcHJlcGFyZSBhIHJldmlzZWQgc3VibWlzc2lvbi48L3A+CiAgICAgIDxwPk92ZXJhbGwsIHRoaXMgaXMgYW4gb3V0c3RhbmRpbmcgc3R1ZHksIG9uZSB0aGF0IGhhcyBtYWRlIGEgbnVtYmVyIG9mIHRlY2huaWNhbCBicmVha3Rocm91Z2hzIGFuZCBlbWVyZ2VzIHdpdGggaW50ZXJlc3RpbmcgcmVzdWx0cy4gVGhlIGF1dGhvcnMgZXhhbWluZSB0aGUgaW50ZXJhY3Rpb25zIGJldHdlZW4gcE1IQyBhbmQgVENSLCBhdCBhIHNpbmdsZSBtb2xlY3VsZSBsZXZlbCwgd2hpY2ggcHJvdmlkZXMgYSBkaXJlY3QgbWVhc3VyZW1lbnQgb24gdGhlIGFzc29jaWF0aW9uIHRpbWVzIG9mIHRoaXMgY29tcGxleC4gVGhleSBhbHNvIGV4YW1pbmUgaG93IHRoZSBwTUhDLVRDUiBjb21wbGV4IHJlY3J1aXRzIFpBUDcwLCB3aGljaCBpcyBhIGRpcmVjdCBtZWFzdXJlIG9mIHRyaWdnZXJpbmcgYW5kIHRoZSBpbml0aWF0aW9uIG9mIHNpZ25hbCB0cmFuc2R1Y3Rpb24uIFRoaXMgaXMgYSB2ZXJ5IG5pY2VseSBleGVjdXRlZCB0d28gY29sb3IsIHNpbmdsZSBtb2xlY3VsZSBleHBlcmltZW50LiBUaGVyZSBhcmUgc2V2ZXJhbCBpbnRlcmVzdGluZyBmaW5kaW5nczogMSkgdGhlIFRDUi1wTUhDIGFjdCBhcyBkaXNjcmV0ZSBlbnRpdGllcyBhbmQgZG8gbm90IGFwcGVhciB0byBhZ2dyZWdhdGU7IDIpIHRoZSBhc3NvY2lhdGlvbiB0aW1lcyBkaWZmZXIgMTAtZm9sZCBmb3IgdHdvIGRpZmZlcmVudCBwZXB0aWRlIGFnb25pc3RzLCByZXZlYWxpbmcgZGlzdGluY3QgaW5mb3JtYXRpb24gZW5jb2RlZCBieSBvZmYtcmF0ZXM7IDMpIHRoZSBkaXNzb2NpYXRpb24gcmF0ZXMgYXJlIG11Y2ggc2xvd2VyIHRoYW4gd2FzIHByZXZpb3VzbHkgcmVwb3J0ZWQgYnkgYSBsaXZlIGNlbGwgRlJFVCBtZWFzdXJlbWVudCAodGhlIG5ldyBkYXRhIGFyZSBtb3JlIGRpcmVjdCBhbmQgYmVsaWV2YWJsZSwgYW5kIHRoZSBpbmZvcm1hdGlvbiB3aWxsIGJlIGltcG9ydGFudCBmb3IgdGhlIGZpZWxkKTsgNCkgVmlydHVhbGx5IGFsbCBwTUhDLVRDUiBjb21wbGV4ZXMgYmVjb21lIGltbW9iaWxpemVkIGFuZCBob29rIG9udG8gdGhlIGFjdGluIGN5dG9za2VsZXRvbjsgYW5kIDUpIGVhY2ggcE1IQy1UQ1IgcmVjcnVpdHMgc2V2ZXJhbCBaQVA3MCBtb2xlY3VsZXMgYW5kIHRoZXNlIGNvbXBsZXhlcyBhbHNvIGFyZSBleHRyZW1lbHkgbG9uZyBsaXZlZC48L3A+CiAgICAgIDxwPk1ham9yIGNvbW1lbnRzOjwvcD4KICAgICAgPHA+MSkgVGhpcyBtYW51c2NyaXB0IGZvbGxvd3Mgb3RoZXJzICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIxOCI+SHVwcGEgZXQgYWwuLCAyMDEwPC94cmVmPjsgPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMTciPkh1YW5nIGV0IGFsLiwgMjAxMDwveHJlZj4pIHRoYXQgaGF2ZSB0cmllZCB0byBhZGRyZXNzIHRoaXMgcHJvYmxlbSBhbmQgY29tZSBhd2F5IHdpdGggaW50ZXJlc3RpbmcgaW5zaWdodHMuIFRoZSBjdXJyZW50IHN0dWR5IHRha2VzIGEgdW5pcXVlIGFwcHJvYWNoIHVzaW5nIGxvdyBpbnRlbnNpdHkgbGlnaHQgZm9yIGxvbmdlciB0aW1lIHBlcmlvZHMsIHdoaWNoIHNlbGVjdHMgYWdhaW5zdCBzaG9ydC10ZXJtIGludGVyYWN0aW9ucyB0byB0cmFjayBUQ1ItUE1IQyBpbnRlcmFjdGlvbnMgYW5kIGNvbWVzIHVwIHdpdGggc29tZSBjb250cmFkaWN0aW9ucyB3aXRoIHRoZSBwdWJsaXNoZWQgd29yay4gVGhlc2UgZGlmZmVyZW5jZXMgdG8gdGhlIHByZXZpb3VzbHkgcHVibGlzaGVkIHJlc3VsdHMgYXJlIHB1enpsaW5nIGFuZCBuZWVkIHRvIGJlIGRpc2N1c3NlZC48L3A+CiAgICAgIDxwPjIpIFRoZXJlIGlzIG5vdCBtdWNoIG9mIGEgZGlmZmVyZW5jZSBiZXR3ZWVuIDI0IGFuZCAzNyBkZWdyZWVzLiBUaGlzIGlzIHN1cnByaXNpbmcgYW5kIHNob3VsZCBiZSBkaXNjdXNzZWQuPC9wPgogICAgICA8cD4zKSBUaGUgSW50cm9kdWN0aW9uIGNvdWxkIGJlIGltcHJvdmVkIGZvciBhIGdlbmVyYWwgYXVkaWVuY2UuIEN1cnJlbnRseSBpdCByZWFkcyBsaWtlIGEgbG9uZ2VyIHZlcnNpb24gb2YgdGhlIEFic3RyYWN0IChvciBhIHNob3J0ZXIgdmVyc2lvbiBvZiB0aGUgUmVzdWx0cykuIFRoaXMgc2VjdGlvbiB3b3VsZCBiZSBhIGdvb2QgcGxhY2UgdG8gc2V0IHVwIHRoZSBtYWluIGlzc3VlcyBvZiB0aGUgcGFwZXIsIGUuZy4sIHdoeSBvZmYtcmF0ZXMgYXJlIGltcG9ydGFudCBhbmQgd2hhdCBhdHRlbXB0cyBoYXZlIGJlZW4gbWFkZSB0byBtZWFzdXJlIHRoaXMgaW4gdGhlIHBhc3QuIEFsc28gYSBmZXcgc21hbGwgcG9pbnRzIOKAkyBhcmUgYWxsIHBNSEMtVENSLVphcDcwIGNvbXBsZXhlcyBhdHRhY2hlZCB0byBhY3RpbiBvciBpcyB0aGVyZSBldmlkZW5jZSBvZiB0aGVtIGJlaW5nIGZvcm1lZCwgZGlmZnVzaW9uLCBhbmQgdGhlbiBqb2luaW5nIG9udG8gdGhlIGFjdGluIHRyZWFkbWlsbD8gQ2FuIG9uZSBkZXRlY3QgdmFyaWFiaWxpdHkgb3Igc3VjY2Vzc2l2ZSByZWNydWl0bWVudCBvZiBaYXA3MD8gSXQgaXMgc3RhdGVkIHRoYXQgdGhlcmUgaXMgYW4gYXZlcmFnZSBvZiA2IGJ1dCB3ZSBhcmUgd29uZGVyaW5nIGlmIG9uZSBjb3VsZCBleHRyYWN0IGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYXQgdGhlIHNpbmdsZSBtb2xlY3VsZSBsZXZlbCBvZiBjbGVhciB2YXJpYWJpbGl0eSAocGFydGljdWxhcmx5IGZvciB0d28gZGlmZmVyZW50IHBNSEMpIG9yIGFjY3VtdWxhdGlvbiBvZiBaYXA3MCBvdmVyIHRpbWUuPC9wPgogICAgPC9ib2R5PgogIDwvc3ViLWFydGljbGU+CiAgPHN1Yi1hcnRpY2xlIGFydGljbGUtdHlwZT0icmVwbHkiIGlkPSJTQTIiPgogICAgPGZyb250LXN0dWI+CiAgICAgIDxhcnRpY2xlLWlkIHB1Yi1pZC10eXBlPSJkb2kiPjEwLjc1NTQvZUxpZmUuMDA3NzguMDE3PC9hcnRpY2xlLWlkPgogICAgICA8dGl0bGUtZ3JvdXA+CiAgICAgICAgPGFydGljbGUtdGl0bGU+QXV0aG9yIHJlc3BvbnNlPC9hcnRpY2xlLXRpdGxlPgogICAgICA8L3RpdGxlLWdyb3VwPgogICAgPC9mcm9udC1zdHViPgogICAgPGJvZHk+CiAgICAgIDxwPjxpdGFsaWM+MSkgVGhpcyBtYW51c2NyaXB0IGZvbGxvd3Mgb3RoZXJzICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIxOCI+SHVwcGEgZXQgYWwuLCAyMDEwPC94cmVmPjsgPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMTciPkh1YW5nIGV0IGFsLiwgMjAxMDwveHJlZj4pIHRoYXQgaGF2ZSB0cmllZCB0byBhZGRyZXNzIHRoaXMgcHJvYmxlbSBhbmQgY29tZSBhd2F5IHdpdGggaW50ZXJlc3RpbmcgaW5zaWdodHMuIFRoZSBjdXJyZW50IHN0dWR5IHRha2VzIGEgdW5pcXVlIGFwcHJvYWNoIHVzaW5nIGxvdyBpbnRlbnNpdHkgbGlnaHQgZm9yIGxvbmdlciB0aW1lIHBlcmlvZHMsIHdoaWNoIHNlbGVjdHMgYWdhaW5zdCBzaG9ydC10ZXJtIGludGVyYWN0aW9ucyB0byB0cmFjayBUQ1ItUE1IQyBpbnRlcmFjdGlvbnMgYW5kIGNvbWVzIHVwIHdpdGggc29tZSBjb250cmFkaWN0aW9ucyB3aXRoIHRoZSBwdWJsaXNoZWQgd29yay4gVGhlc2UgZGlmZmVyZW5jZXMgdG8gdGhlIHByZXZpb3VzbHkgcHVibGlzaGVkIHJlc3VsdHMgYXJlIHB1enpsaW5nIGFuZCBuZWVkIHRvIGJlIGRpc2N1c3NlZDwvaXRhbGljPi48L3A+CiAgICAgIDxwPlRoZSBkaWZmZXJpbmcgcmVzdWx0cyB3aXRoIHJlc3BlY3QgdG8gaW4gc2l0dSBwTUhDOlRDUiBraW5ldGljcyBvYnNlcnZlZCBieSB0cmFja2luZyBpbiBvdXIgZXhwZXJpbWVudHMgYW5kIGJ5IHNtRlJFVCBpbiB0aGUgPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMTgiPkh1cHBhIGV0IGFsLiwgMjAxMDwveHJlZj4gcGFwZXIgYXJlIGluZGVlZCBwdXp6bGluZy4gU2V2ZXJhbCBrZXkgcG9pbnRzIHJlZ2FyZGluZyB0aGlzIGlzc3VlIGFyZSBjb250YWluZWQgaW4gdGhlIG9yaWdpbmFsIG1hbnVzY3JpcHQuIFdlIGhpZ2hsaWdodCB0aGVzZSBiZWxvdyBhbmQgaGF2ZSBtYWRlIGFkZGl0aW9uYWwgY2xhcmlmaWNhdGlvbnMgaW4gdGhlIHRleHQgKGUuZy4sIHBhcmFncmFwaCAxIGluIOKAnFNpbmdsZSBtb2xlY3VsZSBhZ29uaXN0IHBNSEM6VENSIGJpbmRpbmcga2luZXRpY3PigJ0pLjwvcD4KICAgICAgPHA+VGhlIHZhcmlhYmxlIGV4cG9zdXJlIHRpbWVzIHVzZWQgaW4gb3VyIGV4cGVyaW1lbnRzIGFsbG93IG9ic2VydmF0aW9ucyB0byBiZSBkaXJlY3RlZCBhdCBkaWZmZXJlbnQgdGltZSBzY2FsZXMuIFRodXMgYWx0aG91Z2ggbXVjaCBvZiB0aGUgZGF0YSBwcmVzZW50ZWQgd2FzIGFjcXVpcmVkIHVuZGVyIGNvbmRpdGlvbnMgdGhhdCBkbyBpbmRlZWQgc2VsZWN0IGFnYWluc3Qgc2hvcnQtdGVybSBpbnRlcmFjdGlvbnMsIHdlIGhhdmUgYWxzbyBkb25lIHRoZSBjb3JyZXNwb25kaW5nIGhpZ2gtc3BlZWQgbWVhc3VyZW1lbnRzIChzZWUsIGZvciBleGFtcGxlLCB0aGUgc2luZ2xlIG1vbGVjdWxlIHRyYWNlIGluIDx4cmVmIHJlZi10eXBlPSJmaWciIHJpZD0iZmlnMSI+RmlndXJlIDFDPC94cmVmPikuIFRoZSBmYXN0IHBNSEM6VENSIGtpbmV0aWNzIHJlcG9ydGVkIGluIEh1cHBhIGV0IGFsLiwgYXJlIHN0aWxsIGFuIG9yZGVyIG9mIG1hZ25pdHVkZSBzbG93ZXIgdGhhbiBvdXIgZmFzdGVzdCB0aW1lIHJlc29sdXRpb24gKDE3LjUgbXMpOyBzdWNoIGZhc3QgZXZlbnRzIGFyZSBub3QgbGlrZWx5IHRvIGJlIG1pc3NlZCBpbiB0aGVzZSB0cmFja2luZyBleHBlcmltZW50cyB1c2luZyB0aGUgZmFzdCBleHBvc3VyZSB0aW1lcy48L3A+CiAgICAgIDxwPldlIGRldm90ZSBzZXZlcmFsIGFuYWx5c2VzIGluIHRoZSBtYW51c2NyaXB0IHRvd2FyZHMgcG9zc2libGUgZGlmZmVyZW5jZXMgaW4gd2hhdCBpcyBtZWFzdXJlZCBieSB0cmFja2luZyB2cy4gc21GUkVULiBTcGVjaWZpY2FsbHksIHdlIGNvbnNpZGVyIChhbmQgcnVsZSBvdXQpIHNlcmlhbCByZWJpbmRpbmcgb2YgYSBzaW5nbGUgcE1IQyB0byBtdWx0aXBsZSBUQ1IgaW4gYSBUQ1IgY2x1c3RlciAo4oCcU3RvY2hhc3RpYyByZWFjdGlvbi1kaWZmdXNpb24gc2ltdWxhdGlvbnPigJ0pLiBJbiB0aGUgRGlzY3Vzc2lvbiAocGFyYWdyYXBocyAzIGFuZCA0KSB3ZSBzdWdnZXN0IHN0cnVjdHVyYWwgZmxleGliaWxpdHkgd2l0aGluIHRoZSBwTUhDOlRDUiBjb21wbGV4IGNvdWxkIGV4cGxhaW4gdGhlIGRpZmZlcmluZyBvYnNlcnZhdGlvbnMsIHBhcnRpY3VsYXJseSBzaW5jZSB0aGUgZmFzdCBraW5ldGljcyBhcmUgb25seSBvYnNlcnZlZCB3aGVuIHRoZSBwTUhDOlRDUiBjb21wbGV4ZXMgYXJlIHVuZGVyIHN0cmFpbi4gVGhpcyBjb3VsZCBlYXNpbHkgb2JsaXRlcmF0ZSBhIHNtRlJFVCBzaWduYWwgZXZlbiB3aXRob3V0IHRoZSBjb21wbGV4IGZ1bGx5IGRpc2VuZ2FnaW5nICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIyNSI+TWFqdW1kYXIgZXQgYWwuLCAyMDA3PC94cmVmPikuIFN1Y2ggZmxleGliaWxpdHkgaXMgc3VwcG9ydGVkIGJ5IHJlY2VudCBzdHJ1Y3R1cmFsIGFuYWx5c2VzIG9mIHBNSEM6VENSICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIxIj5BZGFtcyBldCBhbC4sIDIwMTE8L3hyZWY+OyA8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIxNiI+SGF3c2UgZXQgYWwuLCAyMDEyPC94cmVmPjsgPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliMzQiPlJlYm91bCBldCBhbC4sIDIwMTI8L3hyZWY+KS4gVGhlcmVmb3JlLCB3aXRoIHRoZSBpbmZvcm1hdGlvbiBhdCBoYW5kLCB3ZSBzdWdnZXN0IHRoaXMgaXMgdGhlIG1vc3QgbGlrZWx5IGV4cGxhbmF0aW9uLiBJdCBpcyBpbXBvcnRhbnQgdG8gbm90ZSB0aGF0IG91ciBtZWFzdXJlbWVudHMgYWdyZWUgd2l0aCBzb2x1dGlvbiBTUFIgbWVhc3VyZW1lbnRzICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWI3Ij5Db3JzZSBldCBhbC4gMjAxMDwveHJlZj4gJmFtcDsgOyA8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIyOSI+TmV3ZWxsIGV0IGFsLiAyMDExPC94cmVmPikgYW5kIHdpdGggaW4gdml2byByZXF1aXJlbWVudHMgZm9yIG5lZ2F0aXZlIHNlbGVjdGlvbiAoPHhyZWYgcmVmLXR5cGU9ImJpYnIiIHJpZD0iYmliNDQiPldpbGxpYW1zIGV0IGFsLiwgMTk5OTwveHJlZj47IDx4cmVmIHJlZi10eXBlPSJiaWJyIiByaWQ9ImJpYjMxIj5QYWxtZXIgJmFtcDsgTmFlaGVyLCAyMDA5PC94cmVmPikgZm9yIHR3byBkaWZmZXJlbnQgVENSLiBXZSBkbyBub3QgYW5hbHl6ZSBtZWFzdXJlbWVudHMgbWFkZSB3aXRoIGEgZGlmZmVyZW50IHBNSEM6VENSIGNvbWJpbmF0aW9uICg8eHJlZiByZWYtdHlwZT0iYmliciIgcmlkPSJiaWIxNyI+SHVhbmcgZXQgYWwuLCAyMDEwPC94cmVmPikgaW4gZGV0YWlsIGJlY2F1c2UgdGhleSBhcmUgbm90IGRpcmVjdGx5IGNvbXBhcmFibGUuPC9wPgogICAgICA8cD48aXRhbGljPjIpIFRoZXJlIGlzIG5vdCBtdWNoIG9mIGEgZGlmZmVyZW5jZSBiZXR3ZWVuIDI0IGFuZCAzNyBkZWdyZWVzLiBUaGlzIGlzIHN1cnByaXNpbmcgYW5kIHNob3VsZCBiZSBkaXNjdXNzZWQ8L2l0YWxpYz4uPC9wPgogICAgICA8cD5UaGVyZSBpcyBvbmx5IGEgbW9kZXN0IGRpZmZlcmVuY2UgYmV0d2VlbiBkd2VsbCB0aW1lcyBtZWFzdXJlZCBhdCAyNCBhbmQgMzfCsEMuIFRoZSBkaWZmZXJlbmNlIGlzIG1vcmUgcHJvbm91bmNlZCBmb3IgdGhlIE1DQy1BTkQgaW50ZXJhY3Rpb24sIDU0IHMgdnMgODEgcyBhdCAyNCBhbmQgMzfCsEMsIHJlc3BlY3RpdmVseS4gV2Ugb2JzZXJ2ZSBhIHNsaWdodCB0ZW1wZXJhdHVyZSBlZmZlY3QgaW4gdGhlIDVjLmM3IHN5c3RlbTsgaG93ZXZlciwgdGhlIGludHJpbnNpYyBleHBlcmltZW50YWwgZXJyb3IgaW4gY29tcGFyaW5nIHRoZSBkd2VsbCB0aW1lIGRpc3RyaWJ1dGlvbnMgYXQgMjQgYW5kIDM3wrBDIGlzIGhpZ2hlciBmb3Igc2hvcnRlciBpbnRlcmFjdGlvbnMuIFRoZSBlZmZlY3QgaXMgYWxzbyBlYXNpZXIgdG8gc2VlIGZvciB0aGUgTUNDLUFORCBpbnRlcmFjdGlvbiBiZWNhdXNlIHRoZXJlIGFyZSBtb3JlIE1DQy1BTkQgY29tcGxleGVzIHBlciBUIGNlbGwgKGRhdGEgbm90IHNob3duKS4gSXQgaXMgYWxzbyBwb3NzaWJsZSB0aGF0IGNoYW5nZXMgaW4gY2VsbHVsYXIgYmVoYXZpb3IgaW4gcmVzcG9uc2UgdG8gdGVtcGVyYXR1cmUgY291bGQgYWxzbyBhZmZlY3QgdGhlc2UgbWVhc3VyZW1lbnRzIGluIHdheXMgdGhhdCBhcmUgbm90IG9ic2VydmVkIGluIHNvbHV0aW9uIG1lYXN1cmVtZW50cyB3aXRoIHB1cmlmaWVkIGNvbXBvbmVudHMuIEF0IDI0wrBDIFQgY2VsbHMgaGF2ZSBhIHNtYWxsZXIgc3VyZmFjZSBhcmVhIG9uIHRoZSBzdXBwb3J0ZWQgbWVtYnJhbmUgdGhhbiBhdCAzN8KwQywgYXJlIHNsb3dlciB0byBsYW5kLCBhbmQgYWxzbyBoYXZlIGRlY3JlYXNlZCBsYW1lbGxpcG9kaWFsIG1vdGlvbi4gVGhlc2UgZmFjdG9ycyBjb3VsZCBhZmZlY3QgdGhlIGVudmlyb25tZW50IG9mIHRoZSBwTUhDOlRDUiBpbnRlcmFjdGlvbiBpbiB1bnByZWRpY3RhYmxlIHdheXMgYW5kIHBlcmhhcHMgY291bGQgY29tcGVuc2F0ZSBmb3IgdGhlIGRpcmVjdCB0ZW1wZXJhdHVyZSBlZmZlY3Qgb24gbW9sZWN1bGFyIGludGVyYWN0aW9ucy48L3A+CiAgICAgIDxwPjxpdGFsaWM+MykgVGhlIEludHJvZHVjdGlvbiBjb3VsZCBiZSBpbXByb3ZlZCBmb3IgYSBnZW5lcmFsIGF1ZGllbmNlLiBDdXJyZW50bHkgaXQgcmVhZHMgbGlrZSBhIGxvbmdlciB2ZXJzaW9uIG9mIHRoZSBBYnN0cmFjdCAob3IgYSBzaG9ydGVyIHZlcnNpb24gb2YgdGhlIFJlc3VsdHMpLiBUaGlzIHNlY3Rpb24gd291bGQgYmUgYSBnb29kIHBsYWNlIHRvIHNldCB1cCB0aGUgbWFpbiBpc3N1ZXMgb2YgdGhlIHBhcGVyLCBlLmcuLCB3aHkgb2ZmLXJhdGVzIGFyZSBpbXBvcnRhbnQgYW5kIHdoYXQgYXR0ZW1wdHMgaGF2ZSBiZWVuIG1hZGUgdG8gbWVhc3VyZSB0aGlzIGluIHRoZSBwYXN0PC9pdGFsaWM+LjwvcD4KICAgICAgPHA+V2UgaGF2ZSBleHBhbmRlZCBhbmQgY2xhcmlmaWVkIHRoZSBJbnRyb2R1Y3Rpb24gdG8gYmV0dGVyIGludHJvZHVjZSB0aGUgaW1wb3J0YW5jZSBvZiBxdWFudGl0YXRpdmUgc2luZ2xlIG1vbGVjdWxlIG1lYXN1cmVtZW50cyAoZS5nLiwgb2Yga2luZXRpYyBvZmYtcmF0ZSwgc3RvaWNoaW9tZXRyeSwgZXRjLikgdG8gdGhlIHVuZGVyc3RhbmRpbmcgb2YgVENSIHNpZ25hbGluZyBtZWNoYW5pc21zLjwvcD4KICAgICAgPHA+PGl0YWxpYz5BbHNvIGEgZmV3IHNtYWxsIHBvaW50cyDigJMgYXJlIGFsbCBwTUhDLVRDUi1aYXA3MCBjb21wbGV4ZXMgYXR0YWNoZWQgdG8gYWN0aW4gb3IgaXMgdGhlcmUgZXZpZGVuY2Ugb2YgdGhlbSBiZWluZyBmb3JtZWQsIGRpZmZ1c2lvbiwgYW5kIHRoZW4gam9pbmluZyBvbnRvIHRoZSBhY3RpbiB0cmVhZG1pbGw/IENhbiBvbmUgZGV0ZWN0IHZhcmlhYmlsaXR5IG9yIHN1Y2Nlc3NpdmUgcmVjcnVpdG1lbnQgb2YgWmFwNzA/IEl0IGlzIHN0YXRlZCB0aGF0IHRoZXJlIGlzIGFuIGF2ZXJhZ2Ugb2YgNiBidXQgd2UgYXJlIHdvbmRlcmluZyBpZiBvbmUgY291bGQgZXh0cmFjdCBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGF0IHRoZSBzaW5nbGUgbW9sZWN1bGUgbGV2ZWwgb2YgY2xlYXIgdmFyaWFiaWxpdHkgKHBhcnRpY3VsYXJseSBmb3IgdHdvIGRpZmZlcmVudCBwTUhDKSBvciBhY2N1bXVsYXRpb24gb2YgWmFwNzAgb3ZlciB0aW1lPC9pdGFsaWM+LjwvcD4KICAgICAgPHA+QWxsIG9ic2VydmVkIHBNSEM6VENSOlpBUDcwIGNvbXBsZXhlcyBhcmUgdHJhbnNwb3J0ZWQgcmFkaWFsbHkgdG93YXJkcyB0aGUgZ2VvbWV0cmljIGNlbGwgY2VudGVyICg8eHJlZiByZWYtdHlwZT0ib3RoZXIiIHJpZD0idmlkZW8xIHZpZGVvMiB2aWRlbzMiPlZpZGVvcyAxLCAyLCBhbmQgMzwveHJlZj47IDx4cmVmIHJlZi10eXBlPSJmaWciIHJpZD0iZmlnMyI+RmlndXJlIDNBPC94cmVmPikgb2YgdGhlIDItZGltZW5zaW9uYWwgY2VsbC1zdXBwb3J0ZWQgbWVtYnJhbmUgaW50ZXJmYWNlLiBXZSBkbyBub3Qgb2JzZXJ2ZSBldmlkZW5jZSBmb3IgcE1IQzpUQ1I6WkFQNzAgcmFuZG9tIGRpZmZ1c2lvbiBwcmlvciB0byByYWRpYWwgdHJhbnNwb3J0IG9uIHRoZXNlIHRpbWVzY2FsZXMg4oCTIHN1Y2ggc2VxdWVudGlhbCBldmVudHMgY291bGQgb2NjdXIgb24gZmFzdGVyIHRpbWVzY2FsZXMuPC9wPgogICAgICA8cD5DbGVhciB2YXJpYWJpbGl0eSBkb2VzIGV4aXN0IGluIHRoZSBudW1iZXIgb2YgWkFQNzAtRUdGUCBwZXIgcE1IQzpUQ1IgY29tcGxleC4gVGhpcyBpcyBtb3N0IGNsZWFybHkgc2hvd24gaW4gPHhyZWYgcmVmLXR5cGU9ImZpZyIgcmlkPSJmaWczIj5GaWd1cmUgM0Q8L3hyZWY+LCB3aGVyZSB0aGUgaW50ZW5zaXR5IGRpc3RyaWJ1dGlvbiBvZiBaQVA3MC1FR0ZQIHB1bmN0YSBpcyBzeW1tZXRyaWMgYW5kIHVuaW1vZGFsIHdpdGggYW4gYXZlcmFnZSBvZiAyLjkgWkFQNzAtRUdGUC9wdW5jdGEuIFRoZSBkaXN0cmlidXRpb24gb2YgWkFQNzAtRUdGUCBpbnRlbnNpdGllcyAoZnJvbSBzaW5nbGUgWkFQNzAgbW9sZWN1bGVzIHVwIHRvIOKIvDEwKSBpbXBsaWVzIHRoYXQgdGltZS1kZXBlbmRlbnQgWkFQNzAtRUdGUCBhY2N1bXVsYXRpb24gbXVzdCBvY2N1ciwgYnV0IHdlIGhhdmUgbm90IGRlZmluaXRpdmVseSBvYnNlcnZlZCBhY2N1bXVsYXRpb24gb2YgWkFQNzAtRUdGUCBvdmVyIHRpbWUgaW4gb25lIGludGVuc2l0eSB0cmFjZS4gVGhlIG9ic2VydmF0aW9uIG9mIHNpbmdsZSBtb2xlY3VsZSBaQVA3MC1FR0ZQIGFjY3VtdWxhdGlvbiBpbiBhIHNpbmdsZSBpbnRlbnNpdHkgdHJhY2UgKGkuZS4sIHNldmVyYWwgY29uc2VjdXRpdmUgc3RlcCBpbnRlbnNpdHkgaW5jcmVhc2VzKSBpcyB0ZWNobmljYWxseSBjaGFsbGVuZ2luZyBkdWUgdG8gdGhlIGNvbnZvbHV0aW9uIG9mIHNldmVyYWwgdGltZS1kZXBlbmRlbnQgcHJvY2Vzc2VzOiBNQ0MtQXR0bzY0N04gYmxlYWNoaW5nLCBaQVA3MC1FR0ZQIGJsZWFjaGluZywgcE1IQzpUQ1IgdW5iaW5kaW5nLCBaQVA3MC1JVEFNIGJpbmRpbmcsIGFuZCBaQVA3MC1JVEFNIHVuYmluZGluZy4gV2UgZG8sIGhvd2V2ZXIsIG1ha2UgdGhlIGJ1bGsgb2JzZXJ2YXRpb24gdGhhdCB0aGUgYnJpZ2h0ZXN0IFpBUDcwLUVHRlAgZmVhdHVyZXMgYXJlIG9ic2VydmVkIGF0IGxhdGVyIHRpbWUgcG9pbnRzLiBUaGUgdGV4dCBoYXMgYmVlbiBjbGFyaWZpZWQgYWNjb3JkaW5nbHkgKOKAnFRDUiB0cmlnZ2VyaW5nIG1vbml0b3JlZCBieSBaQVA3MCByZWNydWl0bWVudOKAnSkuPC9wPgogICAgPC9ib2R5PgogIDwvc3ViLWFydGljbGU+CjwvYXJ0aWNsZT4K</embed>
        </revision>
      </submission_file>
      <article_galley xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" approved="true" galley_type="pdfarticlegalleyplugin" xsi:schemaLocation="http://pkp.sfu.ca native.xsd">
        <name locale="en_US">XML</name>
        <seq>0</seq>
        <submission_file_ref id="48" revision="1"/>
      </article_galley>
    </article>
  </articles>
</issue>
